This file is a merged representation of the entire codebase, combined into a single document by Repomix. The content has been processed where security check has been disabled.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information

Additional Info:
----------------

================================================================
Directory Structure
================================================================
attached_assets/
  Company info - Real Estate.csv
  Pasted--Hardcoded-stock-data-for-Property-Players-and-Med-Tech-Innovators-Using-real-companies-with-r-1742796477751.txt
  Pasted--Implement-a-stacked-card-swiping-interface-in-StockDetailPage-where-the-next-card-is-visible-undern-1743194631774.txt
  Pasted--Instructions-for-Replit-Agent-Improving-Stock-Metrics-Popups-1-Metric-Button-Popup-Imple-1742788538750.txt
  Pasted--Metrics-for-Color-Coding-Comparison-to-Industry-Standards-Revised-Value-Metrics-P-E-R-1742845146981.txt
  Pasted--name-Stryker-Corporation-ticker-SYK-price-345-68-change-1-85--1742796493455.txt
  Pasted--Real-Estate-comparison-stocks-with-accurate-scores-const-realEstateStocks-Record-string-Compar-1743126718012.txt
  Pasted-1-Company-by-Company-Overviews-AvalonBay-Communities-AVB-Value-P-E-28-2-P-B-2-55-Dividend-3-3--1742875718051.txt
  Pasted-1-Converting-String-Ratings-to-Numeric-Scores-For-any-metric-that-comes-as-a-text-value-for-examp-1742911598816.txt
  Pasted-1-Converting-String-Ratings-to-Numeric-Scores-For-any-metric-that-comes-as-a-text-value-for-exampl-1742911310967.txt
  Pasted-After-reviewing-your-code-and-the-screenshot-I-can-see-the-issue-with-your-portfolio-widget-not-upd-1743150434250.txt
  Pasted-AvalonBay-Communities-AVB-P-E-28-2-You-pay-28-20-for-every-1-of-AVB-s-annual-earnings-which--1742875791876.txt
  Pasted-Below-is-a-sample-Product-Requirements-Document-PRD-for-Swipefolio-an-app-that-makes-learning-1742761538285.txt
  Pasted-Here-s-the-breakdown-State-Management-Your-application-uses-PortfolioContext-client-src-contexts-1743190043947.txt
  Pasted-I-need-you-to-implement-a-comparative-analysis-feature-on-the-stock-card-below-the-stock-synopsis-se-1743122253330.txt
  Pasted-I-understand-you-need-text-based-instructions-for-the-Replit-agent-that-focus-on-the-UI-and-logic-wi-1742788506260.txt
  Pasted-I-understand-you-want-me-to-provide-guidance-for-the-Replit-agent-in-a-pseudo-code-format-rather-tha-1742789343142.txt
  Pasted-import-React-useState-from-react-const-VerticalStockComparison-const-showFu-1743124882307.txt
  Pasted-Issue-with-Score-Calculation-Logic-The-current-calculation-method-is-inconsistent-with-how-financial-1742942206320.txt
  Pasted-Looking-at-the-code-I-found-the-issue-When-you-tried-to-fix-the-swipe-directions-you-accidentally-1742967942476.txt
  Pasted-Name-1-year-return-Predict-Price-Prologis-PLD-13-27-128-79-Realty-Income-Corp-O-7-88-62-0-1742889296493.txt
  Pasted-Okay-let-s-figure-out-why-the-profile-picture-isn-t-updating-on-the-home-page-Based-on-the-code--1743190746108.txt
  Pasted-Overview-The-Portfolio-Impact-Calculator-will-show-users-how-adding-a-new-stock-affects-their-existi-1742890645314.txt
  Pasted-Overview-The-Portfolio-Impact-Calculator-will-show-users-how-adding-a-new-stock-affects-their-existi-1742891988601.txt
  Pasted-Prologis-Inc-PLD-Overall-Analysis-A-high-quality-logistics-REIT-benefiting-from-e-commerce-grow-1742802381328.txt
  Pasted-Prologis-Inc-PLD-Performance-Metrics-CopyRevenue-Growth-8-5-Industry-6-0-GREEN-What-it-m-1742797710209.txt
  Pasted-Prologis-Inc-PLD-Performance-Metrics-Revenue-Growth-8-5-Industry-6-0-GREEN-What-This-M-1742802035370.txt
  Pasted-Prologis-Performance-Rev-Growth-1-liner-Prologis-isn-t-making-much-more-money-than-last-year-gro-1743054850571.txt
  Pasted-Realty-Income-Corp-O-Performance-Metrics-CopyRevenue-Growth-5-2-Industry-6-0-YELLOW-What-1742797918718.txt
  Pasted-Realty-Income-Corp-O-Performance-Metrics-Revenue-Growth-5-2-Industry-6-0-YELLOW-What-T-1742802147274.txt
  Pasted-Realty-Income-Corp-O-Performance-Metrics-Revenue-Growth-5-2-Industry-6-0-YELLOW-What-T-1742802189369.txt
  Pasted-Simon-Property-Group-SPG-Performance-Metrics-Revenue-Growth-4-8-Industry-6-0-YELLOW-Wha-1742802094857.txt
  Pasted-ssue-with-Score-Calculation-Logic-The-current-calculation-method-is-inconsistent-with-how-financial-1742942297194.txt
  Pasted-The-comparative-analysis-section-will-provide-users-with-visual-tools-to-compare-the-current-stock-w-1743108952585.txt
  Pasted-The-comparative-analysis-section-will-provide-users-with-visual-tools-to-compare-the-current-stock-w-1743108960550.txt
  Pasted-The-comparative-analysis-section-will-provide-users-with-visual-tools-to-compare-the-current-stock-w-1743109326027.txt
client/
  src/
    app/
      learn/
        board-room/
          page.tsx
        page.tsx
    components/
      comparative-analysis/
        index.tsx
        industry-position.tsx
        metric-ranking-popup.tsx
        vertical-comparison-new.tsx
        vertical-comparison.tsx
      ui/
        accordion.tsx
        alert-dialog.tsx
        alert.tsx
        aspect-ratio.tsx
        avatar.tsx
        badge.tsx
        breadcrumb.tsx
        button.tsx
        calendar.tsx
        card.tsx
        carousel.tsx
        chart.tsx
        checkbox.tsx
        choice-button.tsx
        collapsible.tsx
        command.tsx
        context-menu.tsx
        dialog.tsx
        drawer.tsx
        dropdown-menu.tsx
        form.tsx
        game-elements.tsx
        hover-card.tsx
        input-otp.tsx
        input.tsx
        label.tsx
        menubar.tsx
        metric-popup-fixed.tsx
        navigation-menu.tsx
        pagination.tsx
        popover.tsx
        portfolio-impact-calculator.tsx
        progress-ring.tsx
        progress.tsx
        purchase-success-modal.tsx
        radio-group.tsx
        resizable.tsx
        scroll-area.tsx
        select.tsx
        separator.tsx
        sheet.tsx
        sidebar.tsx
        skeleton.tsx
        slider.tsx
        stack-card.tsx
        stock-card.tsx
        switch.tsx
        table.tsx
        tabs.tsx
        textarea.tsx
        toast.tsx
        toaster.tsx
        toggle-group.tsx
        toggle.tsx
        tooltip.tsx
        topic-bubble.tsx
      app-header.tsx
      app-navigation.tsx
      board-room-game.tsx
      category-chips.tsx
      competition-tracker.tsx
      current-lesson.tsx
      daily-goal.tsx
      hero-section.tsx
      investment-panel.tsx
      lesson-card.tsx
      modern-user-welcome.tsx
      overall-analysis-card.tsx
      portfolio-dashboard.tsx
      price-forecast.tsx
      progress-header.tsx
      qr-code-modal.tsx
      quiz-card.tsx
      search-bar.tsx
      section-header.tsx
      stack-complete-card.tsx
      stack-completed-modal.tsx
      stacks-explorer.tsx
      time-attack-game.tsx
      user-welcome.tsx
    constants/
      board-room-data.tsx
      ceo-decisions.tsx
      game-data.tsx
    contexts/
      portfolio-context.tsx
      user-progress-context.tsx
    hooks/
      use-auth.tsx
      use-game-state.ts
      use-mobile.tsx
      use-stock-data.tsx
      use-toast.ts
    lib/
      advanced-metric-scoring.ts
      industry-data.ts
      market-averages.ts
      protected-route.tsx
      queryClient.ts
      stock-analysis-data.ts
      stock-data.ts
      utils.ts
    pages/
      learn/
        investor-simulator.txt
      auth-page.tsx
      home-page.tsx
      investor-simulator.tsx
      learn.tsx
      lesson-page.tsx
      market-adventure.tsx
      not-found.tsx
      onboarding-page.tsx
      portfolio-page.tsx
      stock-detail-page.tsx
      time-attack.tsx
    types/
      game.ts
    App.tsx
    index.css
    main.tsx
  index.html
server/
  api/
    realtime-stocks.ts
  services/
    alpha-vantage.ts
  auth.ts
  db.ts
  index.ts
  routes.ts
  storage.ts
  vite.ts
shared/
  schema.ts
.gitattributes
.gitignore
.replit
app.json
category-scoring.ts
drizzle.config.ts
fixed-real-estate.txt
LICENSE
new-real-estate.txt
new-section.txt
old-real-estate.txt
package.json
postcss.config.js
README.md
real-estate-section.txt
real-estate-stocks.txt
tailwind.config.ts
temp.txt
theme.json
tsconfig.json
vite.config.ts

================================================================
Files
================================================================

================
File: attached_assets/Company info - Real Estate.csv
================
Name,Industry,Price,P/E,P/B,Dividend,Rev Growth,Profit Margin,Return on Capital,3-Month Return,Relative Performance vs Index,Relative Strength Index,Volatility,Beta,Dividend Consistency,Performance,Value,Momentum,Stability
Prologis (PLD),Real Estate,110.26,28,1.9,3.70%,2.20%,45.40%,4.30%,0.061,-2%,37.4,2.50%,1.24,Medium,Average,Average,Average,Poor
Realty Income Corp (O),Real Estate,56.28,57.6,1.29,5.70%,29.50%,16.00%,1.30%,0.066,-1.50%,49.3,2.00%,0.82,Good,Average,Average,Average,Average
Simon Property Group (SPG),Real Estate,166.12,22,18.68,5.10%,5.40%,41.90%,9.97%,-3.10%,-11%,41.9,2.60%,1.49,Poor,Good,Average,Poor,Poor
AvalonBay Communities (AVB),Real Estate,214.36,28.2,2.55,3.30%,4.90%,36.50%,5.60%,-2.40%,-10%,47.8,2.00%,0.89,Good,Good,Average,Poor,Average
Public Storage (PSA),Real Estate,294.93,27.7,9.65,4.20%,3.90%,39.90%,10.20%,-1.70%,-9.70%,43.5,2.60%,0.8,Good,Good,Poor,Poor,Average
Digital Realty Trust (DLR),Real Estate,155.49,95.6,2.54,3.20%,1.40%,10.10%,1.43%,-12.10%,-20%,50.1,3.10%,0.92,Good,Poor,Poor,Poor,Poor
American Tower Corp (AMT),Real Estate,212.8,44.2,29.41,3.20%,-3.00%,20.90%,5.24%,0.151,0.071,61.1,2.60%,0.89,Good,Average,Poor,Good,Average
Welltower Inc (WELL),Real Estate,149.84,182.2,2.98,1.90%,20.40%,6.30%,1.06%,0.193,0.113,54.7,2.20%,0.94,Poor,Poor,Poor,Good,Average
Boston Properties (BXP),Real Estate,69.48,785,2.03,5.70%,4.10%,0.40%,0.06%,-6.40%,-14.40%,52.5,3.00%,1.08,Poor,Poor,Average,Poor,Average
Equity Residential (EQR),Real Estate,71.36,26.8,2.46,3.90%,3.80%,34.90%,5.59%,0.017,-6.30%,52.8,2.30%,0.88,Medium,Good,Average,Poor,Average
,,,,,,,,,,,,,,,,,,
,,,Average,Good,Average,Poor,Good,Average,Good,Average,Poor,Average,Poor,,,,,
,,,Poor,Good,Good,Good,Average,Poor,Good,Average,Average,Average,Average,,,,,
,,,Good,Poor,Good,Average,Good,Good,Average,Poor,Average,Average,Poor,,,,,
,,,Average,Average,Average,Average,Good,Good,Average,Poor,Average,Average,Average,,,,,
,,,Average,Poor,Average,Average,Good,Good,Average,Poor,Average,Average,Average,,,,,
,,,Poor,Average,Average,Poor,Average,Poor,Poor,Poor,Average,Poor,Average,,,,,
,,,Average,Poor,Average,Poor,Average,Good,Good,Good,Good,Average,Average,,,,,
,,,Poor,Average,Poor,Good,Poor,Poor,Good,Good,Average,Average,Average,,,,,
,,,Poor,Average,Good,Average,Poor,Poor,Poor,Poor,Average,Average,Average,,,,,
,,,Average,Average,Average,Average,Good,Good,Average,Poor,Average,Average,Average,,,,,
,,,,,,,,,,,,,,,,,,
,Name,Industry,P/E (x),P/B (x),Dividend Yield,Revenue Growth,Profit Margin,Return on Capital,3-Month Return,Relative Perf vs Index,RSI,Volatility,Beta,Dividend Consistency,,,,
,Industry Averages,Real Estate,36,2.5,4%,5%,25%,4.50%,0.02,-5%,49,2.50%,1,Mixed,,,,

================
File: attached_assets/Pasted--Hardcoded-stock-data-for-Property-Players-and-Med-Tech-Innovators-Using-real-companies-with-r-1742796477751.txt
================
// Hardcoded stock data for Property Players and Med-Tech Innovators
// Using real companies with realistic metrics

// Property Players (Real Estate) - 10 real companies
const propertyPlayers = [
  {
    name: "Prologis Inc.",
    ticker: "PLD",
    price: 127.85,
    change: 0.65,
    description: "Global leader in logistics real estate with a focus on high-barrier, high-growth markets.",
    metrics: {
      performance: { 
        value: "Good", 
        color: "green",
        details: {
          revenueGrowth: 8.5,
          profitMargin: 39.7,
          returnOnCapital: 10.2
        }
      },
      stability: { 
        value: "High", 
        color: "green",
        details: {
          volatility: 0.75,
          beta: 0.85,
          dividendConsistency: "High"
        }
      },
      value: { 
        value: "Fair", 
        color: "yellow",
        details: {
          peRatio: 17.8,
          pbRatio: 2.0,
          dividendYield: 3.2
        }
      },
      momentum: { 
        value: "Fair", 
        color: "yellow",
        details: {
          threeMonthReturn: 2.8,
          relativePerformance: 0.3,
          rsi: 52
        }
      }
    },
    synopsis: {
      price: "Showing resilience at current price points despite sector-wide pressures",
      company: "Prologis expands portfolio with strategic acquisitions in high-growth logistics markets",
      role: "Core real estate holding with solid dividend and e-commerce driven growth tailwinds"
    },
    industry: "Real Estate",
    smartScore: "High",
    industryAverages: {
      revenueGrowth: 6,
      profitMargin: 35,
      returnOnCapital: 9,
      volatility: 0.8,
      beta: 0.8,
      dividendConsistency: "High",
      peRatio: 16.0,
      pbRatio: 1.8,
      dividendYield: 3.0,
      threeMonthReturn: 2.5,
      relativePerformance: 0.5,
      rsi: 52
    }
  },
  {
    name: "American Tower Corp.",
    ticker: "AMT",
    price: 186.45,
    change: -0.32,
    description: "Leading owner and operator of wireless and broadcast communications infrastructure globally.",
    metrics: {
      performance: { 
        value: "Good", 
        color: "green",
        details: {
          revenueGrowth: 7.2,
          profitMargin: 40.3,
          returnOnCapital: 10.8
        }
      },
      stability: { 
        value: "High", 
        color: "green",
        details: {
          volatility: 0.72,
          beta: 0.75,
          dividendConsistency: "High"
        }
      },
      value: { 
        value: "Fair", 
        color: "yellow",
        details: {
          peRatio: 18.2,
          pbRatio: 2.1,
          dividendYield: 3.4
        }
      },
      momentum: { 
        value: "Fair", 
        color: "yellow",
        details: {
          threeMonthReturn: 1.8,
          relativePerformance: -0.2,
          rsi: 49
        }
      }
    },
    synopsis: {
      price: "Experiencing mild pressure from profit-taking after recent outperformance",
      company: "American Tower's acquisition of data center assets enhances digital infrastructure positioning",
      role: "Anchor position for portfolio stability with 5G and data growth as long-term catalysts"
    },
    industry: "Real Estate",
    smartScore: "High",
    industryAverages: {
      revenueGrowth: 6,
      profitMargin: 35,
      returnOnCapital: 9,
      volatility: 0.8,
      beta: 0.8,
      dividendConsistency: "High",
      peRatio: 16.0,
      pbRatio: 1.8,
      dividendYield: 3.0,
      threeMonthReturn: 2.5,
      relativePerformance: 0.5,
      rsi: 52
    }
  },
  {
    name: "Simon Property Group",
    ticker: "SPG",
    price: 148.65,
    change: 1.25,
    description: "Largest shopping mall and retail REIT with premium properties across North America, Europe and Asia.",
    metrics: {
      performance: { 
        value: "Fair", 
        color: "yellow",
        details: {
          revenueGrowth: 4.8,
          profitMargin: 32.6,
          returnOnCapital: 8.2
        }
      },
      stability: { 
        value: "Fair", 
        color: "yellow",
        details: {
          volatility: 0.95,
          beta: 0.9,
          dividendConsistency: "Medium"
        }
      },
      value: { 
        value: "Good", 
        color: "green",
        details: {
          peRatio: 13.2,
          pbRatio: 1.4,
          dividendYield: 5.2
        }
      },
      momentum: { 
        value: "Fair", 
        color: "yellow",
        details: {
          threeMonthReturn: 3.5,
          relativePerformance: 1.0,
          rsi: 54
        }
      }
    },
    synopsis: {
      price: "Gradually climbing on improved forward guidance and analyst revisions",
      company: "Simon Property Group's premium mall traffic exceeds pre-pandemic levels in key markets",
      role: "Value opportunity in retail real estate with attractive dividend yield and recovery potential"
    },
    industry: "Real Estate",
    smartScore: "Above Average",
    industryAverages: {
      revenueGrowth: 6,
      profitMargin: 35,
      returnOnCapital: 9,
      volatility: 0.8,
      beta: 0.8,
      dividendConsistency: "High",
      peRatio: 16.0,
      pbRatio: 1.8,
      dividendYield: 3.0,
      threeMonthReturn: 2.5,
      relativePerformance: 0.5,
      rsi: 52
    }
  },
  {
    name: "Equinix Inc.",
    ticker: "EQIX",
    price: 764.32,
    change: 2.45,
    description: "Global leader in data center colocation, interconnection services, and cloud exchange solutions.",
    metrics: {
      performance: { 
        value: "Strong", 
        color: "green",
        details: {
          revenueGrowth: 10.2,
          profitMargin: 38.5,
          returnOnCapital: 11.5
        }
      },
      stability: { 
        value: "High", 
        color: "green",
        details: {
          volatility: 0.7,
          beta: 0.78,
          dividendConsistency: "High"
        }
      },
      value: { 
        value: "Fair", 
        color: "yellow",
        details: {
          peRatio: 19.8,
          pbRatio: 2.2,
          dividendYield: 2.3
        }
      },
      momentum: { 
        value: "Strong", 
        color: "green",
        details: {
          threeMonthReturn: 5.8,
          relativePerformance: 3.3,
          rsi: 58
        }
      }
    },
    synopsis: {
      price: "Showing steady appreciation amid positive market sentiment and sector rotation",
      company: "Equinix's expansion into emerging markets shows promising early results",
      role: "Growth-oriented REIT with digital infrastructure focus and AI data center tailwinds"
    },
    industry: "Real Estate",
    smartScore: "High",
    industryAverages: {
      revenueGrowth: 6,
      profitMargin: 35,
      returnOnCapital: 9,
      volatility: 0.8,
      beta: 0.8,
      dividendConsistency: "High",
      peRatio: 16.0,
      pbRatio: 1.8,
      dividendYield: 3.0,
      threeMonthReturn: 2.5,
      relativePerformance: 0.5,
      rsi: 52
    }
  },
  {
    name: "Public Storage",
    ticker: "PSA",
    price: 289.75,
    change: 0.85,
    description: "Leading self-storage REIT with extensive facilities across the United States.",
    metrics: {
      performance: { 
        value: "Good", 
        color: "green",
        details: {
          revenueGrowth: 6.8,
          profitMargin: 41.2,
          returnOnCapital: 9.8
        }
      },
      stability: { 
        value: "High", 
        color: "green",
        details: {
          volatility: 0.68,
          beta: 0.72,
          dividendConsistency: "High"
        }
      },
      value: { 
        value: "Fair", 
        color: "yellow",
        details: {
          peRatio: 16.8,
          pbRatio: 1.9,
          dividendYield: 4.2
        }
      },
      momentum: { 
        value: "Fair", 
        color: "yellow",
        details: {
          threeMonthReturn: 3.2,
          relativePerformance: 0.7,
          rsi: 53
        }
      }
    },
    synopsis: {
      price: "Gradually climbing on improved forward guidance and analyst revisions",
      company: "Public Storage's occupancy rates exceeding expectations with pricing power intact",
      role: "Defensive REIT with steady cash flows and consistent dividend growth history"
    },
    industry: "Real Estate",
    smartScore: "Above Average",
    industryAverages: {
      revenueGrowth: 6,
      profitMargin: 35,
      returnOnCapital: 9,
      volatility: 0.8,
      beta: 0.8,
      dividendConsistency: "High",
      peRatio: 16.0,
      pbRatio: 1.8,
      dividendYield: 3.0,
      threeMonthReturn: 2.5,
      relativePerformance: 0.5,
      rsi: 52
    }
  },
  {
    name: "Realty Income Corp.",
    ticker: "O",
    price: 57.85,
    change: 0.35,
    description: "Triple-net lease REIT focused on commercial properties with monthly dividend payments.",
    metrics: {
      performance: { 
        value: "Fair", 
        color: "yellow",
        details: {
          revenueGrowth: 5.2,
          profitMargin: 30.5,
          returnOnCapital: 7.8
        }
      },
      stability: { 
        value: "High", 
        color: "green",
        details: {
          volatility: 0.65,
          beta: 0.7,
          dividendConsistency: "High"
        }
      },
      value: { 
        value: "Good", 
        color: "green",
        details: {
          peRatio: 14.2,
          pbRatio: 1.5,
          dividendYield: 5.8
        }
      },
      momentum: { 
        value: "Fair", 
        color: "yellow",
        details: {
          threeMonthReturn: 2.2,
          relativePerformance: -0.3,
          rsi: 51
        }
      }
    },
    synopsis: {
      price: "Trading near equilibrium despite broader market volatility",
      company: "Realty Income's acquisition of Spirit Realty enhances diversification and scale",
      role: "Income-generating position with monthly dividends and defensive characteristics"
    },
    industry: "Real Estate",
    smartScore: "Above Average",
    industryAverages: {
      revenueGrowth: 6,
      profitMargin: 35,
      returnOnCapital: 9,
      volatility: 0.8,
      beta: 0.8,
      dividendConsistency: "High",
      peRatio: 16.0,
      pbRatio: 1.8,
      dividendYield: 3.0,
      threeMonthReturn: 2.5,
      relativePerformance: 0.5,
      rsi: 52
    }
  },
  {
    name: "Digital Realty Trust",
    ticker: "DLR",
    price: 143.78,
    change: 1.65,
    description: "Global provider of data center, colocation and interconnection solutions.",
    metrics: {
      performance: { 
        value: "Good", 
        color: "green",
        details: {
          revenueGrowth: 8.8,
          profitMargin: 36.2,
          returnOnCapital: 9.2
        }
      },
      stability: { 
        value: "High", 
        color: "green",
        details: {
          volatility: 0.78,
          beta: 0.75,
          dividendConsistency: "High"
        }
      },
      value: { 
        value: "Fair", 
        color: "yellow",
        details: {
          peRatio: 17.2,
          pbRatio: 1.9,
          dividendYield: 3.5
        }
      },
      momentum: { 
        value: "Strong", 
        color: "green",
        details: {
          threeMonthReturn: 6.2,
          relativePerformance: 3.7,
          rsi: 61
        }
      }
    },
    synopsis: {
      price: "Moving upward as new product adoption exceeds initial expectations",
      company: "Digital Realty's AI-ready data center capacity seeing accelerated demand",
      role: "Growth-oriented REIT with digital infrastructure focus and attractive dividend yield"
    },
    industry: "Real Estate",
    smartScore: "High",
    industryAverages: {
      revenueGrowth: 6,
      profitMargin: 35,
      returnOnCapital: 9,
      volatility: 0.8,
      beta: 0.8,
      dividendConsistency: "High",
      peRatio: 16.0,
      pbRatio: 1.8,
      dividendYield: 3.0,
      threeMonthReturn: 2.5,
      relativePerformance: 0.5,
      rsi: 52
    }
  },
  {
    name: "Welltower Inc.",
    ticker: "WELL",
    price: 92.45,
    change: 0.25,
    description: "Healthcare REIT specializing in senior housing, assisted living facilities, and medical office buildings.",
    metrics: {
      performance: { 
        value: "Good", 
        color: "green",
        details: {
          revenueGrowth: 7.5,
          profitMargin: 32.8,
          returnOnCapital: 8.5
        }
      },
      stability: { 
        value: "High", 
        color: "green",
        details: {
          volatility: 0.7,
          beta: 0.75,
          dividendConsistency: "High"
        }
      },
      value: { 
        value: "Fair", 
        color: "yellow",
        details: {
          peRatio: 16.5,
          pbRatio: 1.8,
          dividendYield: 3.1
        }
      },
      momentum: { 
        value: "Good", 
        color: "green",
        details: {
          threeMonthReturn: 5.2,
          relativePerformance: 2.7,
          rsi: 57
        }
      }
    },
    synopsis: {
      price: "Showing steady appreciation amid positive market sentiment and sector rotation",
      company: "Welltower's senior housing segment benefiting from aging demographic tailwinds",
      role: "Defensive healthcare REIT with demographic-driven growth and income characteristics"
    },
    industry: "Real Estate",
    smartScore: "High",
    industryAverages: {
      revenueGrowth: 6,
      profitMargin: 35,
      returnOnCapital: 9,
      volatility: 0.8,
      beta: 0.8,
      dividendConsistency: "High",
      peRatio: 16.0,
      pbRatio: 1.8,
      dividendYield: 3.0,
      threeMonthReturn: 2.5,
      relativePerformance: 0.5,
      rsi: 52
    }
  },
  {
    name: "AvalonBay Communities",
    ticker: "AVB",
    price: 193.25,
    change: -0.45,
    description: "Leading REIT focused on developing, redeveloping, and managing high-quality apartment communities.",
    metrics: {
      performance: { 
        value: "Fair", 
        color: "yellow",
        details: {
          revenueGrowth: 5.8,
          profitMargin: 33.5,
          returnOnCapital: 8.8
        }
      },
      stability: { 
        value: "High", 
        color: "green",
        details: {
          volatility: 0.75,
          beta: 0.8,
          dividendConsistency: "High"
        }
      },
      value: { 
        value: "Good", 
        color: "green",
        details: {
          peRatio: 15.6,
          pbRatio: 1.7,
          dividendYield: 3.4
        }
      },
      momentum: { 
        value: "Fair", 
        color: "yellow",
        details: {
          threeMonthReturn: 2.5,
          relativePerformance: 0.0,
          rsi: 50
        }
      }
    },
    synopsis: {
      price: "Trading near equilibrium despite broader market volatility",
      company: "AvalonBay's shift to mixed-use developments attracting premium tenants",
      role: "Core residential REIT holding with focus on high-barrier-to-entry markets"
    },
    industry: "Real Estate",
    smartScore: "Above Average",
    industryAverages: {
      revenueGrowth: 6,
      profitMargin: 35,
      returnOnCapital: 9,
      volatility: 0.8,
      beta: 0.8,
      dividendConsistency: "High",
      peRatio: 16.0,
      pbRatio: 1.8,
      dividendYield: 3.0,
      threeMonthReturn: 2.5,
      relativePerformance: 0.5,
      rsi: 52
    }
  },
  {
    name: "Crown Castle Inc.",
    ticker: "CCI",
    price: 108.95,
    change: -0.85,
    description: "Provider of shared communications infrastructure with extensive network of cell towers and small cells.",
    metrics: {
      performance: { 
        value: "Fair", 
        color: "yellow",
        details: {
          revenueGrowth: 4.5,
          profitMargin: 34.2,
          returnOnCapital: 8.5
        }
      },
      stability: { 
        value: "High", 
        color: "green",
        details: {
          volatility: 0.8,
          beta: 0.82,
          dividendConsistency: "High"
        }
      },
      value: { 
        value: "Fair", 
        color: "yellow",
        details: {
          peRatio: 15.8,
          pbRatio: 1.7,
          dividendYield: 4.8
        }
      },
      momentum: { 
        value: "Weak", 
        color: "red",
        details: {
          threeMonthReturn: -2.5,
          relativePerformance: -5.0,
          rsi: 42
        }
      }
    },
    synopsis: {
      price: "Facing significant selling pressure after disappointing quarterly results",
      company: "Crown Castle's strategic restructuring to improve operational efficiency",
      role: "Telecommunications infrastructure REIT with attractive yield and 5G growth potential"
    },
    industry: "Real Estate",
    smartScore: "Average",
    industryAverages: {
      revenueGrowth: 6,
      profitMargin: 35,
      returnOnCapital: 9,
      volatility: 0.8,
      beta: 0.8,
      dividendConsistency: "High",
      peRatio: 16.0,
      pbRatio: 1.8,
      dividendYield: 3.0,
      threeMonthReturn: 2.5,
      relativePerformance: 0.5,
      rsi: 52
    }
  }
],

// Med-Tech Innovators (Healthcare/Medical Technology) - 10 real companies
medTechInnovators = [
  {
    name: "Intuitive Surgical",
    ticker: "ISRG",
    price: 387.62,
    change: 2.35,
    description: "Pioneer in robotic-assisted, minimally invasive surgery with the da Vinci surgical system.",
    metrics: {
      performance: { 
        value: "Strong", 
        color: "green",
        details: {
          revenueGrowth: 18.5,
          profitMargin: 31.2,
          returnOnCapital: 17.8
        }
      },
      stability: { 
        value: "Fair", 
        color: "yellow",
        details: {
          volatility: 1.1,
          beta: 1.05,
          dividendConsistency: "N/A"
        }
      },
      value: { 
        value: "Poor", 
        color: "red",
        details: {
          peRatio: 32.5,
          pbRatio: 4.8,
          dividendYield: 0
        }
      },
      momentum: { 
        value: "Strong", 
        color: "green",
        details: {
          threeMonthReturn: 7.8,
          relativePerformance: 2.8,
          rsi: 62
        }
      }
    },
    synopsis: {
      price: "Making significant gains after multiple analyst upgrades and positive sector catalysts",
      company: "Intuitive Surgical's new robotic platform expands addressable surgical procedures",
      role: "Growth opportunity in robotic surgery with dominant market position and recurring revenue"
    },
    industry: "Healthcare",
    smartScore: "High",
    industryAverages: {
      revenueGrowth: 15,
      profitMargin: 20,
      returnOnCapital: 13,
      volatility: 1.2,
      beta: 1.15,
      dividendConsistency: "Low",
      peRatio: 25.0,
      pbRatio: 4.0,
      dividendYield: 0.6,
      threeMonthReturn: 5.0,
      relativePerformance: 2.0,
      rsi: 58
    }
  },
  {
    name: "Edwards Lifesciences",
    ticker: "EW",
    price: 92.75,
    change: 0.65,
    description: "Global leader in patient-focused innovations for structural heart disease and critical care monitoring.",
    metrics: {
      performance: { 
        value: "Good", 
        color: "green",
        details: {
          revenueGrowth: 11.2,
          profitMargin: 24.5,
          returnOnCapital: 15.3
        }
      },
      stability: { 
        value: "Fair", 
        color: "yellow",
        details: {
          volatility: 1.15,
          beta: 1.1,
          dividendConsistency: "N/A"
        }
      },
      value: { 
        value: "Fair", 
        color: "yellow",
        details: {
          peRatio: 27.2,
          pbRatio: 4.2,
          dividendYield: 0
        }
      },
      momentum: { 
        value: "Fair", 
        color: "yellow",
        details: {
          threeMonthReturn: 3.5,
          relativePerformance: -1.5,
          rsi: 52
        }
      }
    },
    synopsis: {
      price: "Gradually climbing on improved forward guidance and analyst revisions",
      company: "Edwards' SAPIEN valve platform continues gaining market share in TAVR procedures",
      role: "Growth-oriented medical technology company with focus on structural heart disease"
    },
    industry: "Healthcare",
    smartScore: "Above Average",
    industryAverages: {
      revenueGrowth: 15,
      profitMargin: 20,
      returnOnCapital: 13,
      volatility: 1.2,
      beta: 1.15,
      dividendConsistency: "Low",
      peRatio: 25.0,
      pbRatio: 4.0,
      dividendYield: 0.6,
      threeMonthReturn: 5.0,
      relativePerformance: 2.0,
      rsi: 58
    }
  },
  {
    name: "Boston Scientific",
    ticker: "BSX",
    price: 73.42,
    change: 1.15,
    description: "Developer, manufacturer and marketer of medical devices used in interventional cardiology and other specialties.",
    metrics: {
      performance: { 
        value: "Strong", 
        color: "green",
        details: {
          revenueGrowth: 14.8,
          profitMargin: 19.2,
          returnOnCapital: 12.8
        }
      },
      stability: { 
        value: "Fair", 
        color: "yellow",
        details: {
          volatility: 1.05,
          beta: 1.0,
          dividendConsistency: "N/A"
        }
      },
      value: { 
        value: "Fair", 
        color: "yellow",
        details: {
          peRatio: 28.5,
          pbRatio: 3.8,
          dividendYield: 0
        }
      },
      momentum: { 
        value: "Strong", 
        color: "green",
        details: {
          threeMonthReturn: 8.5,
          relativePerformance: 3.5,
          rsi: 63
        }
      }
    },
    synopsis: {
      price: "Breaking out to new highs with institutional accumulation and heightened options activity",
      company: "Boston Scientific's electrophysiology portfolio seeing stronger-than-expected adoption",
      role: "Growth opportunity in minimally invasive medical technologies with diverse product portfolio"
    },
    industry: "Healthcare",
    smartScore: "High",
    industryAverages: {
      revenueGrowth: 15,
      profitMargin: 20,
      returnOnCapital: 13,
      volatility: 1.2,
      beta: 1.15,
      dividendConsistency: "Low",
      peRatio: 25.0,
      pbRatio: 4.0,
      dividendYield: 0.6,
      threeMonthReturn: 5.0,
      relativePerformance: 2.0,
      rsi: 58
    }
  },
  {
    name: "Dexcom Inc.",
    ticker: "DXCM",
    price: 78.35,
    change: -0.45,
    description: "Leading manufacturer of continuous glucose monitoring systems for diabetes management.",
    metrics: {
      performance: { 
        value: "Strong", 
        color: "green",
        details: {
          revenueGrowth: 21.5,
          profitMargin: 17.8,
          returnOnCapital: 14.5
        }
      },
      stability: { 
        value: "Unstable", 
        color: "red",
        details: {
          volatility: 1.45,
          beta: 1.4,
          dividendConsistency: "N/A"
        }
      },
      value: { 
        value: "Fair", 
        color: "yellow",
        details: {
          peRatio: 26.5,
          pbRatio: 3.9,
          dividendYield: 0
        }
      },
      momentum: { 
        value: "Fair", 
        color: "yellow",
        details: {
          threeMonthReturn: 2.5,
          relativePerformance: -2.5,
          rsi: 48
        }
      }
    },
    synopsis: {
      price: "Experiencing mild pressure from profit-taking after recent outperformance",
      company: "Dexcom's next-generation CGM system showing strong international adoption trends",
      role: "Growth-focused medical technology with significant diabetes management addressable market"
    },
    industry: "Healthcare",
    smartScore: "Above Average",
    industryAverages: {
      revenueGrowth: 15,
      profitMargin: 20,
      returnOnCapital: 13,
      volatility: 1.2,
      beta: 1.15,
      dividendConsistency: "Low",
      peRatio: 25.0,
      pbRatio: 4.0,
      dividendYield: 0.6,
      threeMonthReturn: 5.0,
      relativePerformance: 2.0,
      rsi: 58
    }
  },
  {
    name: "Medtronic plc",
    ticker: "MDT",
    price: 84.95,
    change: 0.25,
    description: "Global leader in medical technology, services and solutions across cardiovascular, neuroscience, diabetes and more.",
    metrics: {
      performance: { 
        value: "Fair", 
        color: "yellow",
        details: {
          revenueGrowth: 5.2,
          profitMargin: 22.5,
          returnOnCapital: 11.8
        }
      },
      stability: { 
        value: "High", 
        color: "green",
        details: {
          volatility: 0.9,
          beta: 0.95,
          dividendConsistency: "High"
        }
      },
      value: { 
        value: "Good", 
        color: "green",
        details: {
          peRatio: 18.2,
          pbRatio:

================
File: attached_assets/Pasted--Implement-a-stacked-card-swiping-interface-in-StockDetailPage-where-the-next-card-is-visible-undern-1743194631774.txt
================
Implement a stacked card swiping interface in StockDetailPage where the next card is visible underneath the current card during swipes, and the current card remains full-sized and vertically scrollable.

Files to Modify:

client/src/pages/stock-detail-page.tsx
client/src/components/ui/stock-card.tsx
Steps:

1. Modify client/src/pages/stock-detail-page.tsx:

a.  Import necessary components: Ensure motion and AnimatePresence are imported from framer-motion.
javascript import { motion, AnimatePresence } from "framer-motion";

b.  Update the Main Content Container Div:
* Locate the div that wraps the <StockCard /> component (it currently has className="flex-1 relative").
* Change its className to flex-1 relative overflow-hidden. (This ensures the container defines the boundary and hides any overflow during animations).

c.  Implement Card Stacking Logic:
* Replace the single <StockCard ... /> rendering inside the main content div with the following structure using <AnimatePresence> and two <motion.div> wrappers:

       ```tsx
       {/* Main content - Card Stacking Area */}
       <div className="flex-1 relative overflow-hidden"> {/* Ensure this class */}

         <AnimatePresence initial={false}>
           {/* Render Next Card (if exists) - Positioned behind */}
           {currentStockIndex + 1 < stocks.length && (
             <motion.div
               key={`stackcard-${currentStockIndex + 1}`} // Unique key based on index
               className="absolute inset-0 p-4" // Fills container, adds padding FOR the card
               style={{ zIndex: 1 }}
               initial={{ scale: 0.95, y: 15, opacity: 0.9 }}
               animate={{ scale: 0.95, y: 15, opacity: 0.9 }} // Stays scaled down/offset
               exit={{ scale: 0.9, y: 30, opacity: 0 }}
               transition={{ type: "spring", stiffness: 500, damping: 50 }}
             >
               {/* This inner div prevents interaction with the card behind */}
               <div style={{ pointerEvents: 'none', height: '100%', width: '100%' }}>
                 <StockCard
                   stock={stocks[currentStockIndex + 1]}
                   onNext={() => {}}
                   onPrevious={() => {}}
                   currentIndex={currentStockIndex + 1}
                   totalCount={stocks.length}
                   displayMode={useRealTimeData ? 'realtime' : 'simple'}
                   // NO nextStock prop here
                 />
               </div>
             </motion.div>
           )}

           {/* Render Current Card - Positioned on top */}
           {currentStock && (
              <motion.div
                key={`stackcard-${currentStockIndex}`} // Unique key based on index
                className="absolute inset-0 p-4" // Fills container, adds padding FOR the card
                style={{ zIndex: 2 }}
                initial={{ scale: 1, y: 0, opacity: 1 }} // Enters at full size
                animate={{ scale: 1, y: 0, opacity: 1 }} // Stays at full size
                // Dragging/Exit is handled within StockCard component itself
              >
               {/* StockCard component manages its own drag */}
               <StockCard
                 stock={currentStock}
                 onNext={handleNextStock}
                 onPrevious={handlePreviousStock}
                 currentIndex={currentStockIndex}
                 totalCount={stocks.length}
                 displayMode={useRealTimeData ? 'realtime' : 'simple'}
                  // NO nextStock prop here
               />
              </motion.div>
           )}
         </AnimatePresence>
       </div> {/* End of main content div */}
       ```
d.  Update Buy/Skip Button Logic: Ensure the onClick handler for the "Buy" button correctly targets the current card's hidden buy button using the index-based key:
javascript onClick={() => { // Trigger the hidden buy button inside the CURRENT StockCard const currentCardMotionDiv = document.querySelector<HTMLElement>(`[key='stackcard-${currentStockIndex}']`); // Use key const buyButton = currentCardMotionDiv?.querySelector<HTMLButtonElement>('[data-testid="buy-button"]'); buyButton?.click(); }}

2. Modify client/src/components/ui/stock-card.tsx:

a.  Remove Internal Preview Logic:
* Search for and delete the div block responsible for rendering the blurred background or nextStock preview. This block likely starts with <div className="absolute inset-0 overflow-hidden blur-xl..." or similar, and was present in the original code you provided.
b.  Ensure Draggable Container Styles:
* Verify the outermost motion.div (the one that has the drag="x" prop) has the following classes: h-full overflow-y-auto overflow-x-hidden pb-16 stock-card. The h-full and overflow-y-auto are critical for allowing the card to be full height within its padded wrapper and scroll internally. Make sure it also has an opaque background (like bg-white or the gradient you were using).
c.  Remove nextStock Prop: Delete the nextStock prop from the StockCardProps interface and from the component's function signature, as it's no longer used.

================
File: attached_assets/Pasted--Instructions-for-Replit-Agent-Improving-Stock-Metrics-Popups-1-Metric-Button-Popup-Imple-1742788538750.txt
================
### Instructions for Replit Agent: Improving Stock Metrics Popups #### 1. Metric Button Popup Implementation When a user clicks on any of the metric buttons (Performance, Stability, Value, Momentum): - Create a modal overlay that appears centered on screen - Add a semi-transparent dark background that dims the rest of the app - Include a close button (X) in the top-right corner - Make the popup match the dark theme with neon accent colors seen in the screenshots - Ensure the popup is responsive and works on mobile devices - The title should be the name of the metric with the same color as the metric bubble (green for High/Strong, yellow for Fair, red for Low/Unstable) #### 2. Dynamic Content for Each Stock For each stock card: - Store the rating for each metric (High/Fair/Low or Strong/Fair/Weak or High/Fair/Unstable) - Store specific numerical values for each component of the metric: * Performance: Revenue Growth %, Profit Margin %, Return on Capital % * Stability: Volatility value, Beta value, Dividend Consistency rating * Value: P/E Ratio, P/B Ratio, Dividend Yield % * Momentum: 3-Month Return %, Market Performance Comparison %, RSI The explanation text should change based on the rating: - For "High" or "Strong" ratings: Use positive language about exceptional performance - For "Fair" ratings: Use balanced language about average performance - For "Low" or "Unstable" ratings: Use cautious language about underperformance #### 3. Content Structure Within Popup Each popup should have three sections: 1. **How It's Calculated** - Explain which specific metrics are used (matching those from the composite model document) - Show the actual values for this specific stock - Example: "Based on revenue growth of 15%, profit margins of 22%, and return on invested capital of 18% over the past 3 years compared to industry averages." 2. **Industry Comparison** - Compare the stock's metrics to industry averages - For each industry/stack, establish baseline averages: * Tech Titans: Higher growth expectations (15% revenue growth avg, etc.) * Dividend Kings: Higher yield expectations (3.5% dividend yield avg, etc.) * Green Giants: Different margin profiles - Example: "This company's performance metrics rank in the top quartile of its industry peers, showing exceptional operational execution." 3. **What It Means** - Provide practical interpretation for novice investors - Explain implications for their portfolio - Example: "Strong performance indicates the company is effectively growing revenue while maintaining healthy margins and efficient capital use." #### 4. Metric Value Distribution Rules Create consistent relationships between ratings and numerical values: **Performance Metrics:** - High: Revenue Growth >10%, Profit Margin >20%, Return on Capital >15% - Fair: Revenue Growth 3-10%, Profit Margin 10-20%, Return on Capital 8-15% - Low: Revenue Growth <3%, Profit Margin <10%, Return on Capital <8% **Stability Metrics:** - High: Volatility <0.8, Beta 0.7-1.1, Dividend Consistency "High" - Fair: Volatility 0.8-1.2, Beta 0.5-1.3, Dividend Consistency "Medium" - Unstable: Volatility >1.2, Beta <0.5 or >1.3, Dividend Consistency "Low" or "N/A" **Value Metrics:** - High: P/E Ratio <15, P/B Ratio <2.5, Dividend Yield >2% - Fair: P/E Ratio 15-25, P/B Ratio 2.5-4, Dividend Yield 0.5-2% - Low: P/E Ratio >25, P/B Ratio >4, Dividend Yield <0.5% or "N/A" **Momentum Metrics:** - Strong: 3-Month Return >5%, Relative Performance >3%, RSI 55-70 - Fair: 3-Month Return -2% to 5%, Relative Performance -2% to 3%, RSI 45-55 or 70-75 - Weak: 3-Month Return <-2%, Relative Performance <-2%, RSI <45 or >75 #### 5. Industry Average Specifications For each industry/stack, define different baseline averages: **Tech Titans:** - Revenue Growth: 12% industry avg - P/E Ratio: 22 industry avg - Beta: 1.1 industry avg **Green Giants:** - Revenue Growth: 8% industry avg - P/E Ratio: 18 industry avg - Beta: 0.9 industry avg **Dividend Kings:** - Dividend Yield: 3.2% industry avg - Revenue Growth: 4% industry avg - Beta: 0.8 industry avg **Consumer Giants:** - Revenue Growth: 5% industry avg - P/E Ratio: 20 industry avg - Beta: 0.85 industry avg #### 6. Chart Visualization Improvements For chart generation: - Ensure the Y-axis range is appropriate for the price (don't show $110+ for a $61 stock) - Set Y-axis minimum to approximately 10-15% below the lowest point on the chart - Set Y-axis maximum to approximately 10-15% above the highest point on the chart - For different time periods, use appropriate X-axis labels: * 1D: Show hours (6:00, 10:00, 14:00, etc.) * 5D: Show days of week (Mon, Tue, Wed, etc.) * 1M: Show dates within the month (1/5, 1/10, 1/15, etc.) * 6M: Show months (Jan, Feb, Mar, etc.) * 1Y: Show quarters or months (Q1, Q2, Q3, etc. or Jan, Apr, Jul, Oct) * 5Y: Show years (2020, 2021, 2022, etc.) - Current price should always be the rightmost point on the chart - Chart pattern should generally align with the momentum rating: * Strong momentum: Upward trending chart * Fair momentum: Relatively flat or slightly upward * Weak momentum: Downward trending chart #### 7. Additional UI Guidelines - Add subtle animations when the popup appears (fade in, slight scale up) - Include icons for each section (+ for How It's Calculated, ↑ for Industry Comparison, ○ for What It Means) - Add a small footer note: "These metrics are based on both historical data and forward-looking indicators. They should be used as one of many tools in your investment decision-making." - Add hover effects to the buttons to improve user feedback - Make sure text is readable with sufficient contrast against the background This approach ensures consistent, educational, and visually appealing metric explanations that vary appropriately between different stocks while maintaining logical connections between the ratings and the underlying numerical values.

================
File: attached_assets/Pasted--Metrics-for-Color-Coding-Comparison-to-Industry-Standards-Revised-Value-Metrics-P-E-R-1742845146981.txt
================
# Metrics for Color Coding Comparison to Industry Standards (Revised)

## Value Metrics
- **P/E Ratio**: LOWER is better
  - Good: < 75% of industry average
  - Mid: 75-125% of industry average
  - Bad: > 125% of industry average

- **P/B Ratio**: LOWER is better
  - Good: < 80% of industry average
  - Mid: 80-120% of industry average
  - Bad: > 120% of industry average

- **Dividend Yield**: HIGHER is better
  - Good: > 125% of industry average
  - Mid: 75-125% of industry average
  - Bad: < 75% of industry average

## Growth (Performance) Metrics
- **Revenue Growth Rate**: HIGHER is better
  - Good: > 120% of industry average
  - Mid: 80-120% of industry average
  - Bad: < 80% of industry average

- **Profit Margin**: HIGHER is better
  - Good: > 125% of industry average
  - Mid: 75-125% of industry average
  - Bad: < 75% of industry average

- **Return on Capital**: HIGHER is better
  - Good: > 120% of industry average
  - Mid: 80-120% of industry average
  - Bad: < 80% of industry average

## Momentum Metrics
- **3-Month Price Return**: HIGHER is better
  - Good: > 5 percentage points above industry average
  - Mid: Within ±5 percentage points of industry average
  - Bad: > 5 percentage points below industry average

- **Relative Performance vs Index**: HIGHER is better
  - Good: Outperforming index by > 3%
  - Mid: Within ±3% of index performance
  - Bad: Underperforming index by > 3%

- **RSI (Relative Strength Index)**: CLOSER to 50 is better
  - Good: 40-60
  - Mid: 30-40 or 60-70
  - Bad: < 30 or > 70

## Stability Metrics
- **Volatility (σ)**: LOWER is better
  - Good: < 80% of industry average
  - Mid: 80-120% of industry average
  - Bad: > 120% of industry average

- **Beta**: CLOSER to 1 or LOWER is better
  - Good: 0.8-1.2
  - Mid: 0.5-0.8 or 1.2-1.5
  - Bad: < 0.5 or > 1.5

- **Dividend Consistency**: HIGHER is better
  - Good: > 90% (paid dividends consistently)
  - Mid: 70-90% (occasional missed/reduced dividends)
  - Bad: < 70% (frequent missed/reduced dividends)

## Overall Category Rating Method

For each of the four main categories (Value, Growth, Momentum, Stability), here's how to determine the overall color/threshold:

### Method for Overall Category Ratings

1. **Convert each sub-metric to a 0-100 score** based on comparison to industry average
2. **Apply weights to each sub-metric within its category**:

   **Value Category:**
   - P/E Ratio: 50% weight
   - P/B Ratio: 30% weight
   - Dividend Yield: 20% weight
   
   **Growth (Performance) Category:**
   - Revenue Growth: 40% weight
   - Profit Margin: 30% weight
   - Return on Capital: 30% weight
   
   **Momentum Category:**
   - 3-Month Price Return: 50% weight
   - Relative Performance vs Index: 30% weight
   - RSI: 20% weight
   
   **Stability Category:**
   - Volatility: 50% weight
   - Beta: 30% weight
   - Dividend Consistency: 20% weight

3. **Calculate the weighted average for each category**
4. **Assign color/threshold based on the weighted score**:
   - Good (Green): Score ≥ 70
   - Fair (Yellow): Score 40-69
   - Poor (Red): Score < 40

### Examples:

#### Value Category Example:
- P/E Ratio: 80% of industry average → Score: 75 (Mid-range)
- P/B Ratio: 60% of industry average → Score: 90 (Good)
- Dividend Yield: 140% of industry average → Score: 85 (Good)

Weighted calculation:
(75 × 0.5) + (90 × 0.3) + (85 × 0.2) = 37.5 + 27 + 17 = 81.5

Result: Value Category = Good (Green)

#### Growth Category Example:
- Revenue Growth: 90% of industry average → Score: 50 (Mid)
- Profit Margin: 70% of industry average → Score: 35 (Bad)
- Return on Capital: 110% of industry average → Score: 65 (Mid)

Weighted calculation:
(50 × 0.4) + (35 × 0.3) + (65 × 0.3) = 20 + 10.5 + 19.5 = 50

Result: Growth Category = Fair (Yellow)

For the Total Stock Quality Score (SQS), apply equal weights (25%) to each of the four category scores for a final comprehensive rating using the same color thresholds.

================
File: attached_assets/Pasted--name-Stryker-Corporation-ticker-SYK-price-345-68-change-1-85--1742796493455.txt
================
{
    name: "Stryker Corporation",
    ticker: "SYK",
    price: 345.68,
    change: 1.85,
    description: "Leading manufacturer of medical technologies including orthopaedic implants, surgical equipment, and neurotechnology products.",
    metrics: {
      performance: { 
        value: "Strong", 
        color: "green",
        details: {
          revenueGrowth: 13.5,
          profitMargin: 21.2,
          returnOnCapital: 14.8
        }
      },
      stability: { 
        value: "High", 
        color: "green",
        details: {
          volatility: 0.95,
          beta: 1.0,
          dividendConsistency: "High"
        }
      },
      value: { 
        value: "Fair", 
        color: "yellow",
        details: {
          peRatio: 24.2,
          pbRatio: 3.8,
          dividendYield: 0.8
        }
      },
      momentum: { 
        value: "Strong", 
        color: "green",
        details: {
          threeMonthReturn: 7.2,
          relativePerformance: 2.2,
          rsi: 60
        }
      }
    },
    synopsis: {
      price: "Showing steady appreciation amid positive market sentiment and sector rotation",
      company: "Stryker's surgical robotics platform gaining market share in orthopedic procedures",
      role: "Core medical technology holding with balanced growth and stability characteristics"
    },
    industry: "Healthcare",
    smartScore: "High",
    industryAverages: {
      revenueGrowth: 15,
      profitMargin: 20,
      returnOnCapital: 13,
      volatility: 1.2,
      beta: 1.15,
      dividendConsistency: "Low",
      peRatio: 25.0,
      pbRatio: 4.0,
      dividendYield: 0.6,
      threeMonthReturn: 5.0,
      relativePerformance: 2.0,
      rsi: 58
    }
  },
  {
    name: "ResMed Inc.",
    ticker: "RMD",
    price: 194.25,
    change: -0.75,
    description: "Global leader in cloud-connected medical devices for sleep apnea, COPD, and other chronic respiratory conditions.",
    metrics: {
      performance: { 
        value: "Good", 
        color: "green",
        details: {
          revenueGrowth: 12.8,
          profitMargin: 23.5,
          returnOnCapital: 15.5
        }
      },
      stability: { 
        value: "Fair", 
        color: "yellow",
        details: {
          volatility: 1.1,
          beta: 1.05,
          dividendConsistency: "Medium"
        }
      },
      value: { 
        value: "Fair", 
        color: "yellow",
        details: {
          peRatio: 23.5,
          pbRatio: 3.6,
          dividendYield: 0.9
        }
      },
      momentum: { 
        value: "Fair", 
        color: "yellow",
        details: {
          threeMonthReturn: 2.8,
          relativePerformance: -2.2,
          rsi: 49
        }
      }
    },
    synopsis: {
      price: "Experiencing mild pressure from profit-taking after recent outperformance",
      company: "ResMed's connected care platform showing strong subscription revenue growth",
      role: "Growth opportunity in sleep and respiratory care with recurring revenue model"
    },
    industry: "Healthcare",
    smartScore: "Above Average",
    industryAverages: {
      revenueGrowth: 15,
      profitMargin: 20,
      returnOnCapital: 13,
      volatility: 1.2,
      beta: 1.15,
      dividendConsistency: "Low",
      peRatio: 25.0,
      pbRatio: 4.0,
      dividendYield: 0.6,
      threeMonthReturn: 5.0,
      relativePerformance: 2.0,
      rsi: 58
    }
  },
  {
    name: "Align Technology",
    ticker: "ALGN",
    price: 307.85,
    change: 2.45,
    description: "Global medical device company with industry-leading clear aligner and intraoral scanner technologies.",
    metrics: {
      performance: { 
        value: "Strong", 
        color: "green",
        details: {
          revenueGrowth: 17.5,
          profitMargin: 19.8,
          returnOnCapital: 15.2
        }
      },
      stability: { 
        value: "Unstable", 
        color: "red",
        details: {
          volatility: 1.35,
          beta: 1.4,
          dividendConsistency: "N/A"
        }
      },
      value: { 
        value: "Fair", 
        color: "yellow",
        details: {
          peRatio: 28.2,
          pbRatio: 4.2,
          dividendYield: 0
        }
      },
      momentum: { 
        value: "Strong", 
        color: "green",
        details: {
          threeMonthReturn: 9.5,
          relativePerformance: 4.5,
          rsi: 65
        }
      }
    },
    synopsis: {
      price: "Breaking out to new highs with institutional accumulation and heightened options activity",
      company: "Align Technology's international expansion showing stronger-than-expected case growth",
      role: "High-growth opportunity in dental clear aligners with strong brand recognition"
    },
    industry: "Healthcare",
    smartScore: "High",
    industryAverages: {
      revenueGrowth: 15,
      profitMargin: 20,
      returnOnCapital: 13,
      volatility: 1.2,
      beta: 1.15,
      dividendConsistency: "Low",
      peRatio: 25.0,
      pbRatio: 4.0,
      dividendYield: 0.6,
      threeMonthReturn: 5.0,
      relativePerformance: 2.0,
      rsi: 58
    }
  },
  {
    name: "Illumina Inc.",
    ticker: "ILMN",
    price: 124.85,
    change: -1.25,
    description: "Global leader in DNA sequencing and array-based technologies for genetic analysis.",
    metrics: {
      performance: { 
        value: "Fair", 
        color: "yellow",
        details: {
          revenueGrowth: 7.5,
          profitMargin: 16.2,
          returnOnCapital: 10.5
        }
      },
      stability: { 
        value: "Unstable", 
        color: "red",
        details: {
          volatility: 1.45,
          beta: 1.5,
          dividendConsistency: "N/A"
        }
      },
      value: { 
        value: "Fair", 
        color: "yellow",
        details: {
          peRatio: 24.5,
          pbRatio: 3.8,
          dividendYield: 0
        }
      },
      momentum: { 
        value: "Weak", 
        color: "red",
        details: {
          threeMonthReturn: -3.8,
          relativePerformance: -8.8,
          rsi: 41
        }
      }
    },
    synopsis: {
      price: "Facing significant selling pressure after disappointing quarterly results",
      company: "Illumina's new leadership team signals shift in corporate strategy",
      role: "Speculative opportunity in genomics technology with turnaround potential"
    },
    industry: "Healthcare",
    smartScore: "Average",
    industryAverages: {
      revenueGrowth: 15,
      profitMargin: 20,
      returnOnCapital: 13,
      volatility: 1.2,
      beta: 1.15,
      dividendConsistency: "Low",
      peRatio: 25.0,
      pbRatio: 4.0,
      dividendYield: 0.6,
      threeMonthReturn: 5.0,
      relativePerformance: 2.0,
      rsi: 58
    }
  },
  {
    name: "Insulet Corporation",
    ticker: "PODD",
    price: 189.65,
    change: 1.35,
    description: "Medical device company specializing in tubeless insulin pump technology for diabetes management.",
    metrics: {
      performance: { 
        value: "Strong", 
        color: "green",
        details: {
          revenueGrowth: 20.5,
          profitMargin: 18.5,
          returnOnCapital: 13.8
        }
      },
      stability: { 
        value: "Unstable", 
        color: "red",
        details: {
          volatility: 1.4,
          beta: 1.35,
          dividendConsistency: "N/A"
        }
      },
      value: { 
        value: "Poor", 
        color: "red",
        details: {
          peRatio: 32.5,
          pbRatio: 4.8,
          dividendYield: 0
        }
      },
      momentum: { 
        value: "Fair", 
        color: "yellow",
        details: {
          threeMonthReturn: 5.5,
          relativePerformance: 0.5,
          rsi: 55
        }
      }
    },
    synopsis: {
      price: "Moving upward as new product adoption exceeds initial expectations",
      company: "Insulet's automated insulin delivery system gaining significant market share",
      role: "Growth opportunity in diabetes technology with innovative product offerings"
    },
    industry: "Healthcare",
    smartScore: "Above Average",
    industryAverages: {
      revenueGrowth: 15,
      profitMargin: 20,
      returnOnCapital: 13,
      volatility: 1.2,
      beta: 1.15,
      dividendConsistency: "Low",
      peRatio: 25.0,
      pbRatio: 4.0,
      dividendYield: 0.6,
      threeMonthReturn: 5.0,
      relativePerformance: 2.0,
      rsi: 58
    }
  },
  {
    name: "Abiomed Inc.",
    ticker: "ABMD",
    price: 428.35,
    change: 0.85,
    description: "Leading provider of temporary mechanical circulatory support devices for heart failure patients.",
    metrics: {
      performance: { 
        value: "Strong", 
        color: "green",
        details: {
          revenueGrowth: 16.8,
          profitMargin: 25.5,
          returnOnCapital: 14.5
        }
      },
      stability: { 
        value: "Fair", 
        color: "yellow",
        details: {
          volatility: 1.2,
          beta: 1.15,
          dividendConsistency: "N/A"
        }
      },
      value: { 
        value: "Poor", 
        color: "red",
        details: {
          peRatio: 34.5,
          pbRatio: 5.2,
          dividendYield: 0
        }
      },
      momentum: { 
        value: "Fair", 
        color: "yellow",
        details: {
          threeMonthReturn: 4.5,
          relativePerformance: -0.5,
          rsi: 53
        }
      }
    },
    synopsis: {
      price: "Trading near equilibrium despite broader market volatility",
      company: "Abiomed's heart pump technology seeing wider adoption in high-risk patient populations",
      role: "Growth-focused medical technology in cardiac support with leading market position"
    },
    industry: "Healthcare",
    smartScore: "Above Average",
    industryAverages: {
      revenueGrowth: 15,
      profitMargin: 20,
      returnOnCapital: 13,
      volatility: 1.2,
      beta: 1.15,
      dividendConsistency: "Low",
      peRatio: 25.0,
      pbRatio: 4.0,
      dividendYield: 0.6,
      threeMonthReturn: 5.0,
      relativePerformance: 2.0,
      rsi: 58
    }
  }
]

================
File: attached_assets/Pasted--Real-Estate-comparison-stocks-with-accurate-scores-const-realEstateStocks-Record-string-Compar-1743126718012.txt
================
// Real Estate comparison stocks with accurate scores
const realEstateStocks: Record<string, ComparisonStockData> = {
  'O': {
    symbol: 'O',
    name: 'Realty Income',
    color: '#7c3aed', // purple-600
    ratings: {
      Performance: 48,
      Stability: 82,
      Value: 73,
      Momentum: 62,
      Dividend: 85
    }
  },
  'SPG': {
    symbol: 'SPG',
    name: 'Simon Property',
    color: '#7c3aed',
    ratings: {
      Performance: 52,
      Stability: 68,
      Value: 77,
      Momentum: 66,
      Dividend: 80
    }
  },
  'AVB': {
    symbol: 'AVB',
    name: 'AvalonBay',
    color: '#7c3aed',
    ratings: {
      Performance: 47,
      Stability: 76,
      Value: 69,
      Momentum: 58,
      Dividend: 65
    }
  }
};

// Technology comparison stocks with accurate scores
const technologyStocks: Record<string, ComparisonStockData> = {
  'MSFT': {
    symbol: 'MSFT',
    name: 'Microsoft',
    color: '#7c3aed',
    ratings: {
      Performance: 85,
      Stability: 75,
      Value: 62,
      Momentum: 84,
      Dividend: 35
    }
  },
  'AAPL': {
    symbol: 'AAPL',
    name: 'Apple',
    color: '#7c3aed',
    ratings: {
      Performance: 82,
      Stability: 78,
      Value: 58,
      Momentum: 76,
      Dividend: 25
    }
  },
  'GOOGL': {
    symbol: 'GOOGL',
    name: 'Alphabet',
    color: '#7c3aed',
    ratings: {
      Performance: 80,
      Stability: 72,
      Value: 65,
      Momentum: 70,
      Dividend: 0
    }
  }
};

// Healthcare comparison stocks with accurate scores
const healthcareStocks: Record<string, ComparisonStockData> = {
  'JNJ': {
    symbol: 'JNJ',
    name: 'Johnson & Johnson',
    color: '#7c3aed',
    ratings: {
      Performance: 67,
      Stability: 89,
      Value: 72,
      Momentum: 55,
      Dividend: 65
    }
  },
  'PFE': {
    symbol: 'PFE',
    name: 'Pfizer',
    color: '#7c3aed',
    ratings: {
      Performance: 58,
      Stability: 75,
      Value: 78,
      Momentum: 48,
      Dividend: 70
    }
  },
  'UNH': {
    symbol: 'UNH',
    name: 'UnitedHealth',
    color: '#7c3aed',
    ratings: {
      Performance: 73,
      Stability: 82,
      Value: 64,
      Momentum: 68,
      Dividend: 40
    }
  }
};

// Default comparison stocks
const defaultStocks: Record<string, ComparisonStockData> = {
  'ABC': {
    symbol: 'ABC',
    name: 'Company ABC',
    color: '#7c3aed',
    ratings: {
      Performance: 65,
      Stability: 70,
      Value: 75,
      Momentum: 65,
      Dividend: 55
    }
  },
  'XYZ': {
    symbol: 'XYZ',
    name: 'Company XYZ',
    color: '#7c3aed',
    ratings: {
      Performance: 60,
      Stability: 65,
      Value: 70,
      Momentum: 60,
      Dividend: 50
    }
  }
};

================
File: attached_assets/Pasted-1-Company-by-Company-Overviews-AvalonBay-Communities-AVB-Value-P-E-28-2-P-B-2-55-Dividend-3-3--1742875718051.txt
================
1) Company‑by‑Company Overviews
AvalonBay Communities (AVB)
Value (P/E=28.2, P/B=2.55, Dividend=3.3%)
“AVB’s price ratios are moderately high, but not extreme, and its dividend is a bit above average — suggesting decent but not bargain-basement value.”

Performance (Rev Growth=4.9%, Profit=36.5%, ROC=5.6%)
“It grows steadily, has a healthy profit margin, and earns a respectable return on its real estate — overall, it’s performing solidly.”

Momentum (3M Return=–2.4%, Relative=–10%, RSI=47.8)
“The stock has lagged behind the market recently, but its RSI near 48 suggests it’s neither oversold nor strongly trending.”

Stability (Volatility=2.0%, Beta=0.89, Dividend Consistency=Good)
“AVB is relatively stable (moves less than the market), and it has a track record of dependable dividends.”

Public Storage (PSA)
Value (P/E=27.7, P/B=9.65, Dividend=4.2%)
“PSA’s P/E is moderate, but its P/B is high because storage properties often carry lower book values; the dividend is notably attractive.”

Performance (Rev Growth=3.9%, Profit=39.9%, ROC=10.2%)
“It’s steadily growing, very profitable, and generating solid returns on capital for a storage REIT.”

Momentum (3M Return=–1.7%, Relative=–9.7%, RSI=43.5)
“Recent returns trailed the market a bit, and an RSI of 43 suggests it’s on the weaker side but not severely oversold.”

Stability (Volatility=2.6%, Beta=0.80, Dividend Consistency=Good)
“Moves are moderate, it’s less volatile than the market on average, and it has a solid history of paying dividends.”

Digital Realty Trust (DLR)
Value (P/E=95.6, P/B=2.54, Dividend=3.2%)
“DLR looks expensive based on earnings (very high P/E), but it has a modest dividend; data-center REITs often carry high multiples.”

Performance (Rev Growth=1.4%, Profit=10.1%, ROC=1.43%)
“Revenue growth is low, and net profits are slimmer, so it’s not generating a strong return on its large data-center assets right now.”

Momentum (3M Return=–12.1%, Relative=–20%, RSI=50.1)
“It’s fallen noticeably more than the market lately, though its RSI around 50 indicates it’s back to a neutral trading zone.”

Stability (Volatility=3.1%, Beta=0.92, Dividend Consistency=Good)
“It’s a bit more volatile day‑to‑day, but still close to market‑level risk, and historically it hasn’t cut dividends.”

American Tower Corp (AMT)
Value (P/E=44.2, P/B=29.41, Dividend=3.2%)
“AMT has a high share-price relative to earnings and book value, but it still provides a moderate dividend yield.”

Performance (Rev Growth=–3.0%, Profit=20.9%, ROC=5.24%)
“Revenue dipped slightly, but it still makes a decent profit margin and invests capital reasonably well (especially for a tower REIT).”

Momentum (3M Return=+15.1%, Relative=+7.1%, RSI=61.1)
“Its stock has surged ahead of the market in recent months, and the RSI above 60 shows strong upward momentum.”

Stability (Volatility=2.6%, Beta=0.89, Dividend Consistency=Good)
“Price swings are moderate, it’s slightly less volatile than the market, and dividends have been consistently growing.”

Welltower Inc (WELL)
Value (P/E=182.2, P/B=2.98, Dividend=1.9%)
“Welltower’s P/E is extremely high (healthcare REITs often have unique earnings), and its dividend is lower than many peers.”

Performance (Rev Growth=20.4%, Profit=6.3%, ROC=1.06%)
“Revenue is booming (possibly through acquisitions), but net profits and returns on capital are thin in the senior housing space.”

Momentum (3M Return=+19.3%, Relative=+11.3%, RSI=54.7)
“It has soared well above the market recently, and an RSI near 55 suggests it’s still in healthy but not overbought territory.”

Stability (Volatility=2.2%, Beta=0.94, Dividend Consistency=Poor)
“Price swings are modest, but the company has cut dividends in tough times, so it’s less reliable for income stability.”

Boston Properties (BXP)
Value (P/E=785, P/B=2.03, Dividend=5.7%)
“BXP’s P/E is sky-high due to very low earnings right now, but it offers an appealing dividend yield.”

Performance (Rev Growth=4.1%, Profit=0.4%, ROC=0.06%)
“Its revenues have grown slightly, but profits are razor-thin, so it’s barely earning anything above its capital costs.”

Momentum (3M Return=–6.4%, Relative=–14.4%, RSI=52.5)
“The stock has dropped and underperformed the market, yet the RSI around 52 implies it’s trading in a neutral range.”

Stability (Volatility=3.0%, Beta=1.08, Dividend Consistency=Poor)
“It’s a bit more volatile and moves more than the market, and it has cut dividends in past downturns.”

Equity Residential (EQR)
Value (P/E=26.8, P/B=2.46, Dividend=3.9%)
“EQR’s valuation metrics look more moderate, and it offers a near‑4% dividend, so overall it’s reasonably priced.”

Performance (Rev Growth=3.8%, Profit=34.9%, ROC=5.59%)
“It shows steady revenue gains, healthy margins, and a solid return on its apartment properties.”

Momentum (3M Return=+1.7%, Relative=–6.3%, RSI=52.8)
“Its stock is slightly up but still lags the market’s gains, with an RSI around 53 indicating a fairly neutral trend.”

Stability (Volatility=2.3%, Beta=0.88, Dividend Consistency=Average)
“It doesn’t fluctuate too wildly, tends to move less than the market, and while the dividend is mostly steady, it has been cut once in the past.”

================
File: attached_assets/Pasted-1-Converting-String-Ratings-to-Numeric-Scores-For-any-metric-that-comes-as-a-text-value-for-examp-1742911598816.txt
================
1. Converting String Ratings to Numeric Scores
For any metric that comes as a text value (for example, "Strong", "Good", "Fair", or "Poor"), convert the rating to a number using these rules:

"Strong" or "High" → 90

"Good" → 70

"Average" or "Fair" → 50

"Weak", "Poor", or "Unstable" → 30

2. Calculating Sub-Metric Scores for Each Main Category
Each of the four main categories (Value, Growth, Momentum, Stability) is based on a weighted mix of sub-metrics. For each sub-metric, you calculate a score between 0 and 100. If a calculation gives a result outside of 0–100, it should be capped (or limited) to stay within that range.

A. Value Score
P/E Ratio (50% weight, lower is better):
Calculate the score as:
Score = 100 – ((Stock P/E ÷ Industry Avg P/E) × 50)

P/B Ratio (30% weight, lower is better):
Calculate the score as:
Score = 100 – ((Stock P/B ÷ Industry Avg P/B) × 50)

Dividend Yield (20% weight, higher is better):
Calculate the score as:
Score = (Stock Yield ÷ Industry Avg Yield) × 100

B. Growth Score
Revenue Growth (40% weight, higher is better):
Calculate the score as:
Score = (Stock Revenue Growth ÷ Industry Avg Revenue Growth) × 100

Profit Margin (30% weight, higher is better):
Calculate the score as:
Score = (Stock Profit Margin ÷ Industry Avg Profit Margin) × 100

Return on Capital (30% weight, higher is better):
Calculate the score as:
Score = (Stock ROC ÷ Industry Avg ROC) × 100

C. Momentum Score
3-Month Return (50% weight, higher is better):
Calculate the score as:
Score = (Stock 3-Month Return ÷ Industry Avg Return) × 100

Relative Performance (30% weight, higher is better):
Calculate the score as:
Score = 50 + (Stock Relative Performance × 5)

RSI (20% weight, where a value closer to 50 is best):
Calculate the score as:
Score = 100 – (|50 – Stock RSI| × 2)

D. Stability Score
Volatility (50% weight, lower is better):
Calculate the score as:
Score = 100 – ((Stock Volatility ÷ Industry Avg Volatility) × 50)

Beta (30% weight, best when close to 1):
Calculate the score as:
Score = 100 – (|1 – Stock Beta| × 50)

Dividend Consistency (20% weight):
Assign a score based on the string rating:

"High" or "Good" → 90

"Medium" → 60

"Poor" or "Low" → 30

================
File: attached_assets/Pasted-1-Converting-String-Ratings-to-Numeric-Scores-For-any-metric-that-comes-as-a-text-value-for-exampl-1742911310967.txt
================
1. Converting String Ratings to Numeric Scores
For any metric that comes as a text value (for example, "Strong", "Good", "Fair", or "Poor"), convert the rating to a number using these rules:

"Strong" or "High" → 90

"Good" → 70

"Average" or "Fair" → 50

"Weak", "Poor", or "Unstable" → 30

2. Calculating Sub-Metric Scores for Each Main Category
Each of the four main categories (Value, Growth, Momentum, Stability) is based on a weighted mix of sub-metrics. For each sub-metric, you calculate a score between 0 and 100. If a calculation gives a result outside of 0–100, it should be capped (or limited) to stay within that range.

A. Value Score
P/E Ratio (50% weight, lower is better):
Calculate the score as:
Score = 100 – ((Stock P/E ÷ Industry Avg P/E) × 50)

P/B Ratio (30% weight, lower is better):
Calculate the score as:
Score = 100 – ((Stock P/B ÷ Industry Avg P/B) × 50)

Dividend Yield (20% weight, higher is better):
Calculate the score as:
Score = (Stock Yield ÷ Industry Avg Yield) × 100

B. Growth Score
Revenue Growth (40% weight, higher is better):
Calculate the score as:
Score = (Stock Revenue Growth ÷ Industry Avg Revenue Growth) × 100

Profit Margin (30% weight, higher is better):
Calculate the score as:
Score = (Stock Profit Margin ÷ Industry Avg Profit Margin) × 100

Return on Capital (30% weight, higher is better):
Calculate the score as:
Score = (Stock ROC ÷ Industry Avg ROC) × 100

C. Momentum Score
3-Month Return (50% weight, higher is better):
Calculate the score as:
Score = (Stock 3-Month Return ÷ Industry Avg Return) × 100

Relative Performance (30% weight, higher is better):
Calculate the score as:
Score = 50 + (Stock Relative Performance × 5)

RSI (20% weight, where a value closer to 50 is best):
Calculate the score as:
Score = 100 – (|50 – Stock RSI| × 2)

D. Stability Score
Volatility (50% weight, lower is better):
Calculate the score as:
Score = 100 – ((Stock Volatility ÷ Industry Avg Volatility) × 50)

Beta (30% weight, best when close to 1):
Calculate the score as:
Score = 100 – (|1 – Stock Beta| × 50)

Dividend Consistency (20% weight):
Assign a score based on the string rating:

"High" or "Good" → 90

"Medium" → 60

"Poor" or "Low" → 30

"N/A" → 0

For each main category, combine the scores from its sub-metrics using the given weights.

3. Calculating Overall Portfolio Metrics
The system then combines individual stock scores into an overall portfolio score for each category.

A. Current Portfolio Score
Step 1: For every stock already in the portfolio, calculate its weight by dividing its value by the total portfolio value.

Step 2: Multiply each stock’s individual category score by its weight and sum these values.

Step 3: If needed, normalize the result (divide by the total weight) to ensure the combined score is properly scaled.

B. New Portfolio Score (After Adding a New Stock)
Step 1: Determine the new stock's allocation value.

Step 2: Calculate the new total portfolio value (existing total plus new allocation).

Step 3: Determine the new weights:

New stock weight: new allocation divided by the new total portfolio value.

Existing portfolio weight: existing total divided by the new total portfolio value.

Step 4: Combine the scores:

Multiply the current portfolio score by its weight and add the new stock’s score multiplied by its weight. This gives the updated portfolio score.

4. Calculating the Impact of a New Stock
To understand the effect of adding the new stock, subtract the current portfolio score from the new portfolio score:

Impact = New Portfolio Score – Current Portfolio Score

This impact tells you how the new addition changes the overall score for that category.

================
File: attached_assets/Pasted-After-reviewing-your-code-and-the-screenshot-I-can-see-the-issue-with-your-portfolio-widget-not-upd-1743150434250.txt
================
After reviewing your code and the screenshot, I can see the issue with your portfolio widget not updating properly. This appears to be a state management problem rather than a visual issue.
The main issue is likely in how your InvestmentPanel component is listening for portfolio updates. Looking at the code you provided:

Your InvestmentPanel component has a force update mechanism that seems to be trying to re-render when portfolio data changes:

javascriptCopyuseEffect(() => {
  if (portfolio) {
    // Force re-render when portfolio updates
    forceUpdate({});
    console.log("Portfolio updated in InvestmentPanel:", portfolio.holdings.length);
  }
}, [portfolio, portfolio?.holdings.length, portfolio?.cash, portfolio?.portfolioValue]);
However, there might be a few problems here:

Context subscription issue: The widget may not be properly subscribing to context updates from the PortfolioContext. Check if you're using the same context instance across your application.
Missing dependency: In your dependency array, you're watching portfolio.holdings.length, but it may not trigger properly because array comparison can be tricky. You might need to watch a more specific value.
State synchronization problem: The widget on your home page might be using a different state than your portfolio page.

Here's what I recommend:
javascriptCopy// Improve the useEffect in InvestmentPanel.js
useEffect(() => {
  // Add a timestamp or unique identifier to force refresh
  const timer = setTimeout(() => {
    forceUpdate({ timestamp: Date.now() });
  }, 100); // Small delay to ensure portfolio data is fully updated
  
  return () => clearTimeout(timer);
}, [
  portfolio, 
  portfolio?.holdings.length, 
  portfolio?.cash, 
  portfolio?.portfolioValue,
  portfolio?.totalValue, // Add this if not already included
]);
Additionally, make sure your PortfolioContext is correctly set up to propagate changes:
javascriptCopy// In your PortfolioContext.js
const updatePortfolio = (newData) => {
  setPortfolioState(prevState => ({
    ...prevState,
    ...newData,
    // Add a lastUpdated timestamp to force consumers to update
    lastUpdated: Date.now()
  }));
};
This would ensure that any component using the context gets notified about all updates. You'd then need to include portfolio?.lastUpdated in your dependency array for the useEffect.
The key is ensuring that whenever the portfolio changes (through your portfolio impact calculator), the context state is properly updated and all subscribing components receive the notification to re-render.

================
File: attached_assets/Pasted-AvalonBay-Communities-AVB-P-E-28-2-You-pay-28-20-for-every-1-of-AVB-s-annual-earnings-which--1742875791876.txt
================
AvalonBay Communities (AVB)
P/E (28.2)
“You pay $28.20 for every $1 of AVB’s annual earnings, which is a moderately high price tag relative to its profits.”

P/B (2.55)
“AVB’s shares trade at about 2.5 times the net book value of its apartment properties, indicating the market values them more highly than their balance‑sheet cost.”

Dividend Yield (3.30%)
“You’d get 3.3% of your investment back each year in cash dividends from AVB, a moderate level of income.”

Revenue Growth (4.90%)
“AVB’s total rent and fee collections grew by nearly 5% from last year, showing a steady expansion in its rental business.”

Profit Margin (36.50%)
“For every $1 AVB collects, it keeps about 37 cents as pure profit after covering expenses.”

Return on Capital (5.60%)
“AVB makes about 5.6% on the money it invests in its apartment communities, indicating a reasonably efficient use of its funds.”

3‑Month Return (–2.40%)
“The stock slipped 2.4% over the past quarter, meaning it slightly lost value in that short term.”

Relative Performance vs Index (–10%)
“AVB’s shares lagged the broader market by about 10 percentage points in the same period, underperforming compared to a major index.”

RSI (47.8)
“An RSI near 48 shows the stock’s price movement is pretty neutral, not clearly oversold or overbought.”

Volatility (2.00%)
“On an average day, AVB’s price changes around 2%, suggesting moderate ups and downs.”

Beta (0.89)
“AVB’s beta under 1 means it typically moves a bit less than the overall market, so it’s slightly more stable than higher‑beta stocks.”

Dividend Consistency (Good)
“AVB has a history of reliably paying (and gradually increasing) dividends, even during tough times.”

Public Storage (PSA)
P/E (27.7)
“Investors pay $27.70 for each $1 of PSA’s annual net earnings, a moderately high valuation for a self‑storage REIT.”

P/B (9.65)
“PSA’s share price is about 9.6 times its stated book value, partly because storage properties often have low depreciated book values.”

Dividend Yield (4.20%)
“You’d earn 4.2% in dividend income yearly from PSA, which is higher than many typical stocks.”

Revenue Growth (3.90%)
“PSA’s rental income grew by about 4%, reflecting steady demand for storage units.”

Profit Margin (39.90%)
“It keeps nearly 40 cents as profit from every dollar of revenue, indicating efficient operations.”

Return on Capital (10.20%)
“PSA makes about 10% on its invested money, suggesting a strong ability to turn its storage properties into profits.”

3‑Month Return (–1.70%)
“Its stock dipped 1.7% over the last three months, so it slightly declined in that period.”

Relative Performance vs Index (–9.70%)
“PSA underperformed the market by nearly 10 percentage points during the same stretch.”

RSI (43.5)
“An RSI near 43 indicates PSA’s recent price movement is somewhat on the weaker side but not severely oversold.”

Volatility (2.60%)
“PSA’s share price typically bounces around 2.6% day to day, a moderate volatility level for a REIT.”

Beta (0.80)
“A beta of 0.80 means PSA moves less than the overall market, suggesting it’s relatively stable in market swings.”

Dividend Consistency (Good)
“PSA has consistently paid and generally increased its dividend, even when times were tough.”

Digital Realty Trust (DLR)
P/E (95.6)
“You pay $95.60 for every $1 of DLR’s annual profit, making it look expensive by normal earnings measures.”

P/B (2.54)
“DLR’s share price is about 2.5 times its balance‑sheet value, which is closer to average for large REITs.”

Dividend Yield (3.20%)
“DLR provides a 3.2% yearly payout, offering moderate income for investors interested in data‑center properties.”

Revenue Growth (1.40%)
“Its revenues grew by just over 1%, meaning minimal expansion in data‑center leasing last year.”

Profit Margin (10.10%)
“Out of every dollar DLR makes, only around 10 cents is net profit, reflecting higher operating and interest expenses.”

Return on Capital (1.43%)
“DLR earns only about 1.4% on its huge data‑center investments, indicating relatively low returns currently.”

3‑Month Return (–12.10%)
“The stock dropped more than 12% in the past quarter, underperforming many peers in that timeframe.”

Relative Performance vs Index (–20%)
“DLR’s shares fell about 20 percentage points more than the broader market, a significant underperformance.”

RSI (50.1)
“An RSI around 50 suggests DLR is neither oversold nor overbought, sitting right in the middle.”

Volatility (3.10%)
“Its price swings roughly 3.1% on an average day, a bit higher volatility than some other REITs.”

Beta (0.92)
“A beta of 0.92 means it tends to move slightly less than the market overall, though still fairly close.”

Dividend Consistency (Good)
“DLR has grown its dividend reliably over the years, rarely (if ever) cutting it even in tough markets.”

American Tower Corp (AMT)
P/E (44.2)
“AMT’s price is about $44 for each dollar of annual earnings, typical of telecom tower REITs but still high compared to many stocks.”

P/B (29.41)
“The market value is almost 29 times the stated book value, largely because tower assets depreciate on the balance sheet even while retaining or growing in utility.”

Dividend Yield (3.20%)
“Investors in AMT get 3.2% dividend income, which is a moderate yield among tower operators.”

Revenue Growth (–3.00%)
“AMT’s revenue actually dipped by 3%, implying either a slowdown or currency/contract changes affecting its tower rentals.”

Profit Margin (20.90%)
“It makes nearly 21 cents of profit on each dollar of revenue, somewhat solid for a capital‑intensive tower business.”

Return on Capital (5.24%)
“AMT’s tower investments earn around 5.2% returns, indicating a reasonably efficient use of funds.”

3‑Month Return (+15.1%)
“Its stock price rose by more than 15% recently, showing a strong short‑term rebound.”

Relative Performance vs Index (+7.1%)
“AMT outperformed the broader market by about 7 points, reflecting it has done better than the average stock over that period.”

RSI (61.1)
“An RSI above 60 indicates AMT’s shares have seen a solid upward push, suggesting bullish momentum without extreme overbought levels.”

Volatility (2.60%)
“It typically moves around 2.6% each day, a moderate fluctuation for a growth‑oriented REIT.”

Beta (0.89)
“AMT’s beta under 1 means it tends to move slightly less dramatically than the broader market index.”

Dividend Consistency (Good)
“American Tower has kept or raised its dividend consistently for years, with no major cuts in tough times.”

Welltower Inc (WELL)
P/E (182.2)
“Investors pay a very high $182 for each dollar of WELL’s annual profit, reflecting its unique healthcare REIT accounting and potentially inflated valuation.”

P/B (2.98)
“WELL trades near three times its net asset value on paper, typical of large healthcare properties with older book costs.”

Dividend Yield (1.90%)
“It offers 1.9% annually in dividends, which is fairly modest compared to many other real estate firms.”

Revenue Growth (20.40%)
“WELL’s revenue leaped over 20%, possibly from acquiring new senior housing properties or seeing a strong occupancy rebound.”

Profit Margin (6.30%)
“Out of every dollar it makes, only 6 cents end up as net profit, signaling significant operational or interest costs.”

Return on Capital (1.06%)
“It earns just about 1% on the money it invests, a low figure that might reflect hefty expansion costs.”

3‑Month Return (+19.3%)
“WELL’s stock jumped nearly 20% recently, marking a strong price rebound.”

Relative Performance vs Index (+11.3%)
“It beat the market by more than 11%, showing impressive short‑term outperformance.”

RSI (54.7)
“An RSI in the mid-50s indicates decent upward momentum without extreme buying pressure.”

Volatility (2.20%)
“Its daily swings of around 2.2% point to a moderate risk level for a healthcare REIT.”

Beta (0.94)
“WELL moves roughly in line with the market, slightly less than full market volatility.”

Dividend Consistency (Poor)
“Welltower cut its dividend in past crises, indicating it’s less reliable for steady income than some peers.”

Boston Properties (BXP)
P/E (785)
“BXP’s P/E ratio is off the charts at 785 because its profits are extremely low at the moment.”

P/B (2.03)
“Its share price is about twice the reported value of its office real estate holdings, which is fairly typical for prime property REITs.”

Dividend Yield (5.70%)
“BXP pays a comparatively high 5.7% yearly to investors, but that can be risky if earnings remain weak.”

Revenue Growth (4.10%)
“The company boosted its top line by around 4%, showing modest improvement in leasing or rent rates.”

Profit Margin (0.40%)
“BXP only keeps about half a penny of profit per dollar of sales, basically scraping by after costs.”

Return on Capital (0.06%)
“It earns close to zero on the money put into its office properties, indicating profitability challenges.”

3‑Month Return (–6.40%)
“Its stock slid 6.4% over the last quarter, losing value amid potential office market concerns.”

Relative Performance vs Index (–14.40%)
“BXP underperformed broader stocks by more than 14%, suggesting investors have been wary of office REITs.”

RSI (52.5)
“An RSI near 52 signals neutral momentum, neither heavily sold off nor strongly rebounding.”

Volatility (3.00%)
“Daily moves around 3% show it’s somewhat more volatile than many REITs, likely due to office‑sector worries.”

Beta (1.08)
“A beta above 1 means BXP swings a bit more than the overall market, making it slightly riskier.”

Dividend Consistency (Poor)
“BXP has cut dividends in past downturns and isn’t considered a reliable income stock for cautious investors.”

Equity Residential (EQR)
P/E (26.8)
“Paying $26.80 for every $1 EQR earns indicates a somewhat above‑average price tag for apartment REITs.”

P/B (2.46)
“Shares are valued at about 2.5 times EQR’s book value, implying the market sees solid apartment asset quality.”

Dividend Yield (3.90%)
“You’d earn about 3.9% per year in dividends, a moderate yield for renting out residential properties.”

Revenue Growth (3.80%)
“EQR’s income from tenants rose by nearly 4%, a typical, modest climb for a stable apartment REIT.”

Profit Margin (34.90%)
“For every dollar collected, EQR keeps around 35 cents as profit, reflecting efficient operations.”

Return on Capital (5.59%)
“It earns roughly 5.6% on the money invested in apartments, showing a decent return.”

3‑Month Return (+1.70%)
“The stock gained just under 2% over the last quarter, a small positive move.”

Relative Performance vs Index (–6.30%)
“Compared to the broader market, EQR trailed by over 6%, meaning it’s slightly lagging behind overall stocks.”

RSI (52.8)
“An RSI close to 53 means EQR’s shares have fairly balanced momentum right now.”

Volatility (2.30%)
“They typically swing around 2.3% in daily trading, which is relatively moderate risk.”

Beta (0.88)
“With a beta under 1, EQR is a bit less volatile than the stock market as a whole.”

Dividend Consistency (Average)
“EQR has generally been dependable but did reduce payouts once before, so it’s not perfect but still fairly stable.”

================
File: attached_assets/Pasted-Below-is-a-sample-Product-Requirements-Document-PRD-for-Swipefolio-an-app-that-makes-learning-1742761538285.txt
================
Below is a sample Product Requirements Document (PRD) for **Swipefolio**, an app that makes learning finance fun, engaging, and visually appealing—think “Duolingo for finance.” This PRD is intended to serve as a blueprint for your team to design, build, and launch the product.

---

## 1. Product Overview

### 1.1 Product Name
**Swipefolio** – A gamified finance learning app that uses bite-sized “stacks” (like playlists) organized by industry or topic, delivering fun financial stats and interactive lessons.

### 1.2 Product Vision
Finance can be daunting for many. **Swipefolio** breaks down the complexity by offering quick, interactive learning modules, similar to Duolingo’s approach to languages. Users “stack” up knowledge in an engaging, visually-appealing environment, while discovering interesting facts, stats, and curated content specific to different industries.

### 1.3 Target Audience
1. **Young Adults & Students (18-25):** Interested in basic financial literacy, investment trends, and general knowledge.
2. **Aspiring Investors (25-35):** Professionals who want quick insights and deeper dives into specific industries.
3. **Finance Enthusiasts (35+):** Individuals who enjoy learning about market trends, emerging sectors, or advanced financial topics in a structured, gamified format.

---

## 2. Objectives & Success Criteria

### 2.1 Objectives
1. **Educate:** Provide a fun, interactive platform that teaches finance fundamentals and advanced topics in bite-sized lessons.
2. **Engage:** Increase knowledge retention through game-like quizzes, reward systems, and progress tracking.
3. **Inspire Action:** Encourage users to explore industries and consider real-world applications (e.g., exploring stock investments, business trends, or personal finance strategies).
4. **Simplify Complexity:** Present complex finance terminology and concepts in a user-friendly, visually rich interface.

### 2.2 Key Success Metrics
- **Daily Active Users (DAU) & Monthly Active Users (MAU):** Track the number of users returning regularly.
- **Time Spent on Platform:** Higher time indicates more engaging content.
- **Lesson Completion Rates:** Percentage of users who complete a given “stack.”
- **User Satisfaction (NPS or in-app rating):** Monitor feedback to improve future iterations.
- **Retention Rate:** Gauge how many users continue using the app after initial signup.

---

## 3. Feature Requirements

### 3.1 Stacks (Playlists by Industry)
- **Playlist Concept:** Each “stack” is a themed playlist (e.g., “Technology,” “Healthcare,” “Renewable Energy,” “Crypto,” “Consumer Goods”) containing a curated set of mini-lessons.
- **Visual Cards:** Each lesson appears as a swipeable card with quick stats, curated information, images, and short quizzes.
- **Progress Tracking:** Visual markers (e.g., progress bars or checkmarks) to show completion status of each stack.
- **Difficulty Tiers:** Each stack contains tiers (Beginner, Intermediate, Advanced) to cater to various knowledge levels.

### 3.2 Fun Stats & Pretty Visuals
- **Infographics:** Use bite-sized, eye-catching infographics to explain data (e.g., revenue graphs, profit margins, market shares).
- **Interactive Charts:** Tap or hover (on mobile, a simple tap) to reveal underlying data (e.g., historical trends or breakdown of revenue sources).
- **High-Quality Imagery:** Each card includes relevant, aesthetically pleasing images to illustrate concepts.
- **Animations:** Subtle animations upon card swiping or completing a mini-quiz to give an engaging “game feel.”

### 3.3 Gamification & Learning Mechanics
- **Quizzes & Mini-Games:** Multiple-choice questions, drag-and-drop activities, and flashcard-style drills, all integrated within each stack.
- **XP Points & Badges:** Users earn points for each lesson completed; unlocking badges for completing certain milestones (e.g., “Tech Wizard” for finishing the Technology stack).
- **Streaks & Leaderboards:** Encourage consistency by tracking daily lesson streaks. Leaderboards foster friendly competition among friends.

### 3.4 User Profiles & Social Sharing
- **Profile Dashboard:** Displays total XP, badges, and stats on progress. Shows recently completed stacks.
- **Social Integration:** Allow users to share their progress or interesting tidbits (infographics, scores) on social media.
- **Community Interaction (Phase 2):** Optional feature where users can follow friends or influencers to see recommended stacks.

### 3.5 Onboarding & Personalization
- **Quick Onboarding Quiz:** Gauge user’s financial knowledge, recommend appropriate stack difficulty.
- **Tailored Recommendations:** Suggest next best stacks based on completed lessons, user goals (e.g., advanced investing, general finance literacy, industry-specific interests).

### 3.6 Monetization (Optional / Future Phases)
- **Freemium Model:** A core set of stacks are free, while advanced or niche stacks require a subscription or one-time purchase.
- **Premium Features:** Access to expert insights, in-depth analysis, and exclusive badges for subscribers.

---

## 4. User Journey

1. **Sign-Up/Onboarding:** 
   - User downloads the app, sees an attractive splash screen, and is guided through a short sign-up or log-in flow.
   - Onboarding quiz or short survey to personalize recommended stacks.

2. **Browsing Stacks (Homepage/Discovery):**
   - User sees various curated stacks by industry, trending popularity, or recommended by the app based on user interest.
   - Each stack has a thumbnail, short description, estimated completion time, and a “fun stat” teaser.

3. **Selecting & Engaging with a Stack:**
   - User taps on a stack: 
     - A list of cards is displayed, each containing a fun fact, infographic, or short lesson.
     - The user swipes through the cards, completes quick quizzes, and collects XP upon completion.

4. **Progress & Rewards:**
   - After finishing a stack, the user sees a summary of their performance (correct answers, time taken).
   - User receives XP, potentially unlocks a badge, and sees suggestions for related stacks.

5. **Sharing & Social:**
   - If the user chooses, they can share a specific card’s infographic or a badge they earned on social media.

6. **Return & Retention:**
   - The app uses push notifications or email nudges: 
     - “Daily swipe reminder” to continue learning.
     - Recommended new or trending stacks (e.g., “Hot picks in Renewable Energy”).

---

## 5. Technical Requirements

### 5.1 Platform & Technology
- **Mobile-First:** Primary development for iOS and Android using a cross-platform framework (React Native, Flutter) or native code. 
- **Scalability:** Backend to handle real-time user data, quiz logic, and leaderboard updates.
- **CMS or Content Creation Tool:** In-house or third-party solution for uploading new lesson cards, infographics, and quiz questions easily.

### 5.2 Performance & Security
- **Smooth UI/UX:** Quick loading times for cards, minimal friction for swiping.
- **Data Security:** Ensure user profile data and progress data is encrypted at rest and in transit (HTTPS).

### 5.3 Integrations
- **Analytics:** Integrate with an analytics platform (e.g., Firebase Analytics) to track user behavior, success metrics.
- **Social APIs (Optional):** Allow for easy sharing to major platforms (Twitter, LinkedIn, etc.), abiding by each platform’s guidelines.

---

## 6. Roadmap & Phases

1. **Phase 1: MVP**
   - Core functionality: Stacks with swipeable cards, quizzes, basic progress tracking.
   - Basic user profiles with XP and badges.
   - Simple onboarding and a small set of curated industry stacks (e.g., Tech, Healthcare, Consumer Goods).

2. **Phase 2: Social & Personalization**
   - Add friend lists, leaderboards, and daily streak tracking.
   - Advanced recommendation engine to personalize user stacks based on past activity.
   - Integration with social media for sharing achievements.

3. **Phase 3: Premium Content & Advanced Features**
   - Subscription-based model or in-app purchases for advanced stacks and in-depth analytics content.
   - In-app events (e.g., special limited-time stack about an upcoming IPO or emerging market).

4. **Phase 4: Community & Expansion**
   - User-generated content: Let experts or finance influencers create and share their own stacks.
   - Global roll-out with localized language and region-specific industries.

---

## 7. Design & UX Considerations

1. **Gamified Aesthetic:** 
   - Consistent color palette, pleasing animations when swiping or completing lessons.
   - Simple icons representing each industry stack (e.g., tech chip icon for Technology, pill icon for Healthcare).

2. **Micro-Interactions:** 
   - Subtle haptic feedback or animations to reinforce progress and correct vs. incorrect quiz answers.

3. **Accessibility:**
   - Ensure font sizes, color contrasts, and swipe gestures are accessible to users with visual or motor impairments.

4. **Brand Identity:** 
   - Reflect the “fun meets finance” approach. Vibrant but professional brand vibe.

---

## 8. Risks & Mitigations

1. **Content Fatigue:**
   - **Mitigation:** Regularly refresh stacks, add new content, and provide daily challenges to maintain user interest.

2. **Over-Gamification Concerns:**
   - **Mitigation:** Keep the learning objectives front and center. XP and badges should support, not overshadow, the educational value.

3. **Complex Finance Topics:**
   - **Mitigation:** Use plain-language explanations, short segments, and relevant examples to avoid overwhelming novice users.

4. **Compliance & Accuracy:**
   - **Mitigation:** Content should be vetted or reviewed by financial experts; disclaimers for educational content.

---

## 9. Launch & Marketing Strategy

1. **Soft Launch/Beta:** 
   - Invite a small group (finance students, early adopters) to gather feedback, refine quizzes, and fix UX bugs.

2. **Influencer Partnerships:** 
   - Collaborate with finance YouTubers, TikTok creators, and LinkedIn thought leaders to showcase how **Swipefolio** makes finance learning accessible.

3. **Referral Incentives:** 
   - Reward existing users with bonus XP or premium stack access for each successful referral.

4. **Social Media Campaigns:** 
   - Highlight “fun stat” snippets from selected stacks to tease potential users, driving app downloads.

---

## Conclusion

**Swipefolio** aims to revolutionize financial education by merging the quick-hit, gamified learning style of Duolingo with the depth and breadth of industry-specific finance information. By delivering a polished, visually engaging experience and leveraging a playlist/stack format, we can make finance learning more approachable, sticky, and fun for a broad range of users.

---

**End of Document**

================
File: attached_assets/Pasted-Here-s-the-breakdown-State-Management-Your-application-uses-PortfolioContext-client-src-contexts-1743190043947.txt
================
Here's the breakdown:

State Management: Your application uses PortfolioContext (client/src/contexts/portfolio-context.tsx) to manage the portfolio's state (cash, holdings, etc.). This context is correctly designed to update its state when buyStock is called from the PortfolioImpactCalculator  and includes mechanisms (version, lastUpdated) intended to help trigger UI updates.   
The Problem: The HomePage component (client/src/pages/home-page.tsx) is wrapped by its own <PortfolioProvider>. Your main application file (client/src/App.tsx) likely also wraps the entire application or router in a <PortfolioProvider>. This creates two separate instances of the portfolio state.   
Data Flow Issue:
When you make an investment via the PortfolioImpactCalculator (likely triggered from the StockDetailPage), it updates the main PortfolioContext provided in App.tsx.
However, the HomePage and the components within it (like PortfolioDashboard) are reading data from the separate, nested PortfolioContext instance created within HomePage itself. This nested context instance is never updated by the buyStock action, so the widget on the home page doesn't see the changes in cash or invested amounts.   
Why it seems to refresh: The user mentioned the page refreshes. This might be due to other state changes or routing actions, but the data the widget displays remains stale because it's connected to the wrong context instance.
How to Fix:

The solution is to ensure there's only one PortfolioProvider wrapping your application, typically at the highest level (like in App.tsx or your main router setup).

Remove the <PortfolioProvider> wrapper from the HomePage component (client/src/pages/home-page.tsx).   
By doing this, the HomePage and its child components (PortfolioDashboard, CompetitionTracker) will correctly consume the single, application-wide PortfolioContext that is being updated by the investment actions. This should resolve the issue of the widget not reflecting the latest cash and invested amounts.


Sources and related content

================
File: attached_assets/Pasted-I-need-you-to-implement-a-comparative-analysis-feature-on-the-stock-card-below-the-stock-synopsis-se-1743122253330.txt
================
I need you to implement a comparative analysis feature on the stock card below the stock synopsis section. Here are the instructions. please let me know if you have any comments/instructions/feedback/points to clarify before we implement this. You MUST be careful about creating too many uncessary files, making these edits/implementation in files that have nothing to do with this 

The comparative analysis section will provide users with visual tools to compare the current stock with similar companies, enhancing educational value and decision-making capabilities. This feature will include two visualization options: a radar/spider chart and a quadrant comparison.These two options are togglable to switch. 

1. Radar Chart Implementation
Purpose
To visually display how the current stock compares to 4 random companies in the same industry across multiple metrics simultaneously.
Data Structure

Use existing portfolio impact calculator weighted scores
Display 5 stocks total (current stock + 4 comparisons)
Metrics to display (4 key metrics):

Performance
Stability
Value
Momentum
Dividend yield (if applicable)




Visual Design

Use distinct colors for each company
Make current stock's line more prominent (thicker, brighter color)
Include a legend identifying each company
Add tooltips showing exact values when hovering

Interaction

Allow users to tap on company names in the legend to toggle visibility
Include brief explanation text about radar charts for educational purposes

2. Quadrant Comparison Implementation
Purpose
To position stocks relative to each other based on two key metrics, helping users understand trade-offs between different investment qualities.
Recommended Quadrant Metrics
For maximum educational value and digestibility, I recommend these quadrant options:
Option 1: Risk vs. Return Quadrant

X-axis: Volatility/Risk (low to high)
Y-axis: Expected Return (low to high)
Quadrants interpretation:

Top Left: Low risk, high return (ideal)
Top Right: High risk, high return (performance stocks)
Bottom Left: Low risk, low return (stable stocks)
Bottom Right: High risk, low return (avoid)



Option 2: Value vs. Performance Quadrant

X-axis: Value score (low to high)
Y-axis: Performance potential (low to high)
Quadrants interpretation:

Top Left: Low value, high performance (performance stocks)
Top Right: High value, high performance (ideal stocks)
Bottom Left: Low value, low performance (avoid)
Bottom Right: High value, low performance (value stocks)



Visual Design

Use a simple scatter plot with quadrant lines
Make current stock point larger/highlighted
Include company names as labels
Use background color shading to indicate desirability of each quadrant

Interaction

Toggle button between radar and quadrant views
Option to select different metric combinations for the quadrant comparison
Educational tooltip explaining what each quadrant represents

Implementation Notes

For initial implementation, hardcode comparison companies from the same sector
Make the toggle between radar and quadrant views intuitive with clear labels
Include educational tooltips throughout to explain what users are seeing
Use consistent color coding between the two visualization types

User Experience Flow

User views stock card
Under "Comparative Analysis" section, radar chart displays by default
Clear button/toggle allows switching to quadrant view
Brief explanation text provides context for each visualization
Interactive elements allow exploration of the data

The quadrant comparison will be particularly valuable as it's more intuitive for beginners to understand the trade-offs between different investment characteristics. Starting with the Risk vs. Return quadrant would provide the most immediate value to users as it represents a fundamental investment concept.

================
File: attached_assets/Pasted-I-understand-you-need-text-based-instructions-for-the-Replit-agent-that-focus-on-the-UI-and-logic-wi-1742788506260.txt
================
I understand you need text-based instructions for the Replit agent that focus on the UI and logic without code snippets or Gemini integration. Let me provide clear guidelines for improving the stock metrics popups:

### Instructions for Replit Agent: Improving Stock Metrics Popups

#### 1. Metric Button Popup Implementation

When a user clicks on any of the metric buttons (Performance, Stability, Value, Momentum):
- Create a modal overlay that appears centered on screen
- Add a semi-transparent dark background that dims the rest of the app
- Include a close button (X) in the top-right corner
- Make the popup match the dark theme with neon accent colors seen in the screenshots
- Ensure the popup is responsive and works on mobile devices
- The title should be the name of the metric with the same color as the metric bubble (green for High/Strong, yellow for Fair, red for Low/Unstable)

#### 2. Dynamic Content for Each Stock

For each stock card:
- Store the rating for each metric (High/Fair/Low or Strong/Fair/Weak or High/Fair/Unstable)
- Store specific numerical values for each component of the metric:
  * Performance: Revenue Growth %, Profit Margin %, Return on Capital %
  * Stability: Volatility value, Beta value, Dividend Consistency rating
  * Value: P/E Ratio, P/B Ratio, Dividend Yield %
  * Momentum: 3-Month Return %, Market Performance Comparison %, RSI

The explanation text should change based on the rating:
- For "High" or "Strong" ratings: Use positive language about exceptional performance
- For "Fair" ratings: Use balanced language about average performance
- For "Low" or "Unstable" ratings: Use cautious language about underperformance

#### 3. Content Structure Within Popup

Each popup should have three sections:

1. **How It's Calculated**
   - Explain which specific metrics are used (matching those from the composite model document)
   - Show the actual values for this specific stock
   - Example: "Based on revenue growth of 15%, profit margins of 22%, and return on invested capital of 18% over the past 3 years compared to industry averages."

2. **Industry Comparison**
   - Compare the stock's metrics to industry averages
   - For each industry/stack, establish baseline averages:
     * Tech Titans: Higher growth expectations (15% revenue growth avg, etc.)
     * Dividend Kings: Higher yield expectations (3.5% dividend yield avg, etc.)
     * Green Giants: Different margin profiles
   - Example: "This company's performance metrics rank in the top quartile of its industry peers, showing exceptional operational execution."

3. **What It Means**
   - Provide practical interpretation for novice investors
   - Explain implications for their portfolio
   - Example: "Strong performance indicates the company is effectively growing revenue while maintaining healthy margins and efficient capital use."

#### 4. Metric Value Distribution Rules

Create consistent relationships between ratings and numerical values:

**Performance Metrics:**
- High: Revenue Growth >10%, Profit Margin >20%, Return on Capital >15%
- Fair: Revenue Growth 3-10%, Profit Margin 10-20%, Return on Capital 8-15%
- Low: Revenue Growth <3%, Profit Margin <10%, Return on Capital <8%

**Stability Metrics:**
- High: Volatility <0.8, Beta 0.7-1.1, Dividend Consistency "High"
- Fair: Volatility 0.8-1.2, Beta 0.5-1.3, Dividend Consistency "Medium"
- Unstable: Volatility >1.2, Beta <0.5 or >1.3, Dividend Consistency "Low" or "N/A"

**Value Metrics:**
- High: P/E Ratio <15, P/B Ratio <2.5, Dividend Yield >2%
- Fair: P/E Ratio 15-25, P/B Ratio 2.5-4, Dividend Yield 0.5-2%
- Low: P/E Ratio >25, P/B Ratio >4, Dividend Yield <0.5% or "N/A"

**Momentum Metrics:**
- Strong: 3-Month Return >5%, Relative Performance >3%, RSI 55-70
- Fair: 3-Month Return -2% to 5%, Relative Performance -2% to 3%, RSI 45-55 or 70-75
- Weak: 3-Month Return <-2%, Relative Performance <-2%, RSI <45 or >75

#### 5. Industry Average Specifications

For each industry/stack, define different baseline averages:

**Tech Titans:**
- Revenue Growth: 12% industry avg
- P/E Ratio: 22 industry avg
- Beta: 1.1 industry avg

**Green Giants:**
- Revenue Growth: 8% industry avg
- P/E Ratio: 18 industry avg
- Beta: 0.9 industry avg

**Dividend Kings:**
- Dividend Yield: 3.2% industry avg
- Revenue Growth: 4% industry avg
- Beta: 0.8 industry avg

**Consumer Giants:**
- Revenue Growth: 5% industry avg
- P/E Ratio: 20 industry avg
- Beta: 0.85 industry avg

#### 6. Chart Visualization Improvements

For chart generation:
- Ensure the Y-axis range is appropriate for the price (don't show $110+ for a $61 stock)
- Set Y-axis minimum to approximately 10-15% below the lowest point on the chart
- Set Y-axis maximum to approximately 10-15% above the highest point on the chart
- For different time periods, use appropriate X-axis labels:
  * 1D: Show hours (6:00, 10:00, 14:00, etc.)
  * 5D: Show days of week (Mon, Tue, Wed, etc.)
  * 1M: Show dates within the month (1/5, 1/10, 1/15, etc.)
  * 6M: Show months (Jan, Feb, Mar, etc.)
  * 1Y: Show quarters or months (Q1, Q2, Q3, etc. or Jan, Apr, Jul, Oct)
  * 5Y: Show years (2020, 2021, 2022, etc.)
- Current price should always be the rightmost point on the chart
- Chart pattern should generally align with the momentum rating:
  * Strong momentum: Upward trending chart
  * Fair momentum: Relatively flat or slightly upward
  * Weak momentum: Downward trending chart

#### 7. Additional UI Guidelines

- Add subtle animations when the popup appears (fade in, slight scale up)
- Include icons for each section (+ for How It's Calculated, ↑ for Industry Comparison, ○ for What It Means)
- Add a small footer note: "These metrics are based on both historical data and forward-looking indicators. They should be used as one of many tools in your investment decision-making."
- Add hover effects to the buttons to improve user feedback
- Make sure text is readable with sufficient contrast against the background

This approach ensures consistent, educational, and visually appealing metric explanations that vary appropriately between different stocks while maintaining logical connections between the ratings and the underlying numerical values.

================
File: attached_assets/Pasted-I-understand-you-want-me-to-provide-guidance-for-the-Replit-agent-in-a-pseudo-code-format-rather-tha-1742789343142.txt
================
I understand you want me to provide guidance for the Replit agent in a pseudo-code format rather than actual hard-coded data. Here's the information in plain language that you can share with the Replit agent:

### Guidance for Replit Agent on Stock Metric Popups

#### Popup Structure
Create modals for each metric (Performance, Stability, Value, Momentum) that appear when clicking on a metric button. Each popup should have:

1. A header with metric name and close button (X)
2. Three main sections:
   - How It's Calculated
   - Industry Comparison
   - What It Means
3. A footer with disclaimer text

#### Side-by-Side Comparison Format
For each specific metric component, show the stock's value alongside the industry average in the same line:
```
Revenue Growth: 24% (Industry: 12%)
```
Consider adding color-coded boxes around the values:
- Green background for values significantly better than industry average
- Yellow/neutral for values close to industry average
- Red/orange for values worse than industry average

#### Stock Categories and Industry Averages

**Tech Titans Industry Averages:**
- Revenue Growth: 12%
- Profit Margin: 22%
- Return on Capital: 14%
- Volatility: 1.0
- Beta: 1.1
- Dividend Consistency: Medium
- P/E Ratio: 22.0
- P/B Ratio: 3.5
- Dividend Yield: 0.9%
- 3-Month Return: 4.5%
- Relative Performance: 1.8%
- RSI: 55

**Green Giants Industry Averages:**
- Revenue Growth: 8%
- Profit Margin: 18%
- Return on Capital: 12%
- Volatility: 0.9
- Beta: 0.9
- Dividend Consistency: Medium
- P/E Ratio: 18.0
- P/B Ratio: 2.8
- Dividend Yield: 1.5%
- 3-Month Return: 3.8%
- Relative Performance: 1.2%
- RSI: 53

**Property Players Industry Averages:**
- Revenue Growth: 6%
- Profit Margin: 15%
- Return on Capital: 9%
- Volatility: 0.8
- Beta: 0.8
- Dividend Consistency: High
- P/E Ratio: 16.0
- P/B Ratio: 1.8
- Dividend Yield: 3.0%
- 3-Month Return: 2.5%
- Relative Performance: 0.5%
- RSI: 52

**Med-Tech Innovators Industry Averages:**
- Revenue Growth: 15%
- Profit Margin: 20%
- Return on Capital: 13%
- Volatility: 1.2
- Beta: 1.15
- Dividend Consistency: Low
- P/E Ratio: 25.0
- P/B Ratio: 4.0
- Dividend Yield: 0.6%
- 3-Month Return: 5.0%
- Relative Performance: 2.0%
- RSI: 58

**Retail Champions Industry Averages:**
- Revenue Growth: 5%
- Profit Margin: 12%
- Return on Capital: 11%
- Volatility: 0.95
- Beta: 0.9
- Dividend Consistency: Medium
- P/E Ratio: 19.0
- P/B Ratio: 2.5
- Dividend Yield: 1.8%
- 3-Month Return: 3.0%
- Relative Performance: 1.0%
- RSI: 54

#### Metric Rating Rules

When creating stock data, use these guidelines to ensure ratings match the specific metric values:

**Performance Rating Rules:**
- High: Revenue Growth > industry avg+5%, Profit Margin > industry avg+5%, Return on Capital > industry avg+3%
- Fair: Within ±5% of industry avg for Revenue Growth and Profit Margin, and ±3% for Return on Capital
- Low: Revenue Growth < industry avg-5%, Profit Margin < industry avg-5%, Return on Capital < industry avg-3%

**Stability Rating Rules:**
- High: Volatility < industry avg-0.1, Beta between 0.8-1.1, Dividend Consistency same or better than industry
- Fair: Volatility within ±0.1 of industry avg, Beta within ±0.2 of industry avg, Dividend Consistency same as industry
- Unstable: Volatility > industry avg+0.1, Beta < 0.7 or > 1.3, Dividend Consistency worse than industry

**Value Rating Rules:**
- High: P/E Ratio < industry avg-2.0, P/B Ratio < industry avg-0.5, Dividend Yield > industry avg+0.5%
- Fair: P/E Ratio within ±2.0 of industry avg, P/B Ratio within ±0.5 of industry avg, Dividend Yield within ±0.5% of industry avg
- Low: P/E Ratio > industry avg+2.0, P/B Ratio > industry avg+0.5, Dividend Yield < industry avg-0.5%

**Momentum Rating Rules:**
- Strong: 3-Month Return > industry avg+2%, Relative Performance > industry avg+1%, RSI between 55-70
- Fair: 3-Month Return within ±2% of industry avg, Relative Performance within ±1% of industry avg, RSI between 45-55
- Weak: 3-Month Return < industry avg-2%, Relative Performance < industry avg-1%, RSI < 45 or > 70

#### Sample Explanation Templates

**Performance Explanation Templates:**
- High: "Based on revenue growth of [X]% (Industry: [Y]%), profit margins of [X]% (Industry: [Y]%), and return on invested capital of [X]% (Industry: [Y]%) over the past 3 years. This company's performance metrics rank in the top quartile of its industry peers, showing exceptional operational execution. Strong performance indicates the company is effectively growing revenue while maintaining healthy margins and efficient capital use."
- Fair: "Based on revenue growth of [X]% (Industry: [Y]%), profit margins of [X]% (Industry: [Y]%), and return on invested capital of [X]% (Industry: [Y]%) over the past 3 years. This company's performance metrics are in line with industry averages, showing competent operational execution. Fair performance suggests the company is growing steadily but may have opportunities to improve efficiency or scale."
- Low: "Based on revenue growth of [X]% (Industry: [Y]%), profit margins of [X]% (Industry: [Y]%), and return on invested capital of [X]% (Industry: [Y]%) over the past 3 years. This company's performance metrics fall below industry benchmarks, indicating challenges in execution. Low performance suggests the company is facing headwinds in growing revenue or maintaining profitability compared to peers."

**Stability Explanation Templates:**
(Follow similar pattern for High, Fair, and Unstable)

**Value Explanation Templates:**
(Follow similar pattern for High, Fair, and Low)

**Momentum Explanation Templates:**
(Follow similar pattern for Strong, Fair, and Weak)

#### Chart Visualization Parameters

For each timeframe, ensure appropriate Y-axis scaling:
- Set Y-min to approximately current price minus 10-15%
- Set Y-max to approximately current price plus 10-15%
- Ensure current price is the rightmost point on all charts

For X-axis labels:
- 1D: Hours (6:00, 10:00, 14:00, 18:00, 22:00)
- 5D: Days of week (Mon, Tue, Wed, Thu, Fri)
- 1M: Weekly dates (5/1, 5/8, 5/15, 5/22)
- 6M: Months (Jan, Feb, Mar, Apr, May, Jun)
- 1Y: Months or quarters (Q1, Q2, Q3, Q4)
- 5Y: Years (2020, 2021, 2022, 2023, 2024)

Chart pattern should align with momentum rating:
- Strong momentum: Generally upward trend (ending 5-10% higher than start)
- Fair momentum: Relatively flat with small fluctuations (±3-5% range)
- Weak momentum: Generally downward trend (ending 5-10% lower than start)

#### Implementation Approach

1. Create a data structure for each stock category (10 stocks per category)
2. For each stock, generate specific metrics that align with the rating rules above
3. Implement the popup UI with the side-by-side comparison format
4. Ensure chart data is consistent with stock metrics and follows visualization parameters
5. Add event listeners to metric buttons to show the appropriate popup
6. Implement close button functionality for popups

This approach allows for consistent, educational metric explanations while maintaining logical connections between ratings and underlying values.

================
File: attached_assets/Pasted-import-React-useState-from-react-const-VerticalStockComparison-const-showFu-1743124882307.txt
================
import React, { useState } from 'react';

const VerticalStockComparison = () => {
  const [showFullComparison, setShowFullComparison] = useState(false);
  const [selectedCompetitor, setSelectedCompetitor] = useState('MSFT');
  
  // Sample data
  const mainStock = {
    symbol: 'AAPL',
    name: 'Apple',
    type: 'Anchor Stock',
    logo: '/api/placeholder/30/30',
    color: '#4CD964', // iOS Green
    ratings: {
      Performance: 85,
      Stability: 80,
      Value: 65,
      Momentum: 75,
      Dividend: 40
    }
  };
  
  const competitors = {
    'MSFT': {
      symbol: 'MSFT',
      name: 'Microsoft',
      type: 'Anchor Stock',
      logo: '/api/placeholder/30/30',
      color: '#5856D6', // iOS Purple
      ratings: {
        Performance: 80,
        Stability: 85,
        Value: 60,
        Momentum: 70,
        Dividend: 45
      }
    },
    'GOOGL': {
      symbol: 'GOOGL',
      name: 'Alphabet',
      type: 'Anchor Stock',
      logo: '/api/placeholder/30/30',
      color: '#5856D6', // iOS Purple
      ratings: {
        Performance: 75,
        Stability: 75,
        Value: 70,
        Momentum: 65,
        Dividend: 0
      }
    }
  };
  
  const benchmarks = {
    Industry: {
      ratings: {
        Performance: 75,
        Stability: 70,
        Value: 60,
        Momentum: 65,
        Dividend: 30
      }
    },
    Market: {
      ratings: {
        Performance: 60,
        Stability: 65,
        Value: 55,
        Momentum: 60,
        Dividend: 35
      }
    }
  };
  
  // Get current competitor
  const competitor = competitors[selectedCompetitor];
  
  // Toggle full comparison
  const toggleFullComparison = () => {
    setShowFullComparison(!showFullComparison);
  };

  return (
    <div className="bg-white rounded-lg shadow p-4 max-w-md mx-auto">
      {/* Header section */}
      <div className="flex justify-between items-start mb-3">
        <div>
          {/* Main stock info */}
          <div className="flex items-center mb-2">
            <div className="w-8 h-8 bg-gray-200 rounded mr-2"></div>
            <div>
              <div className="font-bold text-lg">{mainStock.symbol}</div>
              <div className="text-xs text-gray-600">{mainStock.type}</div>
            </div>
          </div>
          
          {/* Competitor stock info */}
          <div className="flex items-center">
            <div className="w-8 h-8 bg-gray-200 rounded mr-2"></div>
            <div>
              <div className="font-bold text-lg">{competitor.symbol}</div>
              <div className="text-xs text-gray-600">{competitor.type}</div>
            </div>
          </div>
        </div>
        
        <div className="text-right">
          <div className="mb-2">
            <div className="text-sm text-gray-600">Compare with:</div>
            <select 
              className="border border-gray-300 rounded p-1 text-sm"
              value={selectedCompetitor}
              onChange={(e) => setSelectedCompetitor(e.target.value)}
            >
              {Object.keys(competitors).map(symbol => (
                <option key={symbol} value={symbol}>{symbol}</option>
              ))}
            </select>
          </div>
          
          <button 
            className="text-blue-600 font-medium text-sm flex items-center ml-auto"
            onClick={toggleFullComparison}
          >
            {showFullComparison ? 'Hide All' : 'View All'}
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
              {showFullComparison 
                ? <path fillRule="evenodd" d="M5 10a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1z" clipRule="evenodd" />
                : <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
              }
            </svg>
          </button>
        </div>
      </div>
      
      {/* Legend */}
      <div className="flex justify-end mb-3 text-xs text-gray-600">
        <div className="flex items-center mr-4">
          <div className="w-2 h-2 rounded-full bg-gray-700 mr-1"></div>
          <span>Industry</span>
        </div>
        <div className="flex items-center">
          <div className="w-2 h-2 rounded-full bg-gray-400 mr-1"></div>
          <span>Market</span>
        </div>
      </div>
      
      {/* Metric comparisons - vertical layout */}
      {Object.keys(mainStock.ratings).map(metric => {
        const mainValue = mainStock.ratings[metric];
        const compValue = competitor.ratings[metric];
        const industryValue = benchmarks.Industry.ratings[metric];
        const marketValue = benchmarks.Market.ratings[metric];
        
        const mainHigher = mainValue > compValue;
        const compHigher = compValue > mainValue;
        
        return (
          <div key={metric} className="mb-6">
            <div className="font-medium text-gray-700 mb-2">{metric}</div>
            
            {/* Main stock bar */}
            <div className="mb-4">
              <div className="h-8 bg-gray-100 rounded-full relative">
                <div 
                  className="h-full rounded-full"
                  style={{ 
                    width: `${mainValue}%`, 
                    backgroundColor: mainStock.color
                  }}
                ></div>
                
                {/* Industry marker */}
                <div 
                  className="absolute h-full w-1 bg-gray-700 z-10" 
                  style={{ left: `${industryValue}%` }}
                ></div>
                
                {/* Market marker */}
                <div 
                  className="absolute h-full w-1 bg-gray-400 z-10" 
                  style={{ left: `${marketValue}%` }}
                ></div>
                
                {/* Value label */}
                <div className={`absolute left-0 -bottom-6 font-medium ${mainHigher ? 'text-green-600' : 'text-gray-700'}`}>
                  {mainValue}
                </div>
                
                {/* Symbol indicator */}
                <div 
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-xs font-bold text-white"
                >
                  {mainStock.symbol}
                </div>
              </div>
            </div>
            
            {/* Competitor stock bar */}
            <div>
              <div className="h-8 bg-gray-100 rounded-full relative">
                <div 
                  className="h-full rounded-full"
                  style={{ 
                    width: `${compValue}%`, 
                    backgroundColor: competitor.color
                  }}
                ></div>
                
                {/* Industry marker */}
                <div 
                  className="absolute h-full w-1 bg-gray-700 z-10" 
                  style={{ left: `${industryValue}%` }}
                ></div>
                
                {/* Market marker */}
                <div 
                  className="absolute h-full w-1 bg-gray-400 z-10" 
                  style={{ left: `${marketValue}%` }}
                ></div>
                
                {/* Value label */}
                <div className={`absolute left-0 -bottom-6 font-medium ${compHigher ? 'text-indigo-600' : 'text-gray-700'}`}>
                  {compValue}
                </div>
                
                {/* Symbol indicator */}
                <div 
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-xs font-bold text-white"
                >
                  {competitor.symbol}
                </div>
              </div>
            </div>
          </div>
        );
      })}
      
      {/* Color legend */}
      <div className="flex justify-center my-4 text-sm">
        <div className="flex items-center mr-6">
          <div className="w-3 h-3 rounded-full mr-1" style={{ backgroundColor: mainStock.color }}></div>
          <span>{mainStock.symbol}</span>
        </div>
        <div className="flex items-center">
          <div className="w-3 h-3 rounded-full mr-1" style={{ backgroundColor: competitor.color }}></div>
          <span>{competitor.symbol}</span>
        </div>
      </div>
      
      {/* Full comparison table */}
      {showFullComparison && (
        <div className="mt-4 border-t pt-4">
          <div className="flex justify-between items-center mb-3">
            <div className="font-bold text-gray-800">Full Comparison</div>
            <button 
              className="text-gray-500 hover:text-gray-700"
              onClick={toggleFullComparison}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
              </svg>
            </button>
          </div>
          
          <table className="w-full text-sm">
            <thead>
              <tr>
                <th className="text-left pb-2">Metrics</th>
                <th className="text-center pb-2 font-medium" style={{ color: mainStock.color }}>{mainStock.symbol}</th>
                <th className="text-center pb-2 font-medium" style={{ color: competitor.color }}>{competitor.symbol}</th>
                <th className="text-center pb-2 font-medium text-gray-700">Industry</th>
                <th className="text-center pb-2 font-medium text-gray-500">Market</th>
              </tr>
            </thead>
            <tbody>
              {Object.keys(mainStock.ratings).map(metric => {
                const mainValue = mainStock.ratings[metric];
                const compValue = competitor.ratings[metric];
                const industryValue = benchmarks.Industry.ratings[metric];
                const marketValue = benchmarks.Market.ratings[metric];
                
                const values = [mainValue, compValue, industryValue, marketValue];
                const maxValue = Math.max(...values);
                
                return (
                  <tr key={metric} className="border-t">
                    <td className="py-2 font-medium text-gray-700">{metric}</td>
                    <td className={`text-center py-2 ${mainValue === maxValue ? 'font-bold' : ''}`} style={{ color: mainValue === maxValue ? mainStock.color : 'inherit' }}>
                      {mainValue}
                    </td>
                    <td className={`text-center py-2 ${compValue === maxValue ? 'font-bold' : ''}`} style={{ color: compValue === maxValue ? competitor.color : 'inherit' }}>
                      {compValue}
                    </td>
                    <td className={`text-center py-2 ${industryValue === maxValue ? 'font-bold' : ''}`}>
                      {industryValue}
                    </td>
                    <td className={`text-center py-2 ${marketValue === maxValue ? 'font-bold' : ''}`}>
                      {marketValue}
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
          
          <div className="text-xs text-gray-500 mt-3">
            Higher numbers indicate better performance in each category. Bold values represent the highest score.
          </div>
        </div>
      )}
    </div>
  );
};

export default VerticalStockComparison;

================
File: attached_assets/Pasted-Issue-with-Score-Calculation-Logic-The-current-calculation-method-is-inconsistent-with-how-financial-1742942206320.txt
================
Issue with Score Calculation Logic
The current calculation method is inconsistent with how financial metrics should be normalized across different industries. Here's what's wrong and how to fix it:
The Problem
When calculating scores for each metric (Performance, Value, Momentum, Stability), the code is not properly normalizing values before multiplication. Specifically:

For Stock-to-Industry comparisons, we need to:

Calculate the ratio of stock metric to industry average
Cap this ratio at 100% (1.0) to prevent extremely high values from skewing results
For "lower is better" metrics (like P/E ratio), invert the ratio so higher scores still mean better performance


For Industry-to-Market comparisons, we need to:

Calculate the ratio of industry average to market average
Optionally cap this ratio at 100% (1.0) depending on your preference
For "lower is better" metrics, invert this ratio as well


In the current code, the capping happens too late, after multiplying uncapped values, which leads to inflated scores.

The Fix
For each metric calculation function (Performance, Value, Stability, Momentum):

First calculate the Stock/Industry ratios for each sub-metric
Immediately cap each ratio at 1.0 (100%) using Math.min(1, ratio)
Calculate the Industry/Market ratios for each sub-metric
Cap these ratios if desired (depending on whether you want industry expertise to be rewarded above 100%)
Apply the weighting formula with these properly capped ratios
Sum up the contributions to get the final score

Example for Performance Score
For Prologis (PLD):

Revenue Growth: Cap (2.2/5.0) at 1.0 → 0.44, then multiply by cap(5.0/7.0) → 0.71
Profit Margin: Cap (45.4/25.0) at 1.0 → 1.0, then multiply by cap(25.0/12.0) → 1.0
Return on Capital: Cap (4.3/4.5) at 1.0 → 0.956, then multiply by cap(4.5/12.0) → 0.375

Final formula:
(0.4×0.44×0.71) + (0.3×1.0×1.0) + (0.3×0.956×0.375) = 0.53, or 53%
This approach should be consistently applied to all four metric categories:

Performance (Revenue Growth, Profit Margin, ROC)
Value (P/E Ratio, P/B Ratio, Dividend Yield)
Momentum (3-Month Return, RSI)
Stability (Volatility, Beta, Dividend Consistency)

================
File: attached_assets/Pasted-Looking-at-the-code-I-found-the-issue-When-you-tried-to-fix-the-swipe-directions-you-accidentally-1742967942476.txt
================
Looking at the code, I found the issue. When you tried to fix the swipe directions, you accidentally created duplicate and conflicting logic. Let me provide the fixed code for the handleDragEnd function:
javascriptCopy// Enhanced drag handler with smoother transitions and feedback
const handleDragEnd = (event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {
  const threshold = 100;
  console.log("Drag offset:", info.offset.x); // Keep this for debugging

  // Left swipe - Show skipped message and go to next card
  if (info.offset.x < -threshold) {
    setSwipeDirection("left");
    // Haptic feedback if available
    if (navigator.vibrate) {
      navigator.vibrate(30);
    }
    // Show skipped message
    setShowSkippedMessage(true);
    
    // Smoother exit animation
    cardControls.start({
      x: -500,
      opacity: 0,
      scale: 0.9,
      transition: { 
        type: "tween", 
        ease: "easeInOut",
        duration: 0.4 
      }
    }).then(() => {
      onNext();
      // Reset after animation
      setTimeout(() => {
        setShowSkippedMessage(false);
        cardControls.set({ x: 0, opacity: 1, scale: 1 });
        setSwipeDirection(null);
      }, 100);
    });
  }
  // Right swipe - Open portfolio impact calculator
  else if (info.offset.x > threshold) {
    setSwipeDirection("right");
    // Haptic feedback if available
    if (navigator.vibrate) {
      navigator.vibrate(50);
    }
    // Open portfolio calculator
    setIsPortfolioImpactOpen(true);
    // Spring back with smoother animation
    cardControls.start({
      x: 0,
      opacity: 1,
      scale: 1,
      transition: { 
        type: "spring", 
        stiffness: 400, 
        damping: 30,
        duration: 0.4
      }
    });
    setSwipeDirection(null);
  } 
  // Not enough drag - Spring back
  else {
    cardControls.start({
      x: 0,
      opacity: 1,
      scale: 1,
      transition: { 
        type: "spring", 
        stiffness: 500, 
        damping: 30,
        duration: 0.3
      }
    });
    setSwipeDirection(null);
  }
};

================
File: attached_assets/Pasted-Name-1-year-return-Predict-Price-Prologis-PLD-13-27-128-79-Realty-Income-Corp-O-7-88-62-0-1742889296493.txt
================
Name	1 year return	Predict Price
Prologis (PLD)	-13.27%	$128.79
Realty Income Corp (O)	7.88%	$62.04
Simon Property Group (SPG)	9.97%	$180.33
AvalonBay Communities (AVB)	17.77%	$238.64
Public Storage (PSA)	6.94%	$338
Digital Realty Trust (DLR)	12.81%	$179.95
American Tower Corp (AMT)	8.82%	$229.43
Welltower Inc (WELL)	64.17%	$156.46
Boston Properties (BXP)	10.48%	$80.85
Equity Residential (EQR)	15.98%	$78.51

================
File: attached_assets/Pasted-Okay-let-s-figure-out-why-the-profile-picture-isn-t-updating-on-the-home-page-Based-on-the-code--1743190746108.txt
================
Okay, let's figure out why the profile picture isn't updating on the home page.

Based on the code, particularly the ModernUserWelcome component, here's the most likely explanation:   

Image Path: The component tries to load the image using the path <img src="/belford-avatar.png" ... />. This path tells the browser to look for the image directly at the root of your website (e.g., your-app-url.com/belford-avatar.png).   
File Location Expectation: In a Vite project structure like yours, files served directly from the root path (/) usually need to reside in the public directory within your client's root folder. Given your configuration, this would likely be client/public/.    
onError Hides the Problem: The ModernUserWelcome component has an onError handler attached to the image tag. If the browser fails to load the image at /belford-avatar.png (likely because it's not in the client/public directory and therefore doesn't exist at that URL), this error handler runs and hides the image element (target.style.display = 'none';). This prevents a broken image icon but makes it seem like the image simply isn't being rendered.   
Deployment Logs: Seeing calls in the deployment logs might just be the browser attempting to fetch /belford-avatar.png. If these requests are resulting in a 404 (Not Found) error, it confirms the file isn't being served from the expected location.
How to Fix:

Check File Location: Verify where you have placed the belford-avatar.png file within your project structure.
Move the File: Ensure that belford-avatar.png is located inside the client/public directory. If it's somewhere else (like client/src/assets), move it to client/public/.
Rebuild & Redeploy: After confirming the file is in client/public/, you'll need to rebuild your client application (npm run build) and redeploy it. This ensures the image file is copied correctly into the final dist/public directory  that gets served to users.   
Once the image is in the correct public directory and the application is redeployed, the path /belford-avatar.png should work, the onError handler won't trigger, and the image should display correctly in the ModernUserWelcome component.   


Sources and related content

================
File: attached_assets/Pasted-Overview-The-Portfolio-Impact-Calculator-will-show-users-how-adding-a-new-stock-affects-their-existi-1742890645314.txt
================
Overview
The Portfolio Impact Calculator will show users how adding a new stock affects their existing portfolio across key financial metrics. This interactive tool allows users to visualize changes before making investment decisions.
Data Sources

Use existing stock metrics from the StockData interface (performance, stability, value, momentum)
Use current portfolio composition (stocks, allocation percentages, total value)

Step-by-Step Calculation Process
1. Initial Setup

When a user swipes right on a stock, capture the stock's metrics
Retrieve the user's current portfolio composition
Set a default allocation of 5% of total portfolio value for the new stock

2. Convert String Values to Numeric Scores

For each metric with string values (like "Strong", "Good", "Fair", "Poor"):

Strong/High = 90
Good = 70
Average/Fair = 50
Weak/Poor/Unstable = 30



3. Calculate Sub-Metric Scores
For each of the four main categories, calculate a weighted score:
Value Score (0-100)

P/E Ratio (50%): Lower is better

Score = 100 - (Stock P/E / Industry Avg P/E) * 50
Cap between 0-100


P/B Ratio (30%): Lower is better

Score = 100 - (Stock P/B / Industry Avg P/B) * 50
Cap between 0-100


Dividend Yield (20%): Higher is better

Score = (Stock Yield / Industry Avg Yield) * 100
Cap between 0-100



Growth Score (0-100)

Revenue Growth (40%): Higher is better

Score = (Stock Growth / Industry Avg Growth) * 100
Cap between 0-100


Profit Margin (30%): Higher is better

Score = (Stock Margin / Industry Avg Margin) * 100
Cap between 0-100


Return on Capital (30%): Higher is better

Score = (Stock ROC / Industry Avg ROC) * 100
Cap between 0-100



Momentum Score (0-100)

3-Month Return (50%): Higher is better

Score = (Stock Return / Industry Avg Return) * 100
Cap between 0-100


Relative Performance (30%): Higher is better

Score = 50 + (Stock Relative Perf * 5)
Cap between 0-100


RSI (20%): Closer to 50 is better

Score = 100 - (Math.abs(50 - Stock RSI) * 2)
Cap between 0-100



Stability Score (0-100)

Volatility (50%): Lower is better

Score = 100 - (Stock Volatility / Industry Avg Volatility) * 50
Cap between 0-100


Beta (30%): Closer to 1 is better

Score = 100 - (Math.abs(1 - Stock Beta) * 50)
Cap between 0-100


Dividend Consistency (20%): Based on string value

"High"/"Good" = 90
"Medium" = 60
"Poor"/"Low" = 30
"N/A" = 0



4. Calculate Current Portfolio Metrics
For each of the four main categories:
javascriptCopylet currentPortfolioScore = 0;
let totalWeight = 0;

portfolio.stocks.forEach(stock => {
  const weight = stock.value / portfolio.totalValue;
  currentPortfolioScore += weight * stock.metricScore;
  totalWeight += weight;
});

// Normalize in case weights don't add up to 1
currentPortfolioScore = currentPortfolioScore / totalWeight;
5. Calculate New Portfolio Metrics
For each of the four main categories:
javascriptCopyconst newStockAllocation = newStock.allocationValue;
const newTotalValue = portfolio.totalValue + newStockAllocation;
const newWeight = newStockAllocation / newTotalValue;
const existingWeight = portfolio.totalValue / newTotalValue;

const newPortfolioScore = (currentPortfolioScore * existingWeight) + 
                          (newStock.metricScore * newWeight);
6. Calculate Impact
For each metric, calculate the difference:
javascriptCopyconst impact = newPortfolioScore - currentPortfolioScore;
Interactive Elements
1. Allocation Slider

Allow users to adjust allocation from 1% to 25% of portfolio value
Recalculate impacts in real-time as slider changes

2. Visual Elements

Show before/after scores for each category
Use directional arrows (↑/↓) to indicate improvement or deterioration
Color-code changes (green for improvement, red for deterioration)
Show percentage change for each category

3. Summary Panel

Overall impact description
Portfolio balance assessment
Suggested optimal allocation (if different from selected)

================
File: attached_assets/Pasted-Overview-The-Portfolio-Impact-Calculator-will-show-users-how-adding-a-new-stock-affects-their-existi-1742891988601.txt
================
Overview
The Portfolio Impact Calculator will show users how adding a new stock affects their existing portfolio across key financial metrics. This interactive tool allows users to visualize changes before making investment decisions.
Data Sources

Use existing stock metrics from the StockData interface (performance, stability, value, momentum)
Use current portfolio composition (stocks, allocation percentages, total value)

Step-by-Step Calculation Process
1. Initial Setup

When a user swipes right on a stock, capture the stock's metrics
Retrieve the user's current portfolio composition
Set a default allocation of 5% of total portfolio value for the new stock

2. Convert String Values to Numeric Scores

For each metric with string values (like "Strong", "Good", "Fair", "Poor"):

Strong/High = 90
Good = 70
Average/Fair = 50
Weak/Poor/Unstable = 30



3. Calculate Sub-Metric Scores
For each of the four main categories, calculate a weighted score:
Value Score (0-100)

P/E Ratio (50%): Lower is better

Score = 100 - (Stock P/E / Industry Avg P/E) * 50
Cap between 0-100


P/B Ratio (30%): Lower is better

Score = 100 - (Stock P/B / Industry Avg P/B) * 50
Cap between 0-100


Dividend Yield (20%): Higher is better

Score = (Stock Yield / Industry Avg Yield) * 100
Cap between 0-100



Growth Score (0-100)

Revenue Growth (40%): Higher is better

Score = (Stock Growth / Industry Avg Growth) * 100
Cap between 0-100


Profit Margin (30%): Higher is better

Score = (Stock Margin / Industry Avg Margin) * 100
Cap between 0-100


Return on Capital (30%): Higher is better

Score = (Stock ROC / Industry Avg ROC) * 100
Cap between 0-100



Momentum Score (0-100)

3-Month Return (50%): Higher is better

Score = (Stock Return / Industry Avg Return) * 100
Cap between 0-100


Relative Performance (30%): Higher is better

Score = 50 + (Stock Relative Perf * 5)
Cap between 0-100


RSI (20%): Closer to 50 is better

Score = 100 - (Math.abs(50 - Stock RSI) * 2)
Cap between 0-100



Stability Score (0-100)

Volatility (50%): Lower is better

Score = 100 - (Stock Volatility / Industry Avg Volatility) * 50
Cap between 0-100


Beta (30%): Closer to 1 is better

Score = 100 - (Math.abs(1 - Stock Beta) * 50)
Cap between 0-100


Dividend Consistency (20%): Based on string value

"High"/"Good" = 90
"Medium" = 60
"Poor"/"Low" = 30
"N/A" = 0



4. Calculate Current Portfolio Metrics
For each of the four main categories:
javascriptCopylet currentPortfolioScore = 0;
let totalWeight = 0;

portfolio.stocks.forEach(stock => {
  const weight = stock.value / portfolio.totalValue;
  currentPortfolioScore += weight * stock.metricScore;
  totalWeight += weight;
});

// Normalize in case weights don't add up to 1
currentPortfolioScore = currentPortfolioScore / totalWeight;
5. Calculate New Portfolio Metrics
For each of the four main categories:
javascriptCopyconst newStockAllocation = newStock.allocationValue;
const newTotalValue = portfolio.totalValue + newStockAllocation;
const newWeight = newStockAllocation / newTotalValue;
const existingWeight = portfolio.totalValue / newTotalValue;

const newPortfolioScore = (currentPortfolioScore * existingWeight) + 
                          (newStock.metricScore * newWeight);
6. Calculate Impact
For each metric, calculate the difference:
javascriptCopyconst impact = newPortfolioScore - currentPortfolioScore;
Interactive Elements
1. Allocation Slider

Allow users to adjust allocation from 1% to 25% of portfolio value
Recalculate impacts in real-time as slider changes

2. Visual Elements

Show before/after scores for each category
Use directional arrows (↑/↓) to indicate improvement or deterioration
Color-code changes (green for improvement, red for deterioration)
Show percentage change for each category

3. Summary Panel

Overall impact description
Portfolio balance assessment
Suggested optimal allocation (if different from selected)

================
File: attached_assets/Pasted-Prologis-Inc-PLD-Overall-Analysis-A-high-quality-logistics-REIT-benefiting-from-e-commerce-grow-1742802381328.txt
================
Prologis Inc. (PLD) - Overall Analysis
A high-quality logistics REIT benefiting from e-commerce growth with strong performance and stability. Offers a balanced opportunity with above-average growth, defensive characteristics, and reliable income.
American Tower Corp. (AMT) - Overall Analysis
Essential wireless infrastructure provider with defensive characteristics and consistent income from long-term leases. Benefits from increasing data consumption and 5G expansion for continued stable growth.
Simon Property Group (SPG) - Overall Analysis
Premium mall operator offering high income yield and value despite retail headwinds. Has shown resilience by transforming properties to maintain relevance in the evolving retail landscape.
Equinix Inc. (EQIX) - Overall Analysis
Growth-oriented data center REIT with strong performance and lower volatility than tech stocks. Unique interconnection business model creates defensible competitive advantages while benefiting from AI and cloud computing demand.
Public Storage (PSA) - Overall Analysis
Exceptionally stable self-storage REIT with above-average income and minimal economic sensitivity. Low operating costs and flexible pricing power create consistent performance across market cycles.
Realty Income Corp. (O) - Overall Analysis
Monthly dividend payer offering unmatched income reliability with triple-net leases that create highly predictable cash flows. Ideal for income-focused investors prioritizing consistent payments over maximum growth.
Digital Realty Trust (DLR) - Overall Analysis
Technology-focused REIT providing data center exposure with better growth than traditional real estate while maintaining income characteristics. Benefits from cloud computing, AI workloads, and growing digital infrastructure demands.
Welltower Inc. (WELL) - Overall Analysis
Healthcare REIT with strong demographic tailwinds from an aging population. Combines defensive characteristics and recession resistance with above-average growth potential in senior housing and medical facilities.
AvalonBay Communities (AVB) - Overall Analysis
Premium apartment REIT focused on supply-constrained coastal markets with persistent housing demand. Benefits from increasing affordability challenges that make renting necessary in high-cost metropolitan areas.
Crown Castle Inc. (CCI) - Overall Analysis
Communications infrastructure REIT with exceptional income yield despite current growth challenges. Heavy fiber network investments create near-term concerns but potential long-term value as 5G infrastructure demand increases.

================
File: attached_assets/Pasted-Prologis-Inc-PLD-Performance-Metrics-CopyRevenue-Growth-8-5-Industry-6-0-GREEN-What-it-m-1742797710209.txt
================
Prologis Inc. (PLD)
Performance Metrics:
CopyRevenue Growth: 8.5% (Industry: 6.0%) [GREEN]
What it means: Prologis is growing faster than the average real estate company, indicating strong demand for logistics properties driven by e-commerce expansion.

Profit Margin: 39.7% (Industry: 35.0%) [GREEN]
What it means: Higher profit margins suggest Prologis has stronger pricing power and operating efficiency than peers, creating more value from each dollar of revenue.

Return on Capital: 10.2% (Industry: 9.0%) [GREEN]
What it means: Prologis generates above-average returns on investments, indicating management efficiently allocates capital to high-performing properties.
Stability Metrics:
CopyVolatility: 0.75 (Industry: 0.8) [GREEN]
What it means: Lower volatility indicates Prologis experiences smaller price swings than typical real estate stocks, making it more predictable for investors.

Beta: 0.85 (Industry: 0.8) [YELLOW]
What it means: Slightly higher beta than the industry average, but still defensive, indicating Prologis tends to move less drastically than the broader market.

Dividend Consistency: High (Industry: High) [YELLOW]
What it means: Prologis maintains a reliable dividend payment history, providing dependable income for investors even during economic uncertainty.
Value Metrics:
CopyP/E Ratio: 17.8 (Industry: 16.0) [YELLOW]
What it means: Prologis trades at a slight premium to the average real estate company, reflecting the market's willingness to pay more for its quality and growth prospects.

P/B Ratio: 2.0 (Industry: 1.8) [YELLOW]
What it means: Trading at a modest premium to its book value compared to peers, suggesting investors see additional value in Prologis's brand and market position.

Dividend Yield: 3.2% (Industry: 3.0%) [GREEN]
What it means: Prologis offers a slightly higher income return than typical real estate stocks, making it attractive for income-focused investors.
Momentum Metrics:
Copy3-Month Return: 2.8% (Industry: 2.5%) [YELLOW]
What it means: Prologis has slightly outperformed the real estate sector over the past quarter, showing modest positive price momentum.

Relative Performance: 0.3% (Industry: 0.5%) [YELLOW]
What it means: Slightly underperforming when compared directly to benchmark indices, but not significantly lagging the broader market.

RSI: 52 (Industry: 52) [YELLOW]
What it means: Neutral momentum indicator showing the stock is neither oversold nor overbought compared to recent trading patterns.
American Tower Corp. (AMT)
Performance Metrics:
CopyRevenue Growth: 7.2% (Industry: 6.0%) [GREEN]
What it means: American Tower is growing faster than the typical real estate company, benefiting from the ongoing expansion of wireless networks and 5G rollout.

Profit Margin: 40.3% (Industry: 35.0%) [GREEN]
What it means: Exceptionally high margins reflect American Tower's efficient operating model and strong position in the cell tower market with minimal maintenance costs.

Return on Capital: 10.8% (Industry: 9.0%) [GREEN]
What it means: Above-average returns on invested capital highlight management's ability to identify and develop high-yield tower locations.
Stability Metrics:
CopyVolatility: 0.72 (Industry: 0.8) [GREEN]
What it means: American Tower experiences less price fluctuation than typical real estate companies, providing more predictable returns for investors.

Beta: 0.75 (Industry: 0.8) [GREEN]
What it means: Lower beta indicates American Tower is more defensive than most real estate stocks, offering better protection during market downturns.

Dividend Consistency: High (Industry: High) [YELLOW]
What it means: Demonstrates a strong commitment to returning capital to shareholders with reliable dividend increases over time.
Value Metrics:
CopyP/E Ratio: 18.2 (Industry: 16.0) [YELLOW]
What it means: Trading at a premium to the sector average, reflecting investors' willingness to pay more for American Tower's quality assets and recurring revenue model.

P/B Ratio: 2.1 (Industry: 1.8) [YELLOW]
What it means: Higher than average price-to-book ratio indicates the market values American Tower's infrastructure assets more highly than typical real estate.

Dividend Yield: 3.4% (Industry: 3.0%) [GREEN]
What it means: Offers an attractive income component above the industry average, appealing to income-focused investors seeking growth potential.
Momentum Metrics:
Copy3-Month Return: 1.8% (Industry: 2.5%) [YELLOW]
What it means: Slightly underperforming the real estate sector over the past quarter, showing modest weakness in recent price action.

Relative Performance: -0.2% (Industry: 0.5%) [RED]
What it means: Lagging behind benchmark indices, which may indicate investors are temporarily rotating away from communications infrastructure.

RSI: 49 (Industry: 52) [YELLOW]
What it means: Slightly lower RSI suggests the stock is approaching oversold territory compared to its recent trading range, potentially indicating a buying opportunity.
Simon Property Group (SPG)
Performance Metrics:
CopyRevenue Growth: 4.8% (Industry: 6.0%) [YELLOW]
What it means: Growing more slowly than the average real estate company, reflecting the challenges in the retail property sector but still showing positive momentum.

Profit Margin: 32.6% (Industry: 35.0%) [YELLOW]
What it means: Slightly lower margins than industry average, indicating some pressure on rental rates or higher operating costs in retail properties.

Return on Capital: 8.2% (Industry: 9.0%) [YELLOW]
What it means: Near but below average returns on investments, suggesting moderate efficiency in capital allocation despite retail sector headwinds.
Stability Metrics:
CopyVolatility: 0.95 (Industry: 0.8) [YELLOW]
What it means: Higher price fluctuations than the typical real estate stock, reflecting greater sensitivity to consumer spending and retail news.

Beta: 0.9 (Industry: 0.8) [YELLOW]
What it means: Slightly more reactive to market movements than most real estate companies, but still considered relatively defensive.

Dividend Consistency: Medium (Industry: High) [YELLOW]
What it means: Generally reliable but experienced a dividend cut during pandemic disruptions, indicating some vulnerability during extreme economic stress.
Value Metrics:
CopyP/E Ratio: 13.2 (Industry: 16.0) [GREEN]
What it means: Trading at a significant discount to peers, suggesting investor skepticism about retail real estate or offering potential value if mall performance improves.

P/B Ratio: 1.4 (Industry: 1.8) [GREEN]
What it means: Lower price relative to asset value than sector average, indicating potential undervaluation if premium mall locations maintain their relevance.

Dividend Yield: 5.2% (Industry: 3.0%) [GREEN]
What it means: Significantly higher income return than typical real estate stocks, compensating investors for perceived higher risk in retail properties.
Momentum Metrics:
Copy3-Month Return: 3.5% (Industry: 2.5%) [GREEN]
What it means: Outperforming the real estate sector over the recent quarter, showing improving sentiment toward quality retail properties.

Relative Performance: 1.0% (Industry: 0.5%) [GREEN]
What it means: Better performance compared to benchmark indices, suggesting a potential sector rotation into value-oriented real estate.

RSI: 54 (Industry: 52) [YELLOW]
What it means: Neutral momentum with slightly more buying pressure than the industry average, but not approaching overbought levels.
Equinix Inc. (EQIX)
Performance Metrics:
CopyRevenue Growth: 10.2% (Industry: 6.0%) [GREEN]
What it means: Growing significantly faster than typical real estate companies, reflecting strong demand for data center space driven by cloud computing and AI workloads.

Profit Margin: 38.5% (Industry: 35.0%) [GREEN]
What it means: Above-average profitability highlights Equinix's premium positioning and ability to command higher rates for its interconnection services.

Return on Capital: 11.5% (Industry: 9.0%) [GREEN]
What it means: Superior returns on invested capital demonstrate management's skill in developing and operating high-value data center assets.
Stability Metrics:
CopyVolatility: 0.7 (Industry: 0.8) [GREEN]
What it means: Lower price fluctuations than typical real estate stocks, reflecting the mission-critical nature of data centers and steady recurring revenue.

Beta: 0.78 (Industry: 0.8) [GREEN]
What it means: Less reactive to market movements than most real estate companies, offering better downside protection during market turbulence.

Dividend Consistency: High (Industry: High) [YELLOW]
What it means: Reliable dividend history with consistent increases, providing dependable income alongside growth potential.
Value Metrics:
CopyP/E Ratio: 19.8 (Industry: 16.0) [RED]
What it means: Premium valuation compared to traditional real estate, reflecting Equinix's technology exposure and higher expected growth rate.

P/B Ratio: 2.2 (Industry: 1.8) [YELLOW]
What it means: Trading above book value compared to peers, indicating the market places higher value on data center assets than traditional real estate.

Dividend Yield: 2.3% (Industry: 3.0%) [RED]
What it means: Lower income component than typical REITs, with investors accepting lower current yield in exchange for higher growth potential.
Momentum Metrics:
Copy3-Month Return: 5.8% (Industry: 2.5%) [GREEN]
What it means: Significantly outperforming the real estate sector recently, showing strong investor preference for digital infrastructure over traditional property.

Relative Performance: 3.3% (Industry: 0.5%) [GREEN]
What it means: Substantially outperforming benchmark indices, demonstrating Equinix's appeal as both a real estate and technology investment.

RSI: 58 (Industry: 52) [YELLOW]
What it means: Modestly stronger momentum than peers but not yet approaching overbought territory, suggesting continued buyer interest without excessive enthusiasm.
Public Storage (PSA)
Performance Metrics:
CopyRevenue Growth: 6.8% (Industry: 6.0%) [GREEN]
What it means: Growing slightly faster than the average real estate company, reflecting steady demand for self-storage facilities regardless of economic conditions.

Profit Margin: 41.2% (Industry: 35.0%) [GREEN]
What it means: Exceptionally high profit margins highlight the self-storage industry's attractive economics with low maintenance and staffing requirements.

Return on Capital: 9.8% (Industry: 9.0%) [GREEN]
What it means: Above-average returns on investments demonstrate efficient capital allocation and the relatively low cost of developing new storage facilities.
Stability Metrics:
CopyVolatility: 0.68 (Industry: 0.8) [GREEN]
What it means: Significantly lower price fluctuations than typical real estate stocks, making Public Storage one of the more stable options in the sector.

Beta: 0.72 (Industry: 0.8) [GREEN]
What it means: More defensive characteristics than most real estate companies, offering better protection during market downturns.

Dividend Consistency: High (Industry: High) [YELLOW]
What it means: Long history of reliable dividends, providing dependable income for shareholders through various economic cycles.
Value Metrics:
CopyP/E Ratio: 16.8 (Industry: 16.0) [YELLOW]
What it means: Trading at a slight premium to the sector average, reflecting Public Storage's quality and dominant market position.

P/B Ratio: 1.9 (Industry: 1.8) [YELLOW]
What it means: Slightly higher than average price-to-book ratio, indicating investors moderately value the company's assets above typical real estate.

Dividend Yield: 4.2% (Industry: 3.0%) [GREEN]
What it means: Substantially higher income return than typical real estate stocks, making it particularly attractive for income-focused investors.
Momentum Metrics:
Copy3-Month Return: 3.2% (Industry: 2.5%) [GREEN]
What it means: Modestly outperforming the real estate sector over the recent quarter, showing continued investor interest in self-storage assets.

Relative Performance: 0.7% (Industry: 0.5%) [GREEN]
What it means: Slightly better performance compared to benchmark indices, suggesting defensive positioning is currently favored.

RSI: 53 (Industry: 52) [YELLOW]
What it means: Neutral momentum very close to industry average, indicating balanced buying and

================
File: attached_assets/Pasted-Prologis-Inc-PLD-Performance-Metrics-Revenue-Growth-8-5-Industry-6-0-GREEN-What-This-M-1742802035370.txt
================
Prologis Inc. (PLD)

Performance Metrics:

Revenue Growth: 8.5% (Industry: 6.0%) [GREEN]
What This Means Overall: Prologis is growing its revenue faster than the average real estate company, indicating strong demand for its logistics properties.
Profit Margin: 39.7% (Industry: 35.0%) [GREEN]
What This Means Overall: Prologis is more profitable than its peers, suggesting efficient operations and strong pricing power.
Return on Capital: 10.2% (Industry: 9.0%) [GREEN]
What This Means Overall: Prologis generates higher returns on its investments, meaning it's effectively using its capital to generate profits.
What This Means Overall (Performance): Prologis demonstrates strong operational performance, with above-average growth, profitability, and efficient use of capital, indicating a healthy and well-managed company.
Stability Metrics:

Volatility: 0.75 (Industry: 0.8) [GREEN]
What This Means Overall: Prologis' stock price is less volatile than the industry average, indicating more stable and predictable returns.
Beta: 0.85 (Industry: 0.8) [YELLOW]
What This Means Overall: Prologis' stock moves slightly more than the overall real estate market, but is still relatively stable.
Dividend Consistency: High (Industry: High) [YELLOW]
What This Means Overall: Prologis has a reliable history of paying dividends, providing consistent income to investors.
What This Means Overall (Stability): Prologis offers relatively stable returns and consistent income, though its stock price is slightly more sensitive to market movements than the industry average.
Value Metrics:

P/E Ratio: 17.8 (Industry: 16.0) [YELLOW]
What This Means Overall: Prologis' stock is slightly more expensive compared to its earnings than the average real estate company, suggesting investors are willing to pay a premium.
P/B Ratio: 2.0 (Industry: 1.8) [YELLOW]
What This Means Overall: Prologis' stock is trading slightly above its book value, indicating investors see additional value beyond its tangible assets.
Dividend Yield: 3.2% (Industry: 3.0%) [GREEN]
What This Means Overall: Prologis offers a slightly higher dividend yield than the industry average, providing a better income stream for investors.
What This Means Overall (Value): Prologis' stock is valued at a slight premium, likely due to its strong performance, but it also offers a slightly higher dividend yield for investors.
Momentum Metrics:

3-Month Return: 2.8% (Industry: 2.5%) [YELLOW]
What This Means Overall: Prologis' stock has slightly outperformed the real estate sector in the past three months, showing positive short-term momentum.
Relative Performance: 0.3% (Industry: 0.5%) [YELLOW]
What This Means Overall: Prologis' stock has slightly underperformed benchmark indices, suggesting it's not leading the market but is still keeping pace.
RSI: 52 (Industry: 52) [YELLOW]
What This Means Overall: Prologis' stock is neither overbought nor oversold, indicating neutral momentum.
What This Means Overall (Momentum): Prologis shows slightly positive short-term momentum but is not significantly outperforming the broader market.
American Tower Corp. (AMT)

Performance Metrics:

Revenue Growth: 7.2% (Industry: 6.0%) [GREEN]
What This Means Overall: American Tower is growing its revenue faster than the industry average, indicating strong demand for its cell tower infrastructure.
Profit Margin: 40.3% (Industry: 35.0%) [GREEN]
What This Means Overall: American Tower is more profitable than its peers, suggesting efficient operations and strong pricing power.
Return on Capital: 10.8% (Industry: 9.0%) [GREEN]
What This Means Overall: American Tower generates higher returns on its investments, meaning it's effectively using its capital to generate profits.
What This Means Overall (Performance): American Tower exhibits strong performance with higher growth, profitability, and returns than the industry average, showcasing efficient operations and high demand.
Stability Metrics:

Volatility: 0.72 (Industry: 0.8) [GREEN]
What This Means Overall: American Tower's stock price is less volatile than the industry average, indicating more stable and predictable returns.
Beta: 0.75 (Industry: 0.8) [GREEN]
What This Means Overall: American Tower's stock moves less than the overall real estate market, indicating it's less sensitive to market fluctuations.
Dividend Consistency: High (Industry: High) [YELLOW]
What This Means Overall: American Tower has a reliable history of paying dividends, providing consistent income to investors.
What This Means Overall (Stability): American Tower offers strong stability with lower volatility and market sensitivity, providing reliable returns and income.
Value Metrics:

P/E Ratio: 18.2 (Industry: 16.0) [YELLOW]
What This Means Overall: American Tower's stock is more expensive compared to its earnings than the industry average, suggesting investors are willing to pay a premium for its quality and growth.
P/B Ratio: 2.1 (Industry: 1.8) [YELLOW]
What This Means Overall: American Tower's stock is trading above its book value, indicating investors see additional value beyond its tangible assets.
Dividend Yield: 3.4% (Industry: 3.0%) [GREEN]
What This Means Overall: American Tower offers a higher dividend yield than the industry average, providing a better income stream for investors.
What This Means Overall (Value): American Tower is valued at a premium due to its strong performance and growth potential, but it also offers a higher dividend yield for investors.
Momentum Metrics:

3-Month Return: 1.8% (Industry: 2.5%) [YELLOW]
What This Means Overall: American Tower's stock has slightly underperformed the real estate sector in the past three months, showing some short-term weakness.
Relative Performance: -0.2% (Industry: 0.5%) [RED]
What This Means Overall: American Tower's stock has underperformed benchmark indices, suggesting it's lagging behind the broader market.
RSI: 49 (Industry: 52) [YELLOW]
What This Means Overall: American Tower's stock is slightly oversold compared to its recent trading range, potentially indicating a buying opportunity.
What This Means Overall (Momentum): American Tower shows some short-term weakness compared to the sector and broader market, potentially indicating a buying opportunity based on technical indicators.

================
File: attached_assets/Pasted-Prologis-Performance-Rev-Growth-1-liner-Prologis-isn-t-making-much-more-money-than-last-year-gro-1743054850571.txt
================
Prologis
Performance
Rev Growth 1 liner: Prologis isn’t making much more money than last year– growth is slow.
Profit Margin 1 liner: Prologis keeps a good chunk of the money it makes after costs.
Return on capital 1 liner: Prologis doesn’t make a lot back from the money it has reinvested. 
Performance section: what does this mean?
Prologis is very profitable, but its growth is slow and it could use its money more efficiently. 
Value
P/E ratio 1 liner: Prologis doesn’t feel overpriced when you look at its profit.
P/B ratio 1 liner: Prologis trades at a level that lines up with its real value.
Dividend 1 liner: Prologis rewards long-term holders with consistent payouts.
Value section: what does this mean?
Prologis holds steady with profits and real estate behind it, and gives back through dividends, but it’s more of a long-term hold than a hot pick.
Stability
Volatility 1 liner: Prologis isn’t the smoothest ride — expect some ups and downs.
Beta 1 liner: Prologis moves more than the market — when the market goes up or down, it tends to move even more.
Dividend Consistency 1 liner: Prologis pays dividends pretty regularly, but not with perfect consistency.
Stability section: what does this mean?
Prologis can feel a bit shaky — its stock moves more than expected, and the dividend is steady but not rock-solid.
Momentum
3-month return 1 liner: Prologis has had a solid run recently, picking up some steam.
RPI 1 liner: Prologis hasn’t moved quite as strong as the overall market. 
RSI 1 liner: Prologis isn’t getting much attention from buyers.
Momenutm section: what does this mean?
Prologis has shown a bit of short-term growth, but overall momentum is still on the weaker side — it hasn’t fully caught investors’ attention yet.
Overall analysis:
Prologis brings in reliable income and holds its value over time. It’s a strong option for people who prefer stability and are okay with slower movement.


Reality Income Corp
Performance
Rev Growth 1 liner: Realty Income is bringing in a lot more money than it did last year.
Profit Margin 1 liner: Realty Income does a solid job keeping profits after expenses.
Return on capital 1 liner: Realty Income could improve how it turns spending into profit.
Performance section: what does this mean?
Realty Income is expanding and profitable, but not very efficient with its money.

Value
P/E ratio 1 liner: Realty Income’s price is high for what it earns.
P/B ratio 1 liner: Realty Income doesn’t look overpriced for what it holds.
Dividend 1 liner: Realty Income pays out a strong and steady dividend.
Value section: what does this mean?
Realty Income is all about slow, steady income. It won’t skyrocket, but it’ll keep delivering.

Stability
Volatility 1 liner: Realty Income stays calm during market ups and downs.
Beta 1 liner: Realty Income stays calm when the market gets wild.
Dividend Consistency 1 liner: Realty Income is known for reliable dividend payouts.
Stability section: what does this mean?
Realty Income doesn’t move around much and pays consistently. It’s a safe pick for steady hands.
Momentum
3-month return 1 liner: Realty Income hasn’t shown strong movement in the past few months.
RPI 1 liner: Realty Income isn’t keeping up with other stocks.
RSI 1 liner: Realty Income isn’t getting much attention from buyers right now.
Momentum section: what does this mean?
Realty Income hasn’t made big moves lately and isn’t drawing much investor attention.
Overall analysis:
Realty Income is a slow-moving stock that focuses on steady, reliable income. It won’t deliver fast gains, but it’s great for investors who want monthly dividends and long-term stability.






Simon Property Group
Performance
Rev Growth 1 liner: Simon Property Group is bringing in slightly more revenue than it did last year.
Profit Margin 1 liner: Simon Property Group does a great job turning revenue into profit.
Return on capital 1 liner: Simon Property Group is seeing good gains from invested money.
Performance section: what does this mean?
Simon Property Group is profitable and efficient, even if growth is a bit slow.
Value
P/E ratio 1 liner: Simon Property Group’s price seems justified by its earnings.
P/B ratio 1 liner: Simon Property Group’s stock price is way above what it owns.
Dividend 1 liner: Simon Property Group stands out for its high dividend.
Value section: what does this mean?
Simon Property Group may look pricey on paper, but its dividend helps justify the value.
Stability
Volatility 1 liner: Simon Property Group sees a lot of ups and downs.
Beta 1 liner: Simon Property Group rises and drops more than others.
Dividend Consistency 1 liner: Simon Property Group hasn’t been super reliable with dividends.
Stability section: what does this mean?
Simon Property Group moves around a lot and doesn’t always pay on time. It’s not the safest option.
Momentum
3-month return 1 liner: Simon Property Group hasn’t done well over the past few months.
RPI 1 liner: Simon Property Group is falling behind other stocks.
RSI 1 liner: Simon Property Group isn’t getting much buying attention.
Momentum section: what does this mean?
Simon Property Group hasn’t had much recent action and is underperforming.
Overall analysis:
Simon Property Group makes strong profits and pays a solid dividend, but it moves around a lot and has weak momentum. It’s best for income investors who can handle some risk.

Repeat for each real estate stoc






AvalonBay Communities
Performance
Rev Growth 1 liner: AvalonBay Communities is bringing in more revenue than last year.
Profit Margin 1 liner: AvalonBay Communities does well keeping profits high.
Return on capital 1 liner: AvalonBay Communities gets a fair return from the money it spends.
Performance section: what does this mean?
AvalonBay Communities is growing, profitable, and using money well.
Value
P/E ratio 1 liner: AvalonBay Communities doesn’t look overpriced for what it makes.
P/B ratio 1 liner: AvalonBay Communities isn’t trading too far above what it owns.
Dividend 1 liner: AvalonBay Communities pays a steady and solid dividend.
Value section: what does this mean?
AvalonBay Communities is solid for long-term investors who want fair value and income.
Stability
Volatility 1 liner: AvalonBay Communities has a pretty steady price.
Beta 1 liner: AvalonBay Communities is less sensitive to market changes.
Dividend Consistency 1 liner: AvalonBay Communities pays dividends reliably.
Stability section: what does this mean?
AvalonBay Communities offers low risk and reliable income.
Momentum
3-month return 1 liner: AvalonBay Communities has dipped a bit over the past few months.
RPI 1 liner: AvalonBay Communities is underperforming compared to other stocks.
RSI 1 liner: AvalonBay Communities isn’t showing strong demand from buyers.
Momentum section: what does this mean?
AvalonBay Communities is moving slow and not gaining attention.
Overall analysis:

AvalonBay Communities has strong profits and fair value, but its momentum is weak. It’s a quiet, dependable stock for income and stability.

================
File: attached_assets/Pasted-Realty-Income-Corp-O-Performance-Metrics-CopyRevenue-Growth-5-2-Industry-6-0-YELLOW-What-1742797918718.txt
================
Realty Income Corp. (O)
Performance Metrics:
CopyRevenue Growth: 5.2% (Industry: 6.0%) [YELLOW]
What it means: Growing slightly slower than the average real estate company, reflecting the mature nature of triple-net lease retail properties but still demonstrating steady expansion.

Profit Margin: 30.5% (Industry: 35.0%) [YELLOW]
What it means: Lower than industry average margins due to the triple-net lease structure, which trades some profitability for extremely predictable cash flows.

Return on Capital: 7.8% (Industry: 9.0%) [YELLOW]
What it means: Below-average returns on investments reflect Realty Income's conservative approach, focusing on stable, long-term leases rather than maximum growth.
Stability Metrics:
CopyVolatility: 0.65 (Industry: 0.8) [GREEN]
What it means: Significantly lower price fluctuations than most real estate stocks, making Realty Income one of the most stable REITs available to investors.

Beta: 0.7 (Industry: 0.8) [GREEN]
What it means: More defensive than typical real estate companies, providing better protection during market downturns due to long-term lease structures.

Dividend Consistency: High (Industry: High) [GREEN]
What it means: Exceptional dividend reliability with monthly payments and consistent increases, earning it the nickname "The Monthly Dividend Company."
Value Metrics:
CopyP/E Ratio: 14.2 (Industry: 16.0) [GREEN]
What it means: Trading at a discount to the sector average, offering better value than typical real estate companies despite its quality and stability.

P/B Ratio: 1.5 (Industry: 1.8) [GREEN]
What it means: Lower price relative to book value than peers, indicating potential undervaluation compared to the company's high-quality real estate portfolio.

Dividend Yield: 5.8% (Industry: 3.0%) [GREEN]
What it means: Much higher income return than typical REITs, making it particularly attractive for retirees and income-focused investors seeking reliable cash flow.
Momentum Metrics:
Copy3-Month Return: 2.2% (Industry: 2.5%) [YELLOW]
What it means: Slightly underperforming the real estate sector over the recent quarter, though still delivering positive returns in line with its stable profile.

Relative Performance: -0.3% (Industry: 0.5%) [YELLOW]
What it means: Modest underperformance compared to benchmark indices, possibly reflecting investor preference for growth over income in the current market.

RSI: 51 (Industry: 52) [YELLOW]
What it means: Neutral momentum very close to industry average, indicating balanced buying and selling pressure with no extreme sentiment.
Digital Realty Trust (DLR)
Performance Metrics:
CopyRevenue Growth: 8.8% (Industry: 6.0%) [GREEN]
What it means: Growing faster than the average real estate company, benefiting from increasing demand for data center space driven by cloud computing and AI adoption.

Profit Margin: 36.2% (Industry: 35.0%) [GREEN]
What it means: Slightly better profitability than industry average, reflecting Digital Realty's efficient operations and the premium nature of data center assets.

Return on Capital: 9.2% (Industry: 9.0%) [GREEN]
What it means: Marginally better returns on investments than peers, indicating effective capital allocation in developing and acquiring data center properties.
Stability Metrics:
CopyVolatility: 0.78 (Industry: 0.8) [GREEN]
What it means: Slightly lower price fluctuations than typical real estate stocks, offering somewhat smoother returns due to long-term customer contracts.

Beta: 0.75 (Industry: 0.8) [GREEN]
What it means: More defensive than average real estate companies, providing better protection during market downturns while maintaining data center growth exposure.

Dividend Consistency: High (Industry: High) [YELLOW]
What it means: Strong history of reliable dividend payments, providing dependable income alongside digital infrastructure growth potential.
Value Metrics:
CopyP/E Ratio: 17.2 (Industry: 16.0%) [YELLOW]
What it means: Trading at a slight premium to the sector average, reflecting investors' willingness to pay more for data center exposure compared to traditional real estate.

P/B Ratio: 1.9 (Industry: 1.8) [YELLOW]
What it means: Marginally higher than average price-to-book ratio, indicating the market moderately values data center infrastructure above typical real estate assets.

Dividend Yield: 3.5% (Industry: 3.0%) [GREEN]
What it means: Above-average income component while still offering technology-driven growth potential, providing a balanced return profile.
Momentum Metrics:
Copy3-Month Return: 6.2% (Industry: 2.5%) [GREEN]
What it means: Significantly outperforming the real estate sector recently, showing strong investor preference for data centers over traditional properties.

Relative Performance: 3.7% (Industry: 0.5%) [GREEN]
What it means: Substantially outperforming benchmark indices, demonstrating Digital Realty's appeal as both a real estate and technology infrastructure investment.

RSI: 61 (Industry: 52) [YELLOW]
What it means: Stronger momentum than industry average but not yet at concerning overbought levels, reflecting sustained buyer interest.
Welltower Inc. (WELL)
Performance Metrics:
CopyRevenue Growth: 7.5% (Industry: 6.0%) [GREEN]
What it means: Growing faster than the typical real estate company, benefiting from increasing demand for senior housing and healthcare facilities as the population ages.

Profit Margin: 32.8% (Industry: 35.0%) [YELLOW]
What it means: Slightly lower margins than industry average, reflecting the higher operational costs associated with healthcare properties compared to passive real estate.

Return on Capital: 8.5% (Industry: 9.0%) [YELLOW]
What it means: Near but below average returns on investments, indicating moderate efficiency in capital allocation within the healthcare real estate segment.
Stability Metrics:
CopyVolatility: 0.7 (Industry: 0.8) [GREEN]
What it means: Lower price fluctuations than typical real estate stocks, offering smoother returns due to the essential nature of healthcare services.

Beta: 0.75 (Industry: 0.8) [GREEN]
What it means: More defensive than most real estate companies, providing better protection during market downturns due to the non-discretionary nature of healthcare.

Dividend Consistency: High (Industry: High) [YELLOW]
What it means: Reliable dividend history despite a pandemic-related reduction, demonstrating long-term commitment to shareholder returns while maintaining financial flexibility.
Value Metrics:
CopyP/E Ratio: 16.5 (Industry: 16.0) [YELLOW]
What it means: Trading at a valuation very close to the sector average, suggesting the market views Welltower's healthcare focus as neutral relative to broader real estate.

P/B Ratio: 1.8 (Industry: 1.8) [YELLOW]
What it means: Price-to-book ratio exactly matching the industry average, indicating the market values healthcare properties similarly to other commercial real estate.

Dividend Yield: 3.1% (Industry: 3.0%) [GREEN]
What it means: Slightly higher income return than typical REITs while offering demographic-driven growth potential in healthcare demand.
Momentum Metrics:
Copy3-Month Return: 5.2% (Industry: 2.5%) [GREEN]
What it means: Outperforming the real estate sector over the recent quarter, showing growing investor interest in healthcare properties due to aging demographics.

Relative Performance: 2.7% (Industry: 0.5%) [GREEN]
What it means: Significantly better performance compared to benchmark indices, suggesting a sector rotation into defensive growth areas like healthcare.

RSI: 57 (Industry: 52) [YELLOW]
What it means: Modestly stronger momentum than peers but not approaching overbought territory, indicating sustained buying interest without excessive optimism.
AvalonBay Communities (AVB)
Performance Metrics:
CopyRevenue Growth: 5.8% (Industry: 6.0%) [YELLOW]
What it means: Growing at nearly the same rate as the average real estate company, reflecting the steady nature of multifamily housing demand in premium locations.

Profit Margin: 33.5% (Industry: 35.0%) [YELLOW]
What it means: Slightly lower margins than the industry average, influenced by the higher operational costs of managing residential properties compared to other real estate.

Return on Capital: 8.8% (Industry: 9.0%) [YELLOW]
What it means: Just below average returns on investments, indicating reasonable but not exceptional efficiency in developing and operating apartment communities.
Stability Metrics:
CopyVolatility: 0.75 (Industry: 0.8) [GREEN]
What it means: Lower price fluctuations than typical real estate stocks, reflecting the essential nature of housing and AvalonBay's focus on high-barrier markets.

Beta: 0.8 (Industry: 0.8) [YELLOW]
What it means: Market correlation exactly matching the real estate sector average, suggesting typical sensitivity to broader economic conditions.

Dividend Consistency: High (Industry: High) [YELLOW]
What it means: Strong dividend reliability history despite periodic fluctuations in rental markets, providing dependable income for shareholders.
Value Metrics:
CopyP/E Ratio: 15.6 (Industry: 16.0) [GREEN]
What it means: Trading at a slight discount to the sector average, potentially offering better value than typical real estate companies despite focus on premium locations.

P/B Ratio: 1.7 (Industry: 1.8) [GREEN]
What it means: Lower price relative to book value than peers, indicating possible undervaluation compared to AvalonBay's high-quality apartment portfolio.

Dividend Yield: 3.4% (Industry: 3.0%) [GREEN]
What it means: Above-average income component while maintaining exposure to residential growth in supply-constrained markets, offering an attractive balance.
Momentum Metrics:
Copy3-Month Return: 2.5% (Industry: 2.5%) [YELLOW]
What it means: Performance exactly matching the real estate sector average over the recent quarter, showing neither relative strength nor weakness.

Relative Performance: 0.0% (Industry: 0.5%) [YELLOW]
What it means: Neutral performance compared to benchmark indices, suggesting investors view multifamily REITs as fairly valued in the current environment.

RSI: 50 (Industry: 52) [YELLOW]
What it means: Perfectly neutral momentum indicator, showing equilibrium between buying and selling pressure with no directional bias.
Crown Castle Inc. (CCI)
Performance Metrics:
CopyRevenue Growth: 4.5% (Industry: 6.0%) [YELLOW]
What it means: Growing more slowly than the average real estate company, reflecting recent challenges in the communications infrastructure space and carrier spending slowdowns.

Profit Margin: 34.2% (Industry: 35.0%) [YELLOW]
What it means: Slightly lower margins than industry average but still strong overall, indicating the attractive economics of tower ownership despite recent headwinds.

Return on Capital: 8.5% (Industry: 9.0%) [YELLOW]
What it means: Below-average returns on investments, suggesting some difficulty in generating maximum value from capital expenditures on new infrastructure.
Stability Metrics:
CopyVolatility: 0.8 (Industry: 0.8) [YELLOW]
What it means: Price fluctuations exactly matching the industry average, indicating typical levels of stability for a real estate company despite its technology exposure.

Beta: 0.82 (Industry: 0.8) [YELLOW]
What it means: Slightly more reactive to market movements than most real estate companies, but still maintaining generally defensive characteristics.

Dividend Consistency: High (Industry: High) [YELLOW]
What it means: History of reliable dividend increases, though recent growth concerns have raised questions about future dividend growth rates.
Value Metrics:
CopyP/E Ratio: 15.8 (Industry: 16.0) [GREEN]
What it means: Trading at a slight discount to the sector average, reflecting investor concerns about wireless carrier capital spending and fiber investments.

P/B Ratio: 1.7 (Industry: 1.8) [GREEN]
What it means: Lower price relative to book value than peers, indicating potential value if communications infrastructure demand reaccelerates.

Dividend Yield: 4.8% (Industry: 3.0%) [GREEN]
What it means: Much higher income return than typical REITs, compensating investors for perceived higher risk and slower growth in the near term.
Momentum Metrics:
Copy3-Month Return: -2.5% (Industry: 2.5%) [RED]
What it means: Significantly underperforming the real estate sector over the recent quarter, reflecting specific challenges in the communications infrastructure market.

Relative Performance: -5.0% (Industry: 0.5%) [RED]
What it means: Substantial underperformance compared to benchmark indices, showing investor concerns about Crown Castle's recent strategic missteps and growth outlook.

RSI: 42 (Industry: 52) [RED]
What it means: Weaker momentum than industry average and approaching oversold territory, indicating persistent selling pressure but potential for a technical rebound.
This

================
File: attached_assets/Pasted-Realty-Income-Corp-O-Performance-Metrics-Revenue-Growth-5-2-Industry-6-0-YELLOW-What-T-1742802147274.txt
================
Realty Income Corp. (O)

Performance Metrics:

Revenue Growth: 5.2% (Industry: 6.0%) [YELLOW]
What This Means Overall: Realty Income's revenue growth is slightly below the industry average, reflecting the stable but slower growth of triple-net lease properties.
Profit Margin: 30.5% (Industry: 35.0%) [YELLOW]
What This Means Overall: Realty Income's profit margins are lower than the industry average, due to the structure of triple-net leases, which prioritize stable cash flows.
Return on Capital: 7.8% (Industry: 9.0%) [YELLOW]
What This Means Overall: Realty Income's return on capital is below the industry average, reflecting its conservative investment approach focused on long-term stability.
What This Means Overall (Performance): Realty Income shows slightly weaker performance compared to the industry average, prioritizing stability and consistent cash flow over high growth.
Stability Metrics:

Volatility: 0.65 (Industry: 0.8) [GREEN]
What This Means Overall: Realty Income's stock price is less volatile than the industry average, indicating highly stable returns.
Beta: 0.7 (Industry: 0.8) [GREEN]
What This Means Overall: Realty Income's stock moves less than the overall real estate market, indicating low sensitivity to market fluctuations.
Dividend Consistency: High (Industry: High) [GREEN]
What This Means Overall: Realty Income has an exceptional history of consistent dividend payments, making it a reliable income source.
What This Means Overall (Stability): Realty Income offers exceptional stability with low volatility, low market sensitivity, and reliable dividend payments, making it a safe investment.
Value Metrics:

P/E Ratio: 14.2 (Industry: 16.0) [GREEN]
What This Means Overall: Realty Income's stock is cheaper compared to its earnings than the industry average, suggesting potential undervaluation.
P/B Ratio: 1.5 (Industry: 1.8) [GREEN]
What This Means Overall: Realty Income's stock is trading below its book value, indicating potential undervaluation.
Dividend Yield: 5.8% (Industry: 3.0%) [GREEN]
What This Means Overall: Realty Income offers a significantly higher dividend yield than the industry average, providing a strong income stream.
What This Means Overall (Value): Realty Income is undervalued compared to the industry average and offers a high dividend yield, making it attractive for income-focused investors.
Momentum Metrics:

3-Month Return: 2.2% (Industry: 2.5%) [YELLOW]
What This Means Overall: Realty Income's stock has slightly underperformed the real estate sector in the past three months, showing some short-term weakness.
Relative Performance: -0.3% (Industry: 0.5%) [YELLOW]
What This Means Overall: Realty Income's stock has slightly underperformed benchmark indices, suggesting it's lagging behind the broader market.
RSI: 51 (Industry: 52) [YELLOW]
What This Means Overall: Realty Income's stock is neither overbought nor oversold, indicating neutral momentum.
What This Means Overall (Momentum): Realty Income shows some short-term weakness compared to the sector and broader market, indicating neutral to slightly negative momentum.
Digital Realty Trust (DLR)

Performance Metrics:

Revenue Growth: 8.8% (Industry: 6.0%) [GREEN]
What This Means Overall: Digital Realty Trust is growing its revenue faster than the industry average, indicating strong demand for its data center services.
Profit Margin: 36.2% (Industry: 35.0%) [GREEN]
What This Means Overall: Digital Realty Trust is more profitable than its peers, suggesting efficient operations and strong pricing power.
Return on Capital: 9.2% (Industry: 9.0%) [GREEN]
What This Means Overall: Digital Realty Trust generates higher returns on its investments, meaning it's effectively using its capital to generate profits.
What This Means Overall (Performance): Digital Realty Trust exhibits strong performance with above-average growth, profitability, and returns, reflecting the high demand for data center services.
Stability Metrics:

Volatility: 0.78 (Industry: 0.8) [GREEN]
What This Means Overall: Digital Realty Trust's stock price is less volatile than the industry average, indicating more stable and predictable returns.
Beta: 0.75 (Industry: 0.8) [GREEN]
What This Means Overall: Digital Realty Trust's stock moves less than the overall real estate market, indicating low sensitivity to market fluctuations.
Dividend Consistency: High (Industry: High) [YELLOW]
What This Means Overall: Digital Realty Trust has a reliable history of paying dividends, providing consistent income to investors.
What This Means Overall (Stability): Digital Realty Trust offers strong stability with low volatility and market sensitivity, providing reliable returns and income.
Value Metrics:

P/E Ratio: 17.2 (Industry: 16.0) [YELLOW]
What This Means Overall: Digital Realty Trust's stock is slightly more expensive compared to its earnings than the industry average, suggesting investors are willing to pay a premium.
P/B Ratio: 1.9 (Industry: 1.8) [YELLOW]
What This Means Overall: Digital Realty Trust's stock is trading slightly above its book value, indicating investors see additional value beyond its tangible assets.
Dividend Yield: 3.5% (Industry: 3.0%) [GREEN]
What This Means Overall: Digital Realty Trust offers a higher dividend yield than the industry average, providing a better income stream for investors.
What This Means Overall (Value): Digital Realty Trust is valued at a slight premium but offers a higher dividend yield, balancing growth potential with income.
Momentum Metrics:

3-Month Return: 6.2% (Industry: 2.5%) [GREEN]
What This Means Overall: Digital Realty Trust's stock has significantly outperformed the real estate sector in the past three months, showing strong positive momentum.
Relative Performance: 3.7% (Industry: 0.5%) [GREEN]
What This Means Overall: Digital Realty Trust's stock has significantly outperformed benchmark indices, suggesting it's leading the market.
RSI: 61 (Industry: 52) [YELLOW]
What This Means Overall: Digital Realty Trust's stock is slightly overbought, indicating potential for a pullback.
What This Means Overall (Momentum): Digital Realty Trust shows strong positive momentum and outperformance, reflecting high investor interest in its growth potential.
Welltower Inc. (WELL)

Performance Metrics:

Revenue Growth: 7.5% (Industry: 6.0%) [GREEN]
What This Means Overall: Welltower is growing its revenue faster than the industry average, driven by demand for healthcare and senior housing facilities.
Profit Margin: 32.8% (Industry: 35.0%) [YELLOW]
What This Means Overall: Welltower's profit margins are slightly lower than the industry average, reflecting the higher operational costs of healthcare properties.
Return on Capital: 8.5% (Industry: 9.0%) [YELLOW]
What This Means Overall: Welltower's return on capital is below the industry average, indicating moderate efficiency in capital allocation.
What This Means Overall (Performance): Welltower shows solid performance with above-average growth but slightly lower profitability and returns compared to the industry average.
Stability Metrics:

Volatility: 0.7 (Industry: 0.8) [GREEN]
What This Means Overall: Welltower's stock price is less volatile than the industry average, indicating more stable and predictable returns.
Beta: 0.75 (Industry: 0.8) [GREEN]
What This Means Overall: Welltower's stock moves less than the overall real estate market, indicating low sensitivity to market fluctuations.
Dividend Consistency: High (Industry: High) [YELLOW]
What This Means Overall: Welltower has a reliable history of paying dividends, providing consistent income to investors.
What This Means Overall (Stability): Welltower offers strong stability with low volatility and market sensitivity, providing reliable returns and income.

================
File: attached_assets/Pasted-Realty-Income-Corp-O-Performance-Metrics-Revenue-Growth-5-2-Industry-6-0-YELLOW-What-T-1742802189369.txt
================
Realty Income Corp. (O)

Performance Metrics:

Revenue Growth: 5.2% (Industry: 6.0%) [YELLOW]
What This Means Overall: Realty Income's revenue growth is slightly below the industry average, reflecting the stable but slower growth of triple-net lease properties.
Profit Margin: 30.5% (Industry: 35.0%) [YELLOW]
What This Means Overall: Realty Income's profit margins are lower than the industry average, due to the structure of triple-net leases, which prioritize stable cash flows.
Return on Capital: 7.8% (Industry: 9.0%) [YELLOW]
What This Means Overall: Realty Income's return on capital is below the industry average, reflecting its conservative investment approach focused on long-term stability.
What This Means Overall (Performance): Realty Income shows slightly weaker performance compared to the industry average, prioritizing stability and consistent cash flow over high growth.
Stability Metrics:

Volatility: 0.65 (Industry: 0.8) [GREEN]
What This Means Overall: Realty Income's stock price is less volatile than the industry average, indicating highly stable returns.
Beta: 0.7 (Industry: 0.8) [GREEN]
What This Means Overall: Realty Income's stock moves less than the overall real estate market, indicating low sensitivity to market fluctuations.
Dividend Consistency: High (Industry: High) [GREEN]
What This Means Overall: Realty Income has an exceptional history of consistent dividend payments, making it a reliable income source.
What This Means Overall (Stability): Realty Income offers exceptional stability with low volatility, low market sensitivity, and reliable dividend payments, making it a safe investment.
Value Metrics:

P/E Ratio: 14.2 (Industry: 16.0) [GREEN]
What This Means Overall: Realty Income's stock is cheaper compared to its earnings than the industry average, suggesting potential undervaluation.
P/B Ratio: 1.5 (Industry: 1.8) [GREEN]
What This Means Overall: Realty Income's stock is trading below its book value, indicating potential undervaluation.
Dividend Yield: 5.8% (Industry: 3.0%) [GREEN]
What This Means Overall: Realty Income offers a significantly higher dividend yield than the industry average, providing a strong income stream.
What This Means Overall (Value): Realty Income is undervalued compared to the industry average and offers a high dividend yield, making it attractive for income-focused investors.
Momentum Metrics:

3-Month Return: 2.2% (Industry: 2.5%) [YELLOW]
What This Means Overall: Realty Income's stock has slightly underperformed the real estate sector in the past three months, showing some short-term weakness.
Relative Performance: -0.3% (Industry: 0.5%) [YELLOW]
What This Means Overall: Realty Income's stock has slightly underperformed benchmark indices, suggesting it's lagging behind the broader market.
RSI: 51 (Industry: 52) [YELLOW]
What This Means Overall: Realty Income's stock is neither overbought nor oversold, indicating neutral momentum.
What This Means Overall (Momentum): Realty Income shows some short-term weakness compared to the sector and broader market, indicating neutral to slightly negative momentum.
Digital Realty Trust (DLR)

Performance Metrics:

Revenue Growth: 8.8% (Industry: 6.0%) [GREEN]
What This Means Overall: Digital Realty Trust is growing its revenue faster than the industry average, indicating strong demand for its data center services.
Profit Margin: 36.2% (Industry: 35.0%) [GREEN]
What This Means Overall: Digital Realty Trust is more profitable than its peers, suggesting efficient operations and strong pricing power.
Return on Capital: 9.2% (Industry: 9.0%) [GREEN]
What This Means Overall: Digital Realty Trust generates higher returns on its investments, meaning it's effectively using its capital to generate profits.
What This Means Overall (Performance): Digital Realty Trust exhibits strong performance with above-average growth, profitability, and returns, reflecting the high demand for data center services.
Stability Metrics:

Volatility: 0.78 (Industry: 0.8) [GREEN]
What This Means Overall: Digital Realty Trust's stock price is less volatile than the industry average, indicating more stable and predictable returns.
Beta: 0.75 (Industry: 0.8) [GREEN]
What This Means Overall: Digital Realty Trust's stock moves less than the overall real estate market, indicating low sensitivity to market fluctuations.
Dividend Consistency: High (Industry: High) [YELLOW]
What This Means Overall: Digital Realty Trust has a reliable history of paying dividends, providing consistent income to investors.
What This Means Overall (Stability): Digital Realty Trust offers strong stability with low volatility and market sensitivity, providing reliable returns and income.
Value Metrics:

P/E Ratio: 17.2 (Industry: 16.0) [YELLOW]
What This Means Overall: Digital Realty Trust's stock is slightly more expensive compared to its earnings than the industry average, suggesting investors are willing to pay a premium.
P/B Ratio: 1.9 (Industry: 1.8) [YELLOW]
What This Means Overall: Digital Realty Trust's stock is trading slightly above its book value, indicating investors see additional value beyond its tangible assets.
Dividend Yield: 3.5% (Industry: 3.0%) [GREEN]
What This Means Overall: Digital Realty Trust offers a higher dividend yield than the industry average, providing a better income stream for investors.
What This Means Overall (Value): Digital Realty Trust is valued at a slight premium but offers a higher dividend yield, balancing growth potential with income.
Momentum Metrics:

3-Month Return: 6.2% (Industry: 2.5%) [GREEN]
What This Means Overall: Digital Realty Trust's stock has significantly outperformed the real estate sector in the past three months, showing strong positive momentum.
Relative Performance: 3.7% (Industry: 0.5%) [GREEN]
What This Means Overall: Digital Realty Trust's stock has significantly outperformed benchmark indices, suggesting it's leading the market.
RSI: 61 (Industry: 52) [YELLOW]
What This Means Overall: Digital Realty Trust's stock is slightly overbought, indicating potential for a pullback.
What This Means Overall (Momentum): Digital Realty Trust shows strong positive momentum and outperformance, reflecting high investor interest in its growth potential.
Welltower Inc. (WELL)

Performance Metrics:

Revenue Growth: 7.5% (Industry: 6.0%) [GREEN]
What This Means Overall: Welltower is growing its revenue faster than the industry average, driven by demand for healthcare and senior housing facilities.
Profit Margin: 32.8% (Industry: 35.0%) [YELLOW]
What This Means Overall: Welltower's profit margins are slightly lower than the industry average, reflecting the higher operational costs of healthcare properties.
Return on Capital: 8.5% (Industry: 9.0%) [YELLOW]
What This Means Overall: Welltower's return on capital is below the industry average, indicating moderate efficiency in capital allocation.
What This Means Overall (Performance): Welltower shows solid performance with above-average growth but slightly lower profitability and returns compared to the industry average.
Stability Metrics:

Volatility: 0.7 (Industry: 0.8) [GREEN]
What This Means Overall: Welltower's stock price is less volatile than the industry average, indicating more stable and predictable returns.
Beta: 0.75 (Industry: 0.8) [GREEN]
What This Means Overall: Welltower's stock moves less than the overall real estate market, indicating low sensitivity to market fluctuations.
Dividend Consistency: High (Industry: High) [YELLOW]
What This Means Overall: Welltower has a reliable history of paying dividends, providing consistent income to investors.
What This Means Overall (Stability): Welltower offers strong stability with low volatility and market sensitivity, providing reliable returns and income.

================
File: attached_assets/Pasted-Simon-Property-Group-SPG-Performance-Metrics-Revenue-Growth-4-8-Industry-6-0-YELLOW-Wha-1742802094857.txt
================
Simon Property Group (SPG)

Performance Metrics:

Revenue Growth: 4.8% (Industry: 6.0%) [YELLOW]
What This Means Overall: Simon Property Group is growing its revenue at a slower pace than the industry average, indicating potential challenges in the retail sector.
Profit Margin: 32.6% (Industry: 35.0%) [YELLOW]
What This Means Overall: Simon Property Group's profit margins are slightly lower than the industry average, suggesting some pressure on profitability.
Return on Capital: 8.2% (Industry: 9.0%) [YELLOW]
What This Means Overall: Simon Property Group's return on capital is below the industry average, indicating moderate efficiency in capital allocation.
What This Means Overall (Performance): Simon Property Group shows weaker performance compared to the industry average, with slower growth, lower profitability, and less efficient capital use, reflecting challenges in the retail real estate sector.
Stability Metrics:

Volatility: 0.95 (Industry: 0.8) [YELLOW]
What This Means Overall: Simon Property Group's stock price is more volatile than the industry average, indicating higher risk.
Beta: 0.9 (Industry: 0.8) [YELLOW]
What This Means Overall: Simon Property Group's stock moves slightly more than the overall real estate market, indicating higher sensitivity to market fluctuations.
Dividend Consistency: Medium (Industry: High) [YELLOW]
What This Means Overall: Simon Property Group's dividend consistency is moderate, indicating some vulnerability during economic downturns.
What This Means Overall (Stability): Simon Property Group exhibits higher volatility and market sensitivity compared to the industry average, with a less reliable dividend history, indicating higher risk.
Value Metrics:

P/E Ratio: 13.2 (Industry: 16.0) [GREEN]
What This Means Overall: Simon Property Group's stock is cheaper compared to its earnings than the industry average, suggesting potential undervaluation.
P/B Ratio: 1.4 (Industry: 1.8) [GREEN]
What This Means Overall: Simon Property Group's stock is trading below its book value, indicating potential undervaluation.
Dividend Yield: 5.2% (Industry: 3.0%) [GREEN]
What This Means Overall: Simon Property Group offers a significantly higher dividend yield than the industry average, providing a strong income stream.
What This Means Overall (Value): Simon Property Group's stock is undervalued compared to the industry average and offers a high dividend yield, suggesting potential value for investors.
Momentum Metrics:

3-Month Return: 3.5% (Industry: 2.5%) [GREEN]
What This Means Overall: Simon Property Group's stock has outperformed the real estate sector in the past three months, showing positive short-term momentum.
Relative Performance: 1.0% (Industry: 0.5%) [GREEN]
What This Means Overall: Simon Property Group's stock has outperformed benchmark indices, suggesting it's leading the market.
RSI: 54 (Industry: 52) [YELLOW]
What This Means Overall: Simon Property Group's stock is slightly overbought, indicating potential for a pullback.
What This Means Overall (Momentum): Simon Property Group shows strong short-term momentum and outperformance, indicating growing investor interest.
Equinix Inc. (EQIX)

Performance Metrics:

Revenue Growth: 10.2% (Industry: 6.0%) [GREEN]
What This Means Overall: Equinix is growing its revenue significantly faster than the industry average, indicating strong demand for its data center services.
Profit Margin: 38.5% (Industry: 35.0%) [GREEN]
What This Means Overall: Equinix is more profitable than its peers, suggesting efficient operations and strong pricing power.
Return on Capital: 11.5% (Industry: 9.0%) [GREEN]
What This Means Overall: Equinix generates higher returns on its investments, meaning it's effectively using its capital to generate profits.
What This Means Overall (Performance): Equinix exhibits strong performance with higher growth, profitability, and returns than the industry average, reflecting the high demand for data center services.
Stability Metrics:

Volatility: 0.7 (Industry: 0.8) [GREEN]
What This Means Overall: Equinix's stock price is less volatile than the industry average, indicating more stable and predictable returns.
Beta: 0.78 (Industry: 0.8) [GREEN]
What This Means Overall: Equinix's stock moves less than the overall real estate market, indicating it's less sensitive to market fluctuations.
Dividend Consistency: High (Industry: High) [YELLOW]
What This Means Overall: Equinix has a reliable history of paying dividends, providing consistent income to investors.
What This Means Overall (Stability): Equinix offers strong stability with lower volatility and market sensitivity, providing reliable returns and income.
Value Metrics:

P/E Ratio: 19.8 (Industry: 16.0) [RED]
What This Means Overall: Equinix's stock is more expensive compared to its earnings than the industry average, suggesting investors are willing to pay a premium for its growth potential.
P/B Ratio: 2.2 (Industry: 1.8) [YELLOW]
What This Means Overall: Equinix's stock is trading above its book value, indicating investors see additional value beyond its tangible assets.
Dividend Yield: 2.3% (Industry: 3.0%) [RED]
What This Means Overall: Equinix offers a lower dividend yield than the industry average, suggesting it's more focused on growth than income.
What This Means Overall (Value): Equinix is valued at a premium due to its strong growth potential, but offers a lower dividend yield compared to the industry average.
Momentum Metrics:

3-Month Return: 5.8% (Industry: 2.5%) [GREEN]
What This Means Overall: Equinix's stock has significantly outperformed the real estate sector in the past three months, showing strong positive momentum.
Relative Performance: 3.3% (Industry: 0.5%) [GREEN]
What This Means Overall: Equinix's stock has significantly outperformed benchmark indices, suggesting it's leading the market.
RSI: 58 (Industry: 52) [YELLOW]
What This Means Overall: Equinix's stock is slightly overbought, indicating potential for a pullback.
What This Means Overall (Momentum): Equinix shows strong positive momentum and outperformance, reflecting high investor interest in its growth potential.
Public Storage (PSA)

Performance Metrics:

Revenue Growth: 6.8% (Industry: 6.0%) [GREEN]
What This Means Overall: Public Storage is growing its revenue slightly faster than the industry average, indicating steady demand for its self-storage facilities.
Profit Margin: 41.2% (Industry: 35.0%) [GREEN]
What This Means Overall: Public Storage is more profitable than its peers, suggesting efficient operations and strong pricing power.
Return on Capital: 9.8% (Industry: 9.0%) [GREEN]
What This Means Overall: Public Storage generates higher returns on its investments, meaning it's effectively using its capital to generate profits.
What This Means Overall (Performance): Public Storage exhibits strong performance with above-average growth, profitability, and returns, reflecting the consistent demand for self-storage facilities.
Stability Metrics:

Volatility: 0.68 (Industry: 0.8) [GREEN]
What This Means Overall: Public Storage's stock price is less volatile than the industry average, indicating more stable and predictable returns.
Beta: 0.72 (Industry: 0.8) [GREEN]
What This Means Overall: Public Storage's stock moves less than the overall real estate market, indicating it's less sensitive to market fluctuations.
Dividend Consistency: High (Industry: High) [YELLOW]
What This Means Overall: Public Storage has a reliable history of paying dividends, providing consistent income to investors.
What This Means Overall (Stability): Public Storage offers strong stability with low volatility and market sensitivity, providing reliable returns and

================
File: attached_assets/Pasted-ssue-with-Score-Calculation-Logic-The-current-calculation-method-is-inconsistent-with-how-financial-1742942297194.txt
================
ssue with Score Calculation Logic
The current calculation method is inconsistent with how financial metrics should be normalized across different industries. Here's what's wrong and how to fix it:
The Problem
When calculating scores for each metric (Performance, Value, Momentum, Stability), the code is not properly normalizing values before multiplication. Specifically:

For Stock-to-Industry comparisons, we need to:

Calculate the ratio of stock metric to industry average
Cap this ratio at 100% (1.0) to prevent extremely high values from skewing results
For "lower is better" metrics (like P/E ratio), invert the ratio so higher scores still mean better performance


For Industry-to-Market comparisons, we need to:

Calculate the ratio of industry average to market average
Optionally cap this ratio at 100% (1.0) depending on your preference
For "lower is better" metrics, invert this ratio as well


In the current code, the capping happens too late, after multiplying uncapped values, which leads to inflated scores.

The Fix
For each metric calculation function (Performance, Value, Stability, Momentum):

First calculate the Stock/Industry ratios for each sub-metric
Immediately cap each ratio at 1.0 (100%) using Math.min(1, ratio)
Calculate the Industry/Market ratios for each sub-metric
Cap these ratios if desired (depending on whether you want industry expertise to be rewarded above 100%)
Apply the weighting formula with these properly capped ratios
Sum up the contributions to get the final score

Example for Performance Score
For Prologis (PLD):

Revenue Growth: Cap (2.2/5.0) at 1.0 → 0.44, then multiply by cap(5.0/7.0) → 0.71
Profit Margin: Cap (45.4/25.0) at 1.0 → 1.0, then multiply by cap(25.0/12.0) → 1.0
Return on Capital: Cap (4.3/4.5) at 1.0 → 0.956, then multiply by cap(4.5/12.0) → 0.375

Final formula:
(0.4×0.44×0.71) + (0.3×1.0×1.0) + (0.3×0.956×0.375) = 0.53, or 53%
This approach should be consistently applied to all four metric categories:

Performance (Revenue Growth, Profit Margin, ROC)
Value (P/E Ratio, P/B Ratio, Dividend Yield)
Momentum (3-Month Return, RSI)
Stability (Volatility, Beta, Dividend Consistency)

================
File: attached_assets/Pasted-The-comparative-analysis-section-will-provide-users-with-visual-tools-to-compare-the-current-stock-w-1743108952585.txt
================
The comparative analysis section will provide users with visual tools to compare the current stock with similar companies, enhancing educational value and decision-making capabilities. This feature will include two visualization options: a radar/spider chart and a quadrant comparison.
1. Radar Chart Implementation
Purpose
To visually display how the current stock compares to 4 random companies in the same industry across multiple metrics simultaneously.
Data Structure

Use existing portfolio impact calculator weighted scores
Display 5 stocks total (current stock + 4 comparisons)
Metrics to display (5-6 key metrics):

Growth potential
Stability
Value
Momentum
Dividend yield (if applicable)
ESG score (if available)



Visual Design

Use distinct colors for each company
Make current stock's line more prominent (thicker, brighter color)
Include a legend identifying each company
Add tooltips showing exact values when hovering

Interaction

Allow users to tap on company names in the legend to toggle visibility
Include brief explanation text about radar charts for educational purposes

2. Quadrant Comparison Implementation
Purpose
To position stocks relative to each other based on two key metrics, helping users understand trade-offs between different investment qualities.
Recommended Quadrant Metrics
For maximum educational value and digestibility, I recommend these quadrant options:
Option 1: Risk vs. Return Quadrant

X-axis: Volatility/Risk (low to high)
Y-axis: Expected Return (low to high)
Quadrants interpretation:

Top Left: Low risk, high return (ideal)
Top Right: High risk, high return (growth stocks)
Bottom Left: Low risk, low return (stable stocks)
Bottom Right: High risk, low return (avoid)



Option 2: Value vs. Growth Quadrant

X-axis: Value score (low to high)
Y-axis: Growth potential (low to high)
Quadrants interpretation:

Top Left: Low value, high growth (growth stocks)
Top Right: High value, high growth (ideal stocks)
Bottom Left: Low value, low growth (avoid)
Bottom Right: High value, low growth (value stocks)



Visual Design

Use a simple scatter plot with quadrant lines
Make current stock point larger/highlighted
Include company names as labels
Use background color shading to indicate desirability of each quadrant

Interaction

Toggle button between radar and quadrant views
Option to select different metric combinations for the quadrant comparison
Educational tooltip explaining what each quadrant represents

Implementation Notes

For initial implementation, hardcode comparison companies from the same sector
Make the toggle between radar and quadrant views intuitive with clear labels
Include educational tooltips throughout to explain what users are seeing
Use consistent color coding between the two visualization types

User Experience Flow

User views stock card
Under "Comparative Analysis" section, radar chart displays by default
Clear button/toggle allows switching to quadrant view
Brief explanation text provides context for each visualization
Interactive elements allow exploration of the data

The quadrant comparison will be particularly valuable as it's more intuitive for beginners to understand the trade-offs between different investment characteristics. Starting with the Risk vs. Return quadrant would provide the most immediate value to users as it represents a fundamental investment concept.

================
File: attached_assets/Pasted-The-comparative-analysis-section-will-provide-users-with-visual-tools-to-compare-the-current-stock-w-1743108960550.txt
================
The comparative analysis section will provide users with visual tools to compare the current stock with similar companies, enhancing educational value and decision-making capabilities. This feature will include two visualization options: a radar/spider chart and a quadrant comparison.
1. Radar Chart Implementation
Purpose
To visually display how the current stock compares to 4 random companies in the same industry across multiple metrics simultaneously.
Data Structure

Use existing portfolio impact calculator weighted scores
Display 5 stocks total (current stock + 4 comparisons)
Metrics to display (5-6 key metrics):

Growth potential
Stability
Value
Momentum
Dividend yield (if applicable)
ESG score (if available)



Visual Design

Use distinct colors for each company
Make current stock's line more prominent (thicker, brighter color)
Include a legend identifying each company
Add tooltips showing exact values when hovering

Interaction

Allow users to tap on company names in the legend to toggle visibility
Include brief explanation text about radar charts for educational purposes

2. Quadrant Comparison Implementation
Purpose
To position stocks relative to each other based on two key metrics, helping users understand trade-offs between different investment qualities.
Recommended Quadrant Metrics
For maximum educational value and digestibility, I recommend these quadrant options:
Option 1: Risk vs. Return Quadrant

X-axis: Volatility/Risk (low to high)
Y-axis: Expected Return (low to high)
Quadrants interpretation:

Top Left: Low risk, high return (ideal)
Top Right: High risk, high return (growth stocks)
Bottom Left: Low risk, low return (stable stocks)
Bottom Right: High risk, low return (avoid)



Option 2: Value vs. Growth Quadrant

X-axis: Value score (low to high)
Y-axis: Growth potential (low to high)
Quadrants interpretation:

Top Left: Low value, high growth (growth stocks)
Top Right: High value, high growth (ideal stocks)
Bottom Left: Low value, low growth (avoid)
Bottom Right: High value, low growth (value stocks)



Visual Design

Use a simple scatter plot with quadrant lines
Make current stock point larger/highlighted
Include company names as labels
Use background color shading to indicate desirability of each quadrant

Interaction

Toggle button between radar and quadrant views
Option to select different metric combinations for the quadrant comparison
Educational tooltip explaining what each quadrant represents

Implementation Notes

For initial implementation, hardcode comparison companies from the same sector
Make the toggle between radar and quadrant views intuitive with clear labels
Include educational tooltips throughout to explain what users are seeing
Use consistent color coding between the two visualization types

User Experience Flow

User views stock card
Under "Comparative Analysis" section, radar chart displays by default
Clear button/toggle allows switching to quadrant view
Brief explanation text provides context for each visualization
Interactive elements allow exploration of the data

The quadrant comparison will be particularly valuable as it's more intuitive for beginners to understand the trade-offs between different investment characteristics. Starting with the Risk vs. Return quadrant would provide the most immediate value to users as it represents a fundamental investment concept.

================
File: attached_assets/Pasted-The-comparative-analysis-section-will-provide-users-with-visual-tools-to-compare-the-current-stock-w-1743109326027.txt
================
The comparative analysis section will provide users with visual tools to compare the current stock with similar companies, enhancing educational value and decision-making capabilities. This feature will include two visualization options: a radar/spider chart and a quadrant comparison.These two options are togglable to switch. 

1. Radar Chart Implementation
Purpose
To visually display how the current stock compares to 4 random companies in the same industry across multiple metrics simultaneously.
Data Structure

Use existing portfolio impact calculator weighted scores
Display 5 stocks total (current stock + 4 comparisons)
Metrics to display (4 key metrics):

Performance
Stability
Value
Momentum
Dividend yield (if applicable)




Visual Design

Use distinct colors for each company
Make current stock's line more prominent (thicker, brighter color)
Include a legend identifying each company
Add tooltips showing exact values when hovering

Interaction

Allow users to tap on company names in the legend to toggle visibility
Include brief explanation text about radar charts for educational purposes

2. Quadrant Comparison Implementation
Purpose
To position stocks relative to each other based on two key metrics, helping users understand trade-offs between different investment qualities.
Recommended Quadrant Metrics
For maximum educational value and digestibility, I recommend these quadrant options:
Option 1: Risk vs. Return Quadrant

X-axis: Volatility/Risk (low to high)
Y-axis: Expected Return (low to high)
Quadrants interpretation:

Top Left: Low risk, high return (ideal)
Top Right: High risk, high return (performance stocks)
Bottom Left: Low risk, low return (stable stocks)
Bottom Right: High risk, low return (avoid)



Option 2: Value vs. Performance Quadrant

X-axis: Value score (low to high)
Y-axis: Performance potential (low to high)
Quadrants interpretation:

Top Left: Low value, high performance (performance stocks)
Top Right: High value, high performance (ideal stocks)
Bottom Left: Low value, low performance (avoid)
Bottom Right: High value, low performance (value stocks)



Visual Design

Use a simple scatter plot with quadrant lines
Make current stock point larger/highlighted
Include company names as labels
Use background color shading to indicate desirability of each quadrant

Interaction

Toggle button between radar and quadrant views
Option to select different metric combinations for the quadrant comparison
Educational tooltip explaining what each quadrant represents

Implementation Notes

For initial implementation, hardcode comparison companies from the same sector
Make the toggle between radar and quadrant views intuitive with clear labels
Include educational tooltips throughout to explain what users are seeing
Use consistent color coding between the two visualization types

User Experience Flow

User views stock card
Under "Comparative Analysis" section, radar chart displays by default
Clear button/toggle allows switching to quadrant view
Brief explanation text provides context for each visualization
Interactive elements allow exploration of the data

The quadrant comparison will be particularly valuable as it's more intuitive for beginners to understand the trade-offs between different investment characteristics. Starting with the Risk vs. Return quadrant would provide the most immediate value to users as it represents a fundamental investment concept.

================
File: client/src/app/learn/board-room/page.tsx
================
import { BoardRoomGame } from '@/components/board-room-game';

export default function BoardRoomPage() {
  return <BoardRoomGame />;
}

================
File: client/src/app/learn/page.tsx
================
import { Building2 } from 'lucide-react';

const GAMES = [
  {
    title: "Board Room Simulator",
    description: "Make strategic decisions that impact your company's future",
    icon: Building2,
    href: "/learn/board-room"
  }
];

================
File: client/src/components/comparative-analysis/index.tsx
================
import React, { useEffect, useState } from 'react';
import { StockData, getIndustryStocks } from '../../lib/stock-data';
import IndustryPosition from './industry-position';
import { getAdvancedMetricScore } from '../../lib/advanced-metric-scoring';

interface ComparativeAnalysisProps {
  currentStock: StockData;
}

interface StockScores {
  Performance: number;
  Stability: number;
  Value: number;
  Momentum: number;
}

/**
 * Main container component for comparative analysis.
 * Shows industry position card with toggle for detailed comparison.
 */
export default function ComparativeAnalysis({ currentStock }: ComparativeAnalysisProps) {
  const industry = currentStock.industry || 'Other';
  const [scores, setScores] = useState<StockScores>({
    Performance: 0,
    Stability: 0,
    Value: 0,
    Momentum: 0
  });
  const [rank, setRank] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  
  useEffect(() => {
    // Calculate the current stock's scores using the advanced scoring system
    const calcScores = {
      Performance: getAdvancedMetricScore(currentStock, "performance"),
      Stability: getAdvancedMetricScore(currentStock, "stability"),
      Value: getAdvancedMetricScore(currentStock, "value"),
      Momentum: getAdvancedMetricScore(currentStock, "momentum")
    };
    
    setScores(calcScores);
    
    // Load all stocks in this industry to calculate percentile rank
    const allIndustryStocks = getIndustryStocks(industry);
    
    // Calculate score percentile rank compared to all stocks in industry
    if (allIndustryStocks.length > 0) {
      // Get current stock's average score across all metrics
      const currentAvgScore = Object.values(calcScores).reduce((sum, val) => sum + val, 0) / 4;
      
      // Calculate scores for all other stocks
      const allScores = allIndustryStocks.map(stock => {
        const performanceScore = getAdvancedMetricScore(stock, "performance");
        const stabilityScore = getAdvancedMetricScore(stock, "stability");
        const valueScore = getAdvancedMetricScore(stock, "value");
        const momentumScore = getAdvancedMetricScore(stock, "momentum");
        
        // Calculate average score
        return (performanceScore + stabilityScore + valueScore + momentumScore) / 4;
      });
      
      // Sort all scores to find percentile
      const sortedScores = [...allScores].sort((a, b) => a - b);
      
      // Find the position of the current stock's score
      const position = sortedScores.findIndex(score => score >= currentAvgScore);
      
      // Calculate percentile (higher is better)
      const percentile = Math.round((position / sortedScores.length) * 100);
      setRank(percentile);
    } else {
      // Fallback if we don't have industry data
      setRank(50);
    }
    
    setIsLoading(false);
  }, [currentStock, industry]);

  return (
    <div className="comparative-analysis">
      {!isLoading && (
        <IndustryPosition 
          currentStock={currentStock}
          industry={industry}
          scores={scores}
          rank={rank}
        />
      )}
    </div>
  );
}

================
File: client/src/components/comparative-analysis/industry-position.tsx
================
import React, { useState, useEffect } from 'react';
import { ChevronDown, Award, TrendingUp, Shield, DollarSign, Zap, BarChart2 } from 'lucide-react';
import VerticalStockComparison from './vertical-comparison-new';
import MetricRankingPopup from './metric-ranking-popup';
import { StockData, getIndustryStocks } from '../../lib/stock-data';

interface IndustryPositionProps {
  currentStock: StockData;
  industry: string;
  scores: {
    Performance: number;
    Stability: number;
    Value: number;
    Momentum: number;
  };
  rank: number; // Percentile rank (0-100)
}

// Function to get letter grade based on percentile rank
const getGradeFromRank = (rank: number): string => {
  if (rank >= 90) return 'A+';
  if (rank >= 80) return 'A';
  if (rank >= 75) return 'A-';
  if (rank >= 70) return 'B+';
  if (rank >= 65) return 'B';
  if (rank >= 60) return 'B-';
  if (rank >= 55) return 'C+';
  if (rank >= 50) return 'C';
  if (rank >= 45) return 'C-';
  if (rank >= 40) return 'D+';
  if (rank >= 35) return 'D';
  if (rank >= 30) return 'D-';
  return 'F';
};

const IndustryPosition: React.FC<IndustryPositionProps> = ({
  currentStock,
  industry,
  scores,
  rank
}) => {
  const [showComparison, setShowComparison] = useState(false);
  const [industryStocks, setIndustryStocks] = useState<StockData[]>([]);
  const [industryStocksCount, setIndustryStocksCount] = useState(0);
  const [rankOrdinal, setRankOrdinal] = useState('');
  const stockGrade = getGradeFromRank(rank);
  
  // State for metric ranking popup
  const [isRankingPopupOpen, setIsRankingPopupOpen] = useState(false);
  const [selectedMetric, setSelectedMetric] = useState<string | null>(null);

  // Get industry stocks and calculate actual rank position
  useEffect(() => {
    const stocks = getIndustryStocks(industry);
    setIndustryStocks(stocks);
    setIndustryStocksCount(stocks.length);
    
    // Calculate actual rank position (e.g., 3rd out of 10)
    if (stocks.length > 0) {
      const actualPosition = Math.max(1, Math.ceil(stocks.length * (1 - rank / 100)));
      const ordinal = getOrdinalSuffix(actualPosition);
      setRankOrdinal(`${actualPosition}${ordinal} of ${stocks.length}`);
    }
  }, [industry, rank]);

  // Function to get ordinal suffix (1st, 2nd, 3rd, etc.)
  const getOrdinalSuffix = (num: number): string => {
    const j = num % 10;
    const k = num % 100;
    if (j === 1 && k !== 11) return 'st';
    if (j === 2 && k !== 12) return 'nd';
    if (j === 3 && k !== 13) return 'rd';
    return 'th';
  };

  // Generate a more specific performance statement based on rank and actual position
  const getPerformanceStatement = () => {
    const name = currentStock.name;
    let statement = '';
    
    if (rank >= 80) {
      statement = `${name} stands out as a top performer in the ${industry} sector.`;
    } else if (rank >= 60) {
      statement = `${name} outperforms most competitors in the ${industry} sector.`;
    } else if (rank >= 40) {
      statement = `${name} delivers average performance for its ${industry} sector.`;
    } else if (rank >= 20) {
      statement = `${name} lags behind compared to others in the ${industry} sector.`;
    } else {
      statement = `${name} significantly underperforms within the ${industry} sector.`;
    }
    
    // Add rank information if available
    if (rankOrdinal) {
      statement += ` Ranked ${rankOrdinal} companies.`;
    }
    
    return statement;
  };

  // Get color for metric based on value
  const getMetricColor = (value: number) => {
    if (value >= 80) return 'text-emerald-600';
    if (value >= 60) return 'text-green-600';
    if (value >= 40) return 'text-amber-600';
    if (value < 40) return 'text-red-600';
    return 'text-gray-700';
  };

  // Get background color gradient for metric bubbles
  const getMetricBgGradient = (value: number) => {
    if (value >= 80) return 'bg-gradient-to-br from-emerald-400 to-emerald-600';
    if (value >= 60) return 'bg-gradient-to-br from-green-400 to-green-600';
    if (value >= 40) return 'bg-gradient-to-br from-amber-400 to-amber-600';
    return 'bg-gradient-to-br from-red-400 to-red-600';
  };

  // Get icon for each metric
  const getMetricIcon = (metricName: string) => {
    switch(metricName) {
      case 'Performance': return <TrendingUp className="h-4 w-4" />;
      case 'Stability': return <Shield className="h-4 w-4" />;
      case 'Value': return <DollarSign className="h-4 w-4" />;
      case 'Momentum': return <Zap className="h-4 w-4" />;
      default: return null;
    }
  };

  // Toggle comparison view
  const toggleComparison = () => {
    setShowComparison(!showComparison);
  };
  
  // Handle opening the metric ranking popup
  const handleMetricClick = (metricName: string) => {
    setSelectedMetric(metricName);
    setIsRankingPopupOpen(true);
  };
  
  // Close the metric ranking popup
  const closeRankingPopup = () => {
    setIsRankingPopupOpen(false);
  };

  // Calculate average score
  const averageScore = Object.values(scores).reduce((sum, score) => sum + score, 0) / 4;

  return (
    <div className="mt-6">
      {/* Industry Position Card with subtle pattern background */}
      <div className="border border-gray-200 rounded-xl shadow-sm overflow-hidden bg-white relative">
        {/* Subtle background pattern */}
        <div className="absolute inset-0 opacity-5 pointer-events-none" 
             style={{ 
               backgroundImage: `radial-gradient(circle, #3b82f6 1px, transparent 1px)`,
               backgroundSize: '20px 20px' 
             }}>
        </div>
        
        <div className="p-5 relative border-b border-gray-100">
          <div className="flex flex-wrap justify-between items-start mb-4 gap-4">
            <div className="flex-1">
              <div className="flex items-center">
                <h3 className="text-xl font-bold text-gray-900">Industry Position</h3>
                <div className="ml-2 px-2 py-0.5 bg-blue-50 rounded-full border border-blue-100 text-xs font-medium text-blue-600">
                  {industry}
                </div>
              </div>
              
              {/* Enhanced performance statement with specific ranking */}
              <p className="text-gray-700 text-sm font-medium mt-2">{getPerformanceStatement()}</p>
            </div>
            
            {/* Modern Grade Circle with Progress Indicator */}
            <div className="relative h-24 w-24 flex-shrink-0">
              {/* Outer semi-circular track */}
              <div className="absolute inset-0 rounded-full overflow-hidden">
                <div className="w-full h-full bg-gray-100"></div>
                {/* Colored progress arc */}
                <div className="absolute top-0 left-0 w-full h-full"
                     style={{ 
                       clipPath: `polygon(50% 50%, 50% 0, ${50 + 50 * Math.sin(rank * 0.01 * 2 * Math.PI)}% ${50 - 50 * Math.cos(rank * 0.01 * 2 * Math.PI)}%, 50% 50%)`,
                       background: `conic-gradient(from 0deg, hsl(${Math.min(120, rank * 1.2)}, 70%, 50%) ${rank}%, transparent ${rank}%)`
                     }}>
                </div>
                {/* Inner white circle */}
                <div className="absolute inset-[15%] bg-white rounded-full shadow-inner"></div>
                
                {/* Grade content */}
                <div className="absolute inset-0 flex flex-col items-center justify-center">
                  <div className="text-sm font-bold tracking-wide" 
                       style={{ color: `hsl(${Math.min(120, rank * 1.2)}, 70%, 45%)` }}>
                    {stockGrade}
                  </div>
                  <div className="flex items-center gap-0.5 mt-1">
                    <BarChart2 className="h-3 w-3 text-blue-500" />
                    <span className="text-xs font-semibold text-gray-600">{rank}<span className="text-xs font-normal">%</span></span>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          {/* Metric Scores - Enhanced with modern design and better responsiveness */}
          <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 mt-4">
            {Object.entries(scores).map(([metric, score]) => (
              <div 
                key={metric} 
                className="relative group"
                onClick={() => handleMetricClick(metric)}
              >
                {/* Background glow effect on hover */}
                <div className="absolute inset-0 rounded-xl opacity-0 group-hover:opacity-30 transition-opacity duration-300 blur-sm -m-1"
                     style={{ backgroundColor: score >= 60 ? '#10b981' : score >= 40 ? '#f59e0b' : '#ef4444' }}></div>
                
                {/* Metric card with improved design */}
                <div className="bg-white border border-gray-200 p-3 rounded-xl shadow-sm group-hover:shadow-md transition-all duration-300 flex flex-col items-center cursor-pointer active:scale-95">
                  {/* Progress circle */}
                  <div className="relative w-10 h-10 mb-2">
                    {/* Background circle */}
                    <div className="absolute inset-0 rounded-full bg-gray-100"></div>
                    
                    {/* Progress circle */}
                    <div className="absolute inset-0 rounded-full"
                         style={{ 
                           background: `conic-gradient(${score >= 60 ? '#10b981' : score >= 40 ? '#f59e0b' : '#ef4444'} ${score}%, transparent ${score}%)` 
                         }}>
                    </div>
                    
                    {/* Inner white circle */}
                    <div className="absolute inset-[15%] bg-white rounded-full"></div>
                    
                    {/* Icon */}
                    <div className={`absolute inset-0 flex items-center justify-center ${score >= 60 ? 'text-emerald-600' : score >= 40 ? 'text-amber-600' : 'text-red-600'}`}>
                      {getMetricIcon(metric)}
                    </div>
                  </div>
                  
                  <p className="text-xs font-semibold text-gray-700 mb-1">{metric}</p>
                  <p className={`text-lg font-bold ${getMetricColor(score)}`}>
                    {score}
                  </p>
                </div>
              </div>
            ))}
          </div>
          
          {/* Compare Button - Enhanced with gradient and animation */}
          <button 
            className="w-full mt-5 py-3.5 px-4 bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white rounded-xl flex items-center justify-center transition-all duration-300 font-semibold shadow-md hover:shadow-lg transform hover:-translate-y-0.5 active:translate-y-0"
            onClick={toggleComparison}
          >
            <span className="mr-2">{showComparison ? 'Hide Comparison' : 'See How It Compares'}</span>
            <ChevronDown className={`h-5 w-5 transition-transform duration-300 ${showComparison ? 'transform rotate-180' : ''}`} />
          </button>
        </div>
        
        {/* Comparison Section (toggled) - Improved transition and slight background color */}
        <div className={`overflow-hidden transition-all duration-500 ease-in-out bg-gray-50 ${showComparison ? 'max-h-[2000px] opacity-100' : 'max-h-0 opacity-0'}`}>
          <div className="p-4">
            <VerticalStockComparison 
              currentStock={currentStock}
              industry={industry}
            />
          </div>
        </div>
      </div>
      
      {/* Metric Ranking Popup */}
      {selectedMetric && (
        <MetricRankingPopup
          isOpen={isRankingPopupOpen}
          onClose={closeRankingPopup}
          metricName={selectedMetric}
          currentStock={currentStock}
          industryStocks={industryStocks}
        />
      )}
    </div>
  );
};

export default IndustryPosition;

================
File: client/src/components/comparative-analysis/metric-ranking-popup.tsx
================
import React from 'react';
import { X } from 'lucide-react';
import { StockData } from '../../lib/stock-data';
import { getAdvancedMetricScore } from '../../lib/advanced-metric-scoring';

interface MetricRankingPopupProps {
  isOpen: boolean;
  onClose: () => void;
  metricName: string;
  currentStock: StockData;
  industryStocks: StockData[];
}

/**
 * A popup component that shows the top companies for a specific metric
 * with the current stock highlighted and its position in the ranking.
 */
const MetricRankingPopup: React.FC<MetricRankingPopupProps> = ({ 
  isOpen, 
  onClose, 
  metricName, 
  currentStock,
  industryStocks
}) => {
  if (!isOpen) return null;
  
  // Convert metric name to the format expected by the scoring function
  const metricKey = metricName.toLowerCase() as 'performance' | 'stability' | 'value' | 'momentum';
  
  // Filter out current stock from industry stocks to avoid duplication
  const filteredIndustryStocks = industryStocks.filter(
    stock => stock.ticker !== currentStock.ticker
  );
  
  // Calculate scores for all stocks including the current one
  const stockScores = [...filteredIndustryStocks, currentStock].map(stock => {
    // Get score for this metric
    const score = getAdvancedMetricScore(stock, metricKey);
    
    return {
      ticker: stock.ticker,
      name: stock.name,
      score,
      isCurrentStock: stock.ticker === currentStock.ticker
    };
  });
  
  // Sort by score in descending order
  const sortedStocks = [...stockScores].sort((a, b) => b.score - a.score);
  
  // Limit to top 10 for display
  const topTenStocks = sortedStocks.slice(0, 10);
  
  // Find the rank of the current stock
  const currentStockRank = sortedStocks.findIndex(stock => stock.ticker === currentStock.ticker) + 1;
  
  // Get color based on score
  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-emerald-600';
    if (score >= 60) return 'text-green-600';
    if (score >= 40) return 'text-amber-600';
    return 'text-red-600';
  };
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-lg max-w-md w-full max-h-[90vh] overflow-hidden flex flex-col">
        {/* Header */}
        <div className="p-4 border-b border-gray-200 flex justify-between items-center bg-gradient-to-r from-blue-50 to-indigo-50">
          <h3 className="font-bold text-lg text-gray-800">
            Top Companies by {metricName}
          </h3>
          <button 
            onClick={onClose}
            className="rounded-full p-1 hover:bg-gray-200 transition-colors"
          >
            <X size={20} className="text-gray-600" />
          </button>
        </div>
        
        {/* Current stock position */}
        <div className="p-4 bg-blue-50 border-b border-blue-100">
          <p className="text-sm text-gray-700">
            <span className="font-bold text-blue-700">{currentStock.name}</span> ranks <span className="font-bold text-blue-700">{getOrdinalSuffix(currentStockRank)}</span> out of {sortedStocks.length} companies in {metricName.toLowerCase()}.
          </p>
        </div>
        
        {/* Companies list */}
        <div className="overflow-y-auto flex-1">
          <div className="divide-y divide-gray-100">
            {topTenStocks.map((stock, index) => (
              <div 
                key={stock.ticker} 
                className={`p-4 flex items-center ${stock.isCurrentStock ? 'bg-blue-50' : 'hover:bg-gray-50'}`}
              >
                {/* Subtle colored numbers for all positions */}
                {index < 3 ? (
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 font-bold 
                    ${index === 0 ? 'bg-yellow-100 text-yellow-800 border border-yellow-200' : 
                      index === 1 ? 'bg-gray-100 text-gray-700 border border-gray-200' : 
                      'bg-amber-100 text-amber-800 border border-amber-200'}`}>
                    {index + 1}
                  </div>
                ) : (
                  <div className="w-8 h-8 rounded-full flex items-center justify-center mr-3 font-bold text-sm bg-gray-100 text-gray-700">
                    {index + 1}
                  </div>
                )}
                
                {/* Company info */}
                <div className="flex-1">
                  <div className="font-semibold text-gray-800 flex items-center">
                    {stock.name}
                    {stock.isCurrentStock && (
                      <span className="ml-2 text-xs font-medium px-2 py-0.5 bg-blue-100 text-blue-700 rounded-full">Current</span>
                    )}
                  </div>
                  <div className="text-xs text-gray-500">{stock.ticker}</div>
                </div>
                
                {/* Score */}
                <div className={`font-bold text-lg ${getScoreColor(stock.score)}`}>
                  {stock.score}
                </div>
              </div>
            ))}
          </div>
        </div>
        
        {/* Footer */}
        <div className="p-3 border-t border-gray-200 bg-gray-50">
          <p className="text-xs text-gray-500 text-center">
            Scores are calculated based on multiple factors and range from 0-100.
          </p>
        </div>
      </div>
    </div>
  );
};

// Helper function to get ordinal suffix (1st, 2nd, 3rd, etc.)
function getOrdinalSuffix(num: number): string {
  const j = num % 10;
  const k = num % 100;
  
  let suffix = 'th';
  if (j === 1 && k !== 11) suffix = 'st';
  if (j === 2 && k !== 12) suffix = 'nd';
  if (j === 3 && k !== 13) suffix = 'rd';
  
  return num + suffix;
}

export default MetricRankingPopup;

================
File: client/src/components/comparative-analysis/vertical-comparison-new.tsx
================
import React, { useState, useEffect } from "react";
import { StockData } from "../../lib/stock-data";
import { getIndustryStocks } from "../../lib/stock-data";
import { getAdvancedMetricScore } from "../../lib/advanced-metric-scoring";
import { getIndustryAverages } from "../../lib/industry-data";
import { marketAverages } from "../../lib/market-averages";

interface VerticalStockComparisonProps {
  currentStock: StockData;
  industry?: string;
}

interface ComparisonStockData {
  symbol: string;
  name: string;
  color: string;
  scores: {
    Performance: number;
    Stability: number;
    Value: number;
    Momentum: number;
  };
}

/**
 * A vertical comparison component that shows how a stock compares to ALL other stocks in its industry
 * using vertical bars for easy comparison.
 */
export default function VerticalStockComparison({
  currentStock,
  industry: propIndustry,
}: VerticalStockComparisonProps) {
  // Get the industry for the current stock (from props or the stock itself)
  const industry = propIndustry || currentStock.industry || "Other";

  // Load all stocks in this industry
  const allIndustryStocks = getIndustryStocks(industry);

  // State for UI controls
  const [selectedCompetitor, setSelectedCompetitor] = useState("");

  // Prepare industry averages and market data
  const industryAverages = getIndustryAverages(industry);

  // Create a mapping of all stocks with their scores
  const [industryStocksWithScores, setIndustryStocksWithScores] = useState<
    Record<string, ComparisonStockData>
  >({});
  
  const [currentStockScores, setCurrentStockScores] = useState<ComparisonStockData>({
    symbol: currentStock.ticker,
    name: currentStock.name,
    color: "#10b981", // emerald-500 for main stock
    scores: {
      Performance: 0,
      Stability: 0,
      Value: 0,
      Momentum: 0,
    },
  });

  // Selected competitor data
  const [competitorData, setCompetitorData] = useState<ComparisonStockData | null>(null);

  // Calculate scores for all stocks in the industry
  useEffect(() => {
    const calculateScores = () => {
      console.log(`Calculating scores for industry: ${industry}`);
      console.log(`Current stock: ${currentStock.ticker} (${currentStock.name})`);
      console.log(`All industry stocks found: ${allIndustryStocks.length}`);
      console.log("Industry stocks:", allIndustryStocks.map(stock => stock.ticker).join(", "));
      
      // Calculate scores for the current stock
      const mainPerformanceScore = getAdvancedMetricScore(currentStock, 'performance');
      const mainStabilityScore = getAdvancedMetricScore(currentStock, 'stability');
      const mainValueScore = getAdvancedMetricScore(currentStock, 'value');
      const mainMomentumScore = getAdvancedMetricScore(currentStock, 'momentum');
      
      console.log(`Main stock scores - Performance: ${mainPerformanceScore}, Stability: ${mainStabilityScore}, Value: ${mainValueScore}, Momentum: ${mainMomentumScore}`);
      
      setCurrentStockScores({
        symbol: currentStock.ticker,
        name: currentStock.name,
        color: '#10b981', // emerald-500 for main stock
        scores: {
          Performance: mainPerformanceScore,
          Stability: mainStabilityScore,
          Value: mainValueScore,
          Momentum: mainMomentumScore
        }
      });
      
      // Calculate scores for all other stocks in the industry
      const stockScoresMap: Record<string, ComparisonStockData> = {};
      
      // Process actual stocks from the industry
      console.log(`Processing ${allIndustryStocks.length} industry stocks for comparison...`);
      
      allIndustryStocks.forEach(stock => {
        // Skip the current stock as we already calculated it
        if (stock.ticker === currentStock.ticker) return;
        
        try {
          const performanceScore = getAdvancedMetricScore(stock, 'performance');
          const stabilityScore = getAdvancedMetricScore(stock, 'stability');
          const valueScore = getAdvancedMetricScore(stock, 'value');
          const momentumScore = getAdvancedMetricScore(stock, 'momentum');
          
          stockScoresMap[stock.ticker] = {
            symbol: stock.ticker,
            name: stock.name,
            color: '#a855f7', // purple-500 for competitors
            scores: {
              Performance: performanceScore,
              Stability: stabilityScore,
              Value: valueScore,
              Momentum: momentumScore
            }
          };
          
          console.log(`Added competitor ${stock.ticker} with scores - Performance: ${performanceScore}, Stability: ${stabilityScore}, Value: ${valueScore}, Momentum: ${momentumScore}`);
        } catch (error) {
          console.error(`Error calculating scores for ${stock.ticker}:`, error);
        }
      });
      
      console.log(`Total competitors found: ${Object.keys(stockScoresMap).length}`);
      setIndustryStocksWithScores(stockScoresMap);
      
      // Set initial competitor if available
      const competitorTickers = Object.keys(stockScoresMap);
      if (competitorTickers.length > 0 && !selectedCompetitor) {
        setSelectedCompetitor(competitorTickers[0]);
        setCompetitorData(stockScoresMap[competitorTickers[0]]);
        console.log(`Set initial competitor to: ${competitorTickers[0]}`);
      }
    };
    
    calculateScores();
  }, [currentStock, allIndustryStocks, industry, selectedCompetitor]);
  
  // Update competitor data when selection changes
  useEffect(() => {
    if (selectedCompetitor && industryStocksWithScores[selectedCompetitor]) {
      setCompetitorData(industryStocksWithScores[selectedCompetitor]);
    }
  }, [selectedCompetitor, industryStocksWithScores]);
  
  // Calculate industry and market benchmarks
  const industryBenchmarks = {
    Performance: 50, // Default value
    Stability: 50,   // Default value
    Value: 50,       // Default value
    Momentum: 50     // Default value
  };
  
  const marketBenchmarks = {
    Performance: 50, // Default value
    Stability: 50,   // Default value
    Value: 50,       // Default value
    Momentum: 50     // Default value
  };
  
  // Define the metrics to show
  const metrics = ['Performance', 'Stability', 'Value', 'Momentum'];

  // Check if we have competitor data available
  const hasCompetitors = Object.keys(industryStocksWithScores).length > 0;
  
  if (!hasCompetitors) {
    return (
      <div className="rounded-xl bg-white p-4 border border-gray-200">
        <div className="text-sm text-gray-600 font-medium">
          No other stocks available in this industry for comparison.
        </div>
      </div>
    );
  }
  
  return (
    <div className="comparison-container rounded-xl bg-white border border-gray-200 shadow-sm overflow-hidden">
      <div className="p-4">
        {/* Competitor selector - Enhanced & more visible */}
        <div className="mb-6">
          <label className="block text-sm font-semibold text-gray-800 mb-2">Compare with competitor:</label>
          <div className="relative">
            <select 
              className="appearance-none w-full px-4 py-3 border border-gray-300 bg-white rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-400 focus:border-indigo-400 text-gray-800 text-base transition-colors duration-200"
              value={selectedCompetitor}
              onChange={(e) => setSelectedCompetitor(e.target.value)}
            >
              {Object.entries(industryStocksWithScores).map(([ticker, data]) => (
                <option key={ticker} value={ticker} className="text-gray-800">
                  {data.name} ({ticker})
                </option>
              ))}
            </select>
            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-600">
              <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
              </svg>
            </div>
          </div>
          <div className="mt-1 text-xs text-gray-500">
            {Object.keys(industryStocksWithScores).length} competitor stocks in {industry} industry
          </div>
        </div>
        
        {/* Legend with improved styling and clear text contrast */}
        <div className="flex items-center justify-between mb-4 px-2">
          <div className="flex items-center gap-1.5">
            <span className="inline-block h-3 w-3 bg-emerald-500 rounded-full"></span>
            <span className="text-xs font-semibold text-gray-800">{currentStock.name} ({currentStock.ticker})</span>
          </div>
          <div className="flex items-center gap-1.5">
            <span className="inline-block h-3 w-3 bg-purple-500 rounded-full"></span>
            <span className="text-xs font-semibold text-gray-800">{competitorData?.name || ''} ({competitorData?.symbol || ''})</span>
          </div>
        </div>
        
        {/* Vertical bar comparison for each metric - Enhanced styling */}
        {competitorData && (
          <div className="space-y-6">
            {metrics.map(metric => {
              // Get values for this metric
              const mainValue = currentStockScores.scores[metric as keyof typeof currentStockScores.scores] || 0;
              const compValue = competitorData.scores[metric as keyof typeof competitorData.scores] || 0;
              const industryValue = industryBenchmarks[metric as keyof typeof industryBenchmarks] || 0;
              const marketValue = marketBenchmarks[metric as keyof typeof marketBenchmarks] || 0;
              
              // Determine higher value
              const mainHigher = mainValue > compValue;
              const compHigher = compValue > mainValue;
              
              // Calculate difference between stocks
              const difference = Math.abs(mainValue - compValue).toFixed(0);
              const diffText = mainHigher 
                ? `${currentStock.ticker} outperforms by ${difference} points` 
                : mainValue === compValue 
                  ? 'Equal performance' 
                  : `${competitorData.symbol} outperforms by ${difference} points`;
              
              return (
                <div key={metric} className="space-y-2 bg-gray-50 p-3 rounded-lg">
                  <div className="flex justify-between items-center">
                    <div className="font-semibold text-gray-800">{metric}</div>
                    <div className="flex items-center gap-2">
                      <div className="flex items-center">
                        <span className="inline-block h-2 w-2 bg-gray-600 rounded-full mr-1"></span>
                        <span className="text-xs text-gray-600">Industry</span>
                      </div>
                      <div className="flex items-center">
                        <span className="inline-block h-2 w-2 bg-gray-400 rounded-full mr-1"></span>
                        <span className="text-xs text-gray-600">Market</span>
                      </div>
                    </div>
                  </div>
                  
                  {/* Main stock bar - Improved with shadow and animation */}
                  <div>
                    <div className="h-10 bg-gray-200 rounded-xl relative overflow-hidden shadow-inner">
                      <div 
                        className="h-full rounded-xl flex items-center justify-end pr-3 shadow-md"
                        style={{ 
                          width: `${mainValue}%`, 
                          backgroundColor: '#10b981', // Emerald-500 for consistency
                          transition: 'width 0.8s cubic-bezier(0.34, 1.56, 0.64, 1)'
                        }}
                      >
                        {/* Only show text if bar is wide enough */}
                        {mainValue > 25 && (
                          <span className="text-sm font-bold text-white drop-shadow-md tracking-wide">{mainValue.toFixed(0)}</span>
                        )}
                      </div>
                      
                      {/* Show value outside the bar if it's too narrow */}
                      {mainValue <= 25 && (
                        <span className="absolute text-sm font-bold text-emerald-600 left-[101%] top-1/2 transform -translate-y-1/2">{mainValue.toFixed(0)}</span>
                      )}
                      
                      {/* Industry marker */}
                      <div 
                        className="absolute h-full w-1 bg-gray-600 z-10 shadow-md" 
                        style={{ left: `${industryValue}%` }}
                      ></div>
                      
                      {/* Market marker */}
                      <div 
                        className="absolute h-full w-1 bg-gray-400 z-10 shadow-md" 
                        style={{ left: `${marketValue}%` }}
                      ></div>
                    </div>
                  </div>
                  
                  {/* Competitor stock bar */}
                  <div>
                    <div className="h-10 bg-gray-200 rounded-xl relative overflow-hidden shadow-inner">
                      <div 
                        className="h-full rounded-xl flex items-center justify-end pr-3 shadow-md"
                        style={{ 
                          width: `${compValue}%`, 
                          backgroundColor: '#a855f7', // Purple-500 for competitor
                          transition: 'width 0.8s cubic-bezier(0.34, 1.56, 0.64, 1)'
                        }}
                      >
                        {/* Only show text if bar is wide enough */}
                        {compValue > 25 && (
                          <span className="text-sm font-bold text-white drop-shadow-md tracking-wide">{compValue.toFixed(0)}</span>
                        )}
                      </div>
                      
                      {/* Show value outside the bar if it's too narrow */}
                      {compValue <= 25 && (
                        <span className="absolute text-sm font-bold text-purple-600 left-[101%] top-1/2 transform -translate-y-1/2">{compValue.toFixed(0)}</span>
                      )}
                      
                      {/* Industry marker */}
                      <div 
                        className="absolute h-full w-1 bg-gray-600 z-10 shadow-md" 
                        style={{ left: `${industryValue}%` }}
                      ></div>
                      
                      {/* Market marker */}
                      <div 
                        className="absolute h-full w-1 bg-gray-400 z-10 shadow-md" 
                        style={{ left: `${marketValue}%` }}
                      ></div>
                    </div>
                  </div>
                  
                  {/* Comparison summary */}
                  <div className="text-xs font-medium mt-1 text-center text-gray-600">
                    {diffText}
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
}

================
File: client/src/components/comparative-analysis/vertical-comparison.tsx
================
import React, { useState, useEffect } from "react";
import { StockData } from "../../lib/stock-data";
import { getIndustryStocks } from "../../lib/stock-data";
import { getAdvancedMetricScore } from "../../lib/advanced-metric-scoring";
import { getIndustryAverages } from "../../lib/industry-data";
import { marketAverages } from "../../lib/market-averages";

interface VerticalStockComparisonProps {
  currentStock: StockData;
  industry?: string;
}

interface ComparisonStockData {
  symbol: string;
  name: string;
  color: string;
  scores: {
    Performance: number;
    Stability: number;
    Value: number;
    Momentum: number;
  };
}

/**
 * A vertical comparison component that shows how a stock compares to ALL other stocks in its industry
 * using vertical bars for easy comparison.
 */
export default function VerticalStockComparison({
  currentStock,
  industry: propIndustry,
}: VerticalStockComparisonProps) {
  // Get the industry for the current stock (from props or the stock itself)
  const industry = propIndustry || currentStock.industry || "Other";

  // Load all stocks in this industry
  const allIndustryStocks = getIndustryStocks(industry);

  // State for UI controls
  const [showFullComparison, setShowFullComparison] = useState(false);
  const [showAllIndustryComparison, setShowAllIndustryComparison] =
    useState(false);
  const [selectedCompetitor, setSelectedCompetitor] = useState("");

  // Prepare industry averages and market data
  const industryAverages = getIndustryAverages(industry);

  // Create a mapping of all stocks with their scores
  const [industryStocksWithScores, setIndustryStocksWithScores] = useState<
    Record<string, ComparisonStockData>
  >({});
  const [currentStockScores, setCurrentStockScores] =
    useState<ComparisonStockData>({
      symbol: currentStock.ticker,
      name: currentStock.name,
      color: "#10b981", // emerald-500 for main stock
      scores: {
        Performance: 0,
        Stability: 0,
        Value: 0,
        Momentum: 0,
      },
    });

  // Selected competitor data
  const [competitorData, setCompetitorData] =
    useState<ComparisonStockData | null>(null);

  // Calculate scores for all stocks in the industry
  useEffect(() => {
    const calculateScores = () => {
      console.log(`Calculating scores for industry: ${industry}`);
      console.log(
        `Current stock: ${currentStock.ticker} (${currentStock.name})`,
      );
      console.log(`All industry stocks found: ${allIndustryStocks.length}`);
      console.log(
        "Industry stocks:",
        allIndustryStocks.map((stock) => stock.ticker).join(", "),
      );

      // Calculate scores for the current stock
      const mainPerformanceScore = getAdvancedMetricScore(
        currentStock,
        "performance",
      );
      const mainStabilityScore = getAdvancedMetricScore(
        currentStock,
        "stability",
      );
      const mainValueScore = getAdvancedMetricScore(currentStock, "value");
      const mainMomentumScore = getAdvancedMetricScore(
        currentStock,
        "momentum",
      );

      console.log(
        `Main stock scores - Performance: ${mainPerformanceScore}, Stability: ${mainStabilityScore}, Value: ${mainValueScore}, Momentum: ${mainMomentumScore}`,
      );

      setCurrentStockScores({
        symbol: currentStock.ticker,
        name: currentStock.name,
        color: "#10b981", // emerald-500 for main stock
        scores: {
          Performance: mainPerformanceScore,
          Stability: mainStabilityScore,
          Value: mainValueScore,
          Momentum: mainMomentumScore,
        },
      });

      // Calculate scores for all other stocks in the industry
      const stockScoresMap: Record<string, ComparisonStockData> = {};

      // Add hard-coded stocks for specific industries if we have an empty array
      // This is a fallback for testing only
      if (allIndustryStocks.length <= 1 && industry === "Real Estate") {
        console.log(
          "Adding fallback Real Estate comparison stocks since getIndustryStocks returned insufficient data",
        );

        // Add mock data just for this industry as a fallback
        stockScoresMap["O"] = {
          symbol: "O",
          name: "Realty Income",
          color: "#3b82f6", // blue-500
          scores: {
            Performance: 48,
            Stability: 82,
            Value: 73,
            Momentum: 62,
          },
        };

        stockScoresMap["SPG"] = {
          symbol: "SPG",
          name: "Simon Property",
          color: "#3b82f6",
          scores: {
            Performance: 52,
            Stability: 68,
            Value: 77,
            Momentum: 66,
          },
        };

        stockScoresMap["AVB"] = {
          symbol: "AVB",
          name: "AvalonBay",
          color: "#7c3aed",
          scores: {
            Performance: 47,
            Stability: 76,
            Value: 69,
            Momentum: 58,
          },
        };
      } else {
        // Process actual stocks from the industry
        console.log(
          `Processing ${allIndustryStocks.length} industry stocks for comparison...`,
        );

        allIndustryStocks.forEach((stock) => {
          // Skip the current stock as we already calculated it
          if (stock.ticker === currentStock.ticker) return;

          try {
            const performanceScore = getAdvancedMetricScore(
              stock,
              "performance",
            );
            const stabilityScore = getAdvancedMetricScore(stock, "stability");
            const valueScore = getAdvancedMetricScore(stock, "value");
            const momentumScore = getAdvancedMetricScore(stock, "momentum");

            stockScoresMap[stock.ticker] = {
              symbol: stock.ticker,
              name: stock.name,
              color: "#3b82f6", // blue-500 for competitors
              scores: {
                Performance: performanceScore,
                Stability: stabilityScore,
                Value: valueScore,
                Momentum: momentumScore,
              },
            };

            console.log(
              `Added competitor ${stock.ticker} with scores - Performance: ${performanceScore}, Stability: ${stabilityScore}, Value: ${valueScore}, Momentum: ${momentumScore}`,
            );
          } catch (error) {
            console.error(
              `Error calculating scores for ${stock.ticker}:`,
              error,
            );
          }
        });
      }

      console.log(
        `Total competitors found: ${Object.keys(stockScoresMap).length}`,
      );
      setIndustryStocksWithScores(stockScoresMap);

      // Set initial competitor if available
      const competitorTickers = Object.keys(stockScoresMap);
      if (competitorTickers.length > 0 && !selectedCompetitor) {
        setSelectedCompetitor(competitorTickers[0]);
        setCompetitorData(stockScoresMap[competitorTickers[0]]);
        console.log(`Set initial competitor to: ${competitorTickers[0]}`);
      }
    };

    calculateScores();
  }, [currentStock, allIndustryStocks, industry, selectedCompetitor]);

  // Update competitor data when selection changes
  useEffect(() => {
    if (selectedCompetitor && industryStocksWithScores[selectedCompetitor]) {
      setCompetitorData(industryStocksWithScores[selectedCompetitor]);
    }
  }, [selectedCompetitor, industryStocksWithScores]);

  // Calculate industry and market benchmarks
  const industryBenchmarks = {
    Performance: 50, // Default value
    Stability: 50, // Default value
    Value: 50, // Default value
    Momentum: 50, // Default value
  };

  const marketBenchmarks = {
    Performance: 50, // Default value
    Stability: 50, // Default value
    Value: 50, // Default value
    Momentum: 50, // Default value
  };

  // Toggle functions for UI
  const toggleFullComparison = () => {
    setShowFullComparison(!showFullComparison);
    if (showAllIndustryComparison) setShowAllIndustryComparison(false);
  };

  const toggleIndustryComparison = () => {
    setShowAllIndustryComparison(!showAllIndustryComparison);
    if (showFullComparison) setShowFullComparison(false);
  };

  // Define the metrics to show
  const metrics = ["Performance", "Stability", "Value", "Momentum"];

  // Check if we have competitor data available
  const hasCompetitors = Object.keys(industryStocksWithScores).length > 0;

  if (!hasCompetitors) {
    return (
      <div className="mt-4 p-4 border rounded-lg bg-gray-50">
        <div className="text-gray-700 font-medium mb-2">
          Industry Comparison
        </div>
        <div className="text-sm text-gray-500">
          No other stocks available in this industry for comparison.
        </div>
      </div>
    );
  }

  return (
    <div className="mt-4 p-4 border rounded-lg bg-gray-50">
      <div className="flex justify-between items-center mb-4">
        <div className="text-gray-700 font-medium">Industry Comparison</div>
        <div className="flex space-x-2">
          <button
            className="text-xs px-2 py-1 rounded border border-gray-300 hover:bg-gray-100"
            onClick={toggleFullComparison}
          >
            {showFullComparison ? "Hide Details" : "Show Details"}
          </button>
          <button
            className="text-xs px-2 py-1 rounded border border-gray-300 hover:bg-gray-100"
            onClick={toggleIndustryComparison}
          >
            {showAllIndustryComparison ? "Hide All Stocks" : "Show All Stocks"}
          </button>
        </div>
      </div>

      {/* Competitor selector */}
      {!showAllIndustryComparison && (
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Compare with:
          </label>
          <div className="relative">
            <select
              className="appearance-none w-full px-4 py-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 text-base text-gray-700"
              value={selectedCompetitor}
              onChange={(e) => {
                console.log("Selected competitor:", e.target.value);
                setSelectedCompetitor(e.target.value);
              }}
            >
              {Object.keys(industryStocksWithScores).length === 0 ? (
                <option value="">No competitors available</option>
              ) : (
                Object.entries(industryStocksWithScores).map(
                  ([ticker, data]) => (
                    <option key={ticker} value={ticker}>
                      {data.name} ({ticker})
                    </option>
                  ),
                )
              )}
            </select>
            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
              <svg
                className="h-5 w-5"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
              >
                <path
                  fillRule="evenodd"
                  d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                  clipRule="evenodd"
                />
              </svg>
            </div>
          </div>
          <div className="mt-1 text-xs text-gray-500">
            {Object.keys(industryStocksWithScores).length} competitor stocks
            available
          </div>
        </div>
      )}

      {/* Vertical bar comparison for each metric */}
      {!showAllIndustryComparison && competitorData && (
        <div className="space-y-6">
          {metrics.map((metric) => {
            // Get values for this metric
            const mainValue =
              currentStockScores.scores[
                metric as keyof typeof currentStockScores.scores
              ] || 0;
            const compValue =
              competitorData.scores[
                metric as keyof typeof competitorData.scores
              ] || 0;
            const industryValue =
              industryBenchmarks[metric as keyof typeof industryBenchmarks] ||
              0;
            const marketValue =
              marketBenchmarks[metric as keyof typeof marketBenchmarks] || 0;

            // Determine higher value
            const mainHigher = mainValue > compValue;
            const compHigher = compValue > mainValue;

            return (
              <div key={metric} className="space-y-1">
                <div className="flex justify-between text-xs text-gray-500">
                  <div>{metric}</div>
                  <div>
                    <span className="inline-block h-2 w-2 bg-gray-500 rounded-full mr-1"></span>
                    Industry
                    <span className="inline-block h-2 w-2 bg-gray-300 rounded-full ml-3 mr-1"></span>
                    Market
                  </div>
                </div>

                {/* Main stock bar */}
                <div>
                  <div className="h-9 bg-gray-100 rounded-full relative overflow-hidden">
                    <div
                      className="h-full rounded-full flex items-center justify-end pr-3"
                      style={{
                        width: `${mainValue}%`,
                        backgroundColor: currentStockScores.color,
                        transition: "width 0.5s ease-in-out",
                      }}
                    >
                      {/* Only show ticker symbol if bar is wide enough */}
                      {mainValue > 20 && (
                        <span className="text-xs font-bold text-white drop-shadow-md">
                          {currentStockScores.symbol}
                        </span>
                      )}
                    </div>

                    {/* Show ticker outside the bar if it's too narrow */}
                    {mainValue <= 20 && (
                      <span className="absolute text-xs font-bold text-gray-700 left-[101%]">
                        {currentStockScores.symbol}
                      </span>
                    )}

                    {/* Industry marker */}
                    <div
                      className="absolute h-full w-0.5 bg-gray-500 z-10"
                      style={{ left: `${industryValue}%` }}
                    ></div>

                    {/* Market marker */}
                    <div
                      className="absolute h-full w-0.5 bg-gray-300 z-10"
                      style={{ left: `${marketValue}%` }}
                    ></div>
                  </div>

                  {/* Value label */}
                  <div
                    className={`text-sm font-semibold mt-1 ${mainHigher ? "text-emerald-600" : "text-gray-700"}`}
                  >
                    {(mainValue || 0).toFixed(0)}
                  </div>
                </div>

                {/* Competitor stock bar */}
                <div>
                  <div className="h-9 bg-gray-100 rounded-full relative overflow-hidden">
                    <div
                      className="h-full rounded-full flex items-center justify-end pr-3"
                      style={{
                        width: `${compValue}%`,
                        backgroundColor: competitorData.color,
                        transition: "width 0.5s ease-in-out",
                      }}
                    >
                      {/* Only show ticker symbol if bar is wide enough */}
                      {compValue > 20 && (
                        <span className="text-xs font-bold text-white drop-shadow-md">
                          {competitorData.symbol}
                        </span>
                      )}
                    </div>

                    {/* Show ticker outside the bar if it's too narrow */}
                    {compValue <= 20 && (
                      <span className="absolute text-xs font-bold text-gray-700 left-[101%]">
                        {competitorData.symbol}
                      </span>
                    )}

                    {/* Industry marker */}
                    <div
                      className="absolute h-full w-0.5 bg-gray-500 z-10"
                      style={{ left: `${industryValue}%` }}
                    ></div>

                    {/* Market marker */}
                    <div
                      className="absolute h-full w-0.5 bg-gray-300 z-10"
                      style={{ left: `${marketValue}%` }}
                    ></div>
                  </div>

                  {/* Value label */}
                  <div
                    className={`text-sm font-semibold mt-1 ${compHigher ? "text-purple-600" : "text-gray-700"}`}
                  >
                    {(compValue || 0).toFixed(0)}
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      )}

      {/* Show all industry stocks comparison */}
      {showAllIndustryComparison && (
        <div className="mt-6 border-t pt-4 transition-all duration-300 ease-in-out">
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="bg-gray-50">
                  <th className="text-left py-2 px-2 rounded-l-lg font-semibold text-gray-700">
                    Stock
                  </th>
                  <th className="text-center py-2 px-2 font-semibold text-gray-700">
                    Performance
                  </th>
                  <th className="text-center py-2 px-2 font-semibold text-gray-700">
                    Stability
                  </th>
                  <th className="text-center py-2 px-2 font-semibold text-gray-700">
                    Value
                  </th>
                  <th className="text-center py-2 px-2 rounded-r-lg font-semibold text-gray-700">
                    Momentum
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-100">
                {/* Main stock row */}
                <tr className="hover:bg-gray-50 transition-colors duration-150 bg-gray-50">
                  <td className="py-3 px-2 font-medium text-gray-800">
                    {currentStockScores.symbol}{" "}
                    <span className="text-xs text-gray-500">(Selected)</span>
                  </td>
                  <td className="text-center py-3 px-2">
                    {(currentStockScores.scores.Performance || 0).toFixed(0)}
                  </td>
                  <td className="text-center py-3 px-2">
                    {(currentStockScores.scores.Stability || 0).toFixed(0)}
                  </td>
                  <td className="text-center py-3 px-2">
                    {(currentStockScores.scores.Value || 0).toFixed(0)}
                  </td>
                  <td className="text-center py-3 px-2">
                    {(currentStockScores.scores.Momentum || 0).toFixed(0)}
                  </td>
                </tr>

                {/* All other industry stocks */}
                {Object.entries(industryStocksWithScores).map(
                  ([ticker, stockData]) => (
                    <tr
                      key={ticker}
                      className={`hover:bg-gray-50 transition-colors duration-150 ${ticker === selectedCompetitor ? "bg-purple-50" : ""} cursor-pointer`}
                      onClick={() => {
                        setSelectedCompetitor(ticker);
                        setShowAllIndustryComparison(false);
                      }}
                    >
                      <td className="py-3 px-2 font-medium text-gray-700">
                        {stockData.symbol}
                      </td>
                      <td className="text-center py-3 px-2">
                        {(stockData.scores.Performance || 0).toFixed(0)}
                      </td>
                      <td className="text-center py-3 px-2">
                        {(stockData.scores.Stability || 0).toFixed(0)}
                      </td>
                      <td className="text-center py-3 px-2">
                        {(stockData.scores.Value || 0).toFixed(0)}
                      </td>
                      <td className="text-center py-3 px-2">
                        {(stockData.scores.Momentum || 0).toFixed(0)}
                      </td>
                    </tr>
                  ),
                )}

                {/* Industry and market averages */}
                <tr className="hover:bg-gray-50 transition-colors duration-150 bg-gray-100">
                  <td className="py-3 px-2 font-medium text-gray-600">
                    Industry Avg
                  </td>
                  <td className="text-center py-3 px-2 text-gray-600">
                    {(industryBenchmarks.Performance || 0).toFixed(0)}
                  </td>
                  <td className="text-center py-3 px-2 text-gray-600">
                    {(industryBenchmarks.Stability || 0).toFixed(0)}
                  </td>
                  <td className="text-center py-3 px-2 text-gray-600">
                    {(industryBenchmarks.Value || 0).toFixed(0)}
                  </td>
                  <td className="text-center py-3 px-2 text-gray-600">
                    {(industryBenchmarks.Momentum || 0).toFixed(0)}
                  </td>
                </tr>
                <tr className="hover:bg-gray-50 transition-colors duration-150 bg-gray-100">
                  <td className="py-3 px-2 font-medium text-gray-500">
                    Market Avg
                  </td>
                  <td className="text-center py-3 px-2 text-gray-500">
                    {(marketBenchmarks.Performance || 0).toFixed(0)}
                  </td>
                  <td className="text-center py-3 px-2 text-gray-500">
                    {(marketBenchmarks.Stability || 0).toFixed(0)}
                  </td>
                  <td className="text-center py-3 px-2 text-gray-500">
                    {(marketBenchmarks.Value || 0).toFixed(0)}
                  </td>
                  <td className="text-center py-3 px-2 text-gray-500">
                    {(marketBenchmarks.Momentum || 0).toFixed(0)}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>

          <div className="text-xs text-gray-500 mt-3">
            Click any row to select that stock for detailed comparison
          </div>
        </div>
      )}

      {/* Detailed comparison table */}
      {showFullComparison && competitorData && (
        <div className="mt-6 border-t pt-4 transition-all duration-300 ease-in-out">
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="bg-gray-50">
                  <th className="text-left py-2 px-2 rounded-l-lg font-semibold text-gray-700">
                    Metrics
                  </th>
                  <th
                    className="text-center py-2 px-2 font-semibold"
                    style={{ color: currentStockScores.color }}
                  >
                    {currentStockScores.symbol}
                  </th>
                  <th
                    className="text-center py-2 px-2 font-semibold"
                    style={{ color: competitorData.color }}
                  >
                    {competitorData.symbol}
                  </th>
                  <th className="text-center py-2 px-2 font-semibold text-gray-600">
                    Industry
                  </th>
                  <th className="text-center py-2 px-2 rounded-r-lg font-semibold text-gray-400">
                    Market
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-100">
                {metrics.map((metric) => {
                  const mainValue =
                    currentStockScores.scores[
                      metric as keyof typeof currentStockScores.scores
                    ] || 0;
                  const compValue =
                    competitorData.scores[
                      metric as keyof typeof competitorData.scores
                    ] || 0;
                  const industryValue =
                    industryBenchmarks[
                      metric as keyof typeof industryBenchmarks
                    ] || 0;
                  const marketValue =
                    marketBenchmarks[metric as keyof typeof marketBenchmarks] ||
                    0;

                  const values = [
                    mainValue,
                    compValue,
                    industryValue,
                    marketValue,
                  ];
                  const maxValue = Math.max(...values);

                  return (
                    <tr
                      key={metric}
                      className="hover:bg-gray-50 transition-colors duration-150"
                    >
                      <td className="py-3 px-2 font-medium text-gray-700">
                        {metric}
                      </td>
                      <td
                        className={`text-center py-3 px-2 ${mainValue === maxValue ? "font-bold" : ""}`}
                        style={{
                          color:
                            mainValue === maxValue
                              ? currentStockScores.color
                              : "inherit",
                        }}
                      >
                        {(mainValue || 0).toFixed(0)}
                      </td>
                      <td
                        className={`text-center py-3 px-2 ${compValue === maxValue ? "font-bold" : ""}`}
                        style={{
                          color:
                            compValue === maxValue
                              ? competitorData.color
                              : "inherit",
                        }}
                      >
                        {(compValue || 0).toFixed(0)}
                      </td>
                      <td
                        className={`text-center py-3 px-2 ${industryValue === maxValue ? "font-medium text-gray-600" : "text-gray-600"}`}
                      >
                        {(industryValue || 0).toFixed(0)}
                      </td>
                      <td
                        className={`text-center py-3 px-2 ${marketValue === maxValue ? "font-medium text-gray-500" : "text-gray-400"}`}
                      >
                        {(marketValue || 0).toFixed(0)}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>

          <div className="text-xs text-gray-500 mt-3 italic">
            Higher numbers indicate better performance. Bold values represent
            the highest score in each category.
          </div>
        </div>
      )}
    </div>
  );
}

================
File: client/src/components/ui/accordion.tsx
================
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: client/src/components/ui/alert-dialog.tsx
================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: client/src/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: client/src/components/ui/aspect-ratio.tsx
================
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: client/src/components/ui/avatar.tsx
================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: client/src/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: client/src/components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: client/src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: client/src/components/ui/calendar.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

================
File: client/src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: client/src/components/ui/carousel.tsx
================
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: client/src/components/ui/chart.tsx
================
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: client/src/components/ui/checkbox.tsx
================
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: client/src/components/ui/choice-button.tsx
================
import { motion } from "framer-motion";
import { Check } from "lucide-react";

interface ChoiceButtonProps {
  title: string;
  description?: string;
  rightText?: string;
  selected: boolean;
  onClick: () => void;
  value?: string;
  correct?: boolean;
  incorrect?: boolean;
  disabled?: boolean;
  showFeedback?: boolean;
}

export default function ChoiceButton({
  title,
  description,
  rightText,
  selected,
  onClick,
  value,
  correct,
  incorrect,
  disabled = false,
  showFeedback = false,
}: ChoiceButtonProps) {
  const getStateClasses = () => {
    if (correct) return "border-green-400 bg-green-50";
    if (incorrect) return "border-red-400 bg-red-50";
    if (selected) return "border-primary-400 bg-primary-50";
    return "border-gray-300 hover:border-primary-400 hover:bg-primary-50";
  };
  
  return (
    <motion.button
      className={`choice-btn border rounded-lg p-4 w-full text-left transition duration-200 ease-in-out ${getStateClasses()}`}
      whileHover={{ y: disabled ? 0 : -2 }}
      whileTap={{ scale: disabled ? 1 : 0.98 }}
      onClick={disabled ? undefined : onClick}
      data-value={value}
      disabled={disabled}
    >
      <div className="flex justify-between items-center">
        <div>
          <span className="font-medium text-gray-800">{title}</span>
          {description && (
            <p className="text-sm text-gray-500 mt-1">{description}</p>
          )}
        </div>
        
        {rightText && (
          <span className="text-sm text-gray-500">{rightText}</span>
        )}
        
        {selected && !showFeedback && (
          <div className="flex-shrink-0 ml-2">
            <Check className="h-5 w-5 text-primary-500" />
          </div>
        )}
        
        {showFeedback && correct && (
          <div className="flex-shrink-0 ml-2">
            <Check className="h-5 w-5 text-green-500" />
          </div>
        )}
      </div>
    </motion.button>
  );
}

================
File: client/src/components/ui/collapsible.tsx
================
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: client/src/components/ui/command.tsx
================
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: client/src/components/ui/context-menu.tsx
================
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: client/src/components/ui/dialog.tsx
================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: client/src/components/ui/drawer.tsx
================
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: client/src/components/ui/dropdown-menu.tsx
================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: client/src/components/ui/form.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: client/src/components/ui/game-elements.tsx
================
import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card } from './card';
import { Progress } from './progress';
import { Button } from './button';
import { Trophy, Timer, Ticket, Star } from 'lucide-react';

interface GameHeaderProps {
  title: string;
  timeLeft?: number;
  tickets?: number;
  level?: number;
  xp?: number;
}

export function GameHeader({ title, timeLeft, tickets, level, xp }: GameHeaderProps) {
  return (
    <motion.div 
      className="flex justify-between items-center p-4 bg-white shadow-sm rounded-lg mb-6"
      initial={{ y: -20, opacity: 0 }}
      animate={{ y: 0, opacity: 1 }}
      transition={{ duration: 0.3 }}
    >
      <h1 className="text-xl font-bold">{title}</h1>
      <div className="flex items-center space-x-4">
        {timeLeft !== undefined && (
          <motion.div 
            className="flex items-center"
            whileHover={{ scale: 1.05 }}
            transition={{ type: "spring", stiffness: 400, damping: 10 }}
          >
            <Timer className="w-5 h-5 mr-2 text-blue-500" />
            <span>{timeLeft}s</span>
          </motion.div>
        )}
        {tickets !== undefined && (
          <motion.div 
            className="flex items-center"
            whileHover={{ scale: 1.05 }}
            transition={{ type: "spring", stiffness: 400, damping: 10 }}
          >
            <Ticket className="w-5 h-5 mr-2 text-green-500" />
            <span>{tickets}</span>
          </motion.div>
        )}
        {level !== undefined && (
          <motion.div 
            className="flex items-center"
            whileHover={{ scale: 1.05 }}
            transition={{ type: "spring", stiffness: 400, damping: 10 }}
          >
            <Star className="w-5 h-5 mr-2 text-yellow-500" />
            <span>Level {level}</span>
          </motion.div>
        )}
      </div>
    </motion.div>
  );
}

interface MetricCardProps {
  title: string;
  value: number;
  industryAverage: number;
  explanation: string;
}

export function MetricCard({ title, value, industryAverage, explanation }: MetricCardProps) {
  return (
    <Card className="p-4">
      <h3 className="text-xl font-semibold mb-2">{title}</h3>
      <p className="text-gray-600 mb-4">{explanation}</p>
      <div className="grid grid-cols-2 gap-4">
        <div className="p-4 bg-gray-50 rounded-lg">
          <p className="text-sm text-gray-500">Company Value</p>
          <p className="text-xl font-bold">{value}%</p>
        </div>
        <div className="p-4 bg-gray-50 rounded-lg">
          <p className="text-sm text-gray-500">Industry Average</p>
          <p className="text-xl font-bold">{industryAverage}%</p>
        </div>
      </div>
    </Card>
  );
}

interface GameButtonProps {
  onClick: () => void;
  variant?: 'good' | 'bad' | 'default';
  children: React.ReactNode;
}

export function GameButton({ onClick, variant = 'default', children }: GameButtonProps) {
  const variantClasses = {
    good: 'bg-green-50 hover:bg-green-100',
    bad: 'bg-red-50 hover:bg-red-100',
    default: ''
  };

  return (
    <motion.div
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      transition={{ type: "spring", stiffness: 400, damping: 17 }}
    >
      <Button
        variant="outline"
        onClick={onClick}
        className={`${variantClasses[variant]} transition-all duration-200`}
      >
        {children}
      </Button>
    </motion.div>
  );
}

interface GameProgressProps {
  current: number;
  total: number;
}

export function GameProgress({ current, total }: GameProgressProps) {
  return (
    <motion.div 
      className="space-y-2"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <motion.div
        initial={{ scaleX: 0 }}
        animate={{ scaleX: 1 }}
        transition={{ duration: 0.5, ease: "easeOut" }}
      >
        <Progress value={(current / total) * 100} className="w-full" />
      </motion.div>
      <motion.p 
        className="text-sm text-gray-500 text-center"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.2 }}
      >
        Question {current} of {total}
      </motion.p>
    </motion.div>
  );
}

interface GameOverProps {
  score: number;
  tickets: number;
  onPlayAgain: () => void;
}

export function GameOver({ score, tickets, onPlayAgain }: GameOverProps) {
  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ 
        duration: 0.5,
        type: "spring",
        stiffness: 200,
        damping: 20
      }}
      className="text-center space-y-4"
    >
      <motion.div
        animate={{ 
          rotate: [0, 10, -10, 10, 0],
          scale: [1, 1.1, 1]
        }}
        transition={{ 
          duration: 1,
          times: [0, 0.2, 0.4, 0.6, 0.8],
          repeat: 0
        }}
      >
        <Trophy className="w-16 h-16 mx-auto text-yellow-500" />
      </motion.div>
      <motion.h3 
        className="text-2xl font-bold"
        initial={{ y: 20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.2 }}
      >
        Game Over!
      </motion.h3>
      <motion.p 
        className="text-xl"
        initial={{ y: 20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.4 }}
      >
        Final Score: {score}
      </motion.p>
      <motion.p 
        className="text-lg"
        initial={{ y: 20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.6 }}
      >
        Tickets Earned: {tickets}
      </motion.p>
      <motion.div
        initial={{ y: 20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.8 }}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <Button onClick={onPlayAgain}>Play Again</Button>
      </motion.div>
    </motion.div>
  );
}

================
File: client/src/components/ui/hover-card.tsx
================
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: client/src/components/ui/input-otp.tsx
================
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: client/src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: client/src/components/ui/label.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: client/src/components/ui/menubar.tsx
================
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: client/src/components/ui/metric-popup-fixed.tsx
================
import React from "react";
import { X, Info, TrendingUp, ArrowRight, PlusCircle, CircleDot, ChevronUp, ChevronDown, Minus, HelpCircle, DollarSign, Shield, Zap } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { useState } from "react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

// Utility functions for comparison
// Get comparison status (better, similar, worse)
function getComparisonStatus(value: number | string, industry: number | string, 
                          isLowerBetter: boolean = false): "green" | "yellow" | "red" {
  // Handle non-numeric qualitative values
  if (typeof value === 'string' && (value === 'High' || value === 'Medium' || value === 'Low')) {
    if (value === industry) return "yellow";
    if (value === 'High' && industry === 'Medium') return "green";
    if (value === 'Low' && industry === 'Medium') return "red";
    if (value === 'Medium' && industry === 'Low') return "green";
    if (value === 'Medium' && industry === 'High') return "red";
    return "yellow";
  }

  // Parse numeric values
  const numValue = typeof value === 'string' ? parseFloat(value) : value;
  const numIndustry = typeof industry === 'string' ? parseFloat(industry) : industry;
  
  // If we couldn't parse numbers, return neutral
  if (isNaN(numValue) || isNaN(numIndustry)) {
    console.log("Could not parse values for comparison:", value, industry);
    return "yellow"; // Default to neutral
  }
  
  // Handle numeric values
  if (isLowerBetter) {
    // For metrics where lower is better (like volatility, PE ratio)
    if (numValue < numIndustry * 0.9) return "green";
    if (numValue > numIndustry * 1.1) return "red";
    return "yellow";
  } else {
    // For metrics where higher is better (like revenue growth)
    if (numValue > numIndustry * 1.1) return "green";
    if (numValue < numIndustry * 0.9) return "red";
    return "yellow";
  }
}

// Get comparison symbol
function getComparisonSymbol(value: number | string, industry: number | string, 
                        isLowerBetter: boolean = false): "<" | "=" | ">" {
  // Parse string values to numbers if possible
  const numValue = typeof value === 'string' ? parseFloat(value) : value;
  const numIndustry = typeof industry === 'string' ? parseFloat(industry) : industry;
  
  // If we couldn't parse numbers, return equals
  if (isNaN(numValue) || isNaN(numIndustry)) {
    console.log("Could not parse values for symbol:", value, industry);
    return "="; // Default for non-numeric comparisons
  }
  
  // Handle numeric values with 5% threshold for equality
  const ratio = numValue / numIndustry;
  
  if (isLowerBetter) {
    // For metrics where lower is better
    if (ratio < 0.95) return "<"; // Value is less than industry (good)
    if (ratio > 1.05) return ">"; // Value is greater than industry (bad)
    return "="; // Approximately equal
  } else {
    // For metrics where higher is better
    if (ratio > 1.05) return ">"; // Value is greater than industry (good)
    if (ratio < 0.95) return "<"; // Value is less than industry (bad)
    return "="; // Approximately equal
  }
}

interface MetricPopupProps {
  isOpen: boolean;
  onClose: () => void;
  metricName: string;
  metricColor: "green" | "yellow" | "red";
  metricData: {
    values: {
      label: string;
      value: string | number;
      suffix?: string;
      industry?: string | number; // For industry average comparison
      explanation?: string; // Explanation for this specific metric
    }[];
    rating: "High" | "Strong" | "Fair" | "Low" | "Unstable" | "Weak" | "Good" | "Average" | "Poor";
    industryAverage: {
      label: string;
      value: string;
    }[];
    industry: string;
    explanation?: string;
    name?: string; // Company name
  };
}

const getColorClass = (color: "green" | "yellow" | "red") => {
  switch (color) {
    case "green":
      return "text-green-600";
    case "yellow":
      return "text-amber-600";
    case "red":
      return "text-red-600";
    default:
      return "text-slate-800";
  }
};

const getBgColorClass = (color: "green" | "yellow" | "red") => {
  switch (color) {
    case "green":
      return "bg-green-50/90";
    case "yellow":
      return "bg-amber-50/90";
    case "red":
      return "bg-red-50/90";
    default:
      return "bg-slate-50";
  }
};

const getBorderColorClass = (color: "green" | "yellow" | "red") => {
  switch (color) {
    case "green":
      return "border-green-200";
    case "yellow":
      return "border-amber-200";
    case "red":
      return "border-red-200";
    default:
      return "border-slate-200";
  }
};

// Function to determine if a metric is better when lower (like P/E ratio, volatility)
const isMetricBetterWhenLower = (metricLabel: string): boolean => {
  const lowerIsBetterMetrics = [
    "P/E Ratio", 
    "P/B Ratio", 
    "Volatility", 
    "Beta"
  ];
  return lowerIsBetterMetrics.some(metric => 
    metricLabel.toLowerCase().includes(metric.toLowerCase())
  );
};

// Component to display comparison symbol
const ComparisonSymbol = ({ 
  symbol,
  color
}: { 
  symbol: "<" | "=" | ">" | "~", 
  color: "green" | "yellow" | "red" 
}) => {
  const textColorClass = getColorClass(color);
  
  return (
    <div className={`flex items-center justify-center ${textColorClass} font-bold text-lg mx-1`}>
      {symbol === ">" && <ChevronUp size={18} className={textColorClass} />}
      {symbol === "=" && <Minus size={18} className={textColorClass} />}
      {symbol === "~" && <span className={textColorClass}>~</span>}
      {symbol === "<" && <ChevronDown size={18} className={textColorClass} />}
    </div>
  );
};

// Get the metric description based on the label
const getMetricDescription = (metricLabel: string): string => {
  switch (metricLabel) {
    case "P/E Ratio":
      return "How many dollars you pay for each dollar the company earns per year; a higher number often means the stock is more 'expensive.'";
    case "P/B Ratio":
      return "Shows how the stock price compares to the company's accounting 'net worth' (book value); high means price is well above its balance-sheet value.";
    case "Dividend Yield":
      return "The percentage of your investment you'd get back in annual cash dividends (e.g., 3% means $3 per year on a $100 investment).";
    case "Revenue Growth":
      return "How much the company's total sales went up (or down) compared to last year, showing if the business is expanding or shrinking.";
    case "Profit Margin":
      return "Out of every dollar of sales, how much is left as profit after expenses (e.g., 20% margin means 20 cents of profit per $1 of revenue).";
    case "Return on Capital":
    case "Return on Capital (ROC or ROI)":
      return "Tells you how effectively the company uses its money and assets to make a profit (higher means better use of their property/investments).";
    case "3-Month Return":
    case "Three-Month Return":
      return "How the stock price changed over the last three months (e.g., +10% means it gained 10% in that period).";
    case "Relative Performance":
      return "Compares the stock's return to a major market index (e.g., if it's +5%, the stock did 5% better than the overall market).";
    case "RSI":
      return "A technical measure of recent price moves; below 40 often means it's been weak or 'oversold,' above 70 can mean it's 'overbought.'";
    case "Volatility":
      return "How much the stock's price bounces around day to day; higher volatility means the price can swing up or down more dramatically.";
    case "Beta":
      return "A measure of how much the stock tends to move relative to the overall market (e.g., a beta of 1.2 means it moves 20% more than the market).";
    case "Dividend Consistency":
      return "Whether the company reliably pays (and often increases) its dividend, or if it has a history of cutting or skipping dividend payments.";
    default:
      return "This metric helps evaluate the stock's performance relative to industry standards.";
  }
};

export default function MetricPopup({
  isOpen,
  onClose,
  metricName,
  metricColor,
  metricData,
}: MetricPopupProps) {
  const colorClass = getColorClass(metricColor);
  const bgColorClass = getBgColorClass(metricColor);
  const borderColorClass = getBorderColorClass(metricColor);

  // Generate explanation based on rating
  const getExplanation = () => {
    // Use the provided explanation if available
    if (metricData.explanation) {
      return metricData.explanation;
    }
    
    // Otherwise, generate a generic explanation based on the rating
    const { rating, industry } = metricData;
    
    // Handle positive ratings
    const positiveRatings = ["High", "Strong", "Good"];
    if (positiveRatings.includes(rating)) {
      switch (metricName) {
        case "Performance":
          return `This company demonstrates exceptional operational execution with impressive revenue growth and efficient capital utilization. This level of performance often indicates strong competitive advantages and effective management, positioning them well within the ${industry} sector.`;
        case "Stability":
          return `The stock exhibits remarkable price stability and lower volatility compared to both the market and its industry peers. This stability suggests a resilient business model and predictable cash flows, making it potentially suitable for more conservative investors within the ${industry} sector.`;
        case "Value":
          return `Currently trading at attractive valuation multiples relative to both its historical ranges and industry peers. This favorable pricing may indicate the stock is undervalued based on fundamentals, offering a potentially appealing entry point for investors interested in the ${industry} sector.`;
        case "Momentum":
          return `The stock is displaying strong positive price momentum, outperforming both the broader market and its sector peers. This upward trajectory often reflects growing investor confidence and improving business fundamentals within the ${industry} sector.`;
        default:
          return "This metric shows exceptional results, indicating strong prospects for future performance.";
      }
    }
    
    // Handle average ratings
    const averageRatings = ["Fair", "Average"];
    if (averageRatings.includes(rating)) {
      switch (metricName) {
        case "Performance":
          return `The company demonstrates adequate operational performance with reasonable growth metrics and capital efficiency. While not leading the ${industry} sector, they remain competitive and show balanced execution across key performance indicators.`;
        case "Stability":
          return `The stock exhibits average volatility and typical price movements for companies in the ${industry} sector. This moderate stability suggests a business model that responds predictably to normal market fluctuations.`;
        case "Value":
          return `Currently trading at valuation multiples that align with industry averages in the ${industry} sector. These fair valuations suggest the stock is reasonably priced relative to its fundamentals and growth prospects.`;
        case "Momentum":
          return `The stock is demonstrating modest price momentum, generally keeping pace with broader market and sector movements. This neutral momentum indicates steady, if unexceptional, investor sentiment in the ${industry} sector.`;
        default:
          return "This metric shows average results, indicating stable but not exceptional performance.";
      }
    }
    
    return {
      "Performance": `The company is showing below-average operational performance with challenges in growth metrics and capital efficiency. These limitations may indicate competitive pressures or internal challenges that are affecting their position in the ${industry} sector.`,
      "Stability": `The stock exhibits higher-than-average volatility with unpredictable price movements compared to peers in the ${industry} sector. This instability may reflect business model vulnerabilities or external factors creating uncertainty.`,
      "Value": `Currently trading at valuation multiples that exceed typical ranges for the ${industry} sector. These elevated valuations may indicate the stock is relatively expensive compared to its fundamentals or growth prospects.`,
      "Momentum": `The stock is demonstrating negative price momentum, underperforming both the broader market and sector peers. This downward trajectory often reflects investor concerns or deteriorating fundamentals within the ${industry} sector.`,
    }[metricName] || "This metric shows below-average results, indicating potential challenges for future performance.";
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black/40 backdrop-blur-sm z-50"
            onClick={onClose}
          />
          
          {/* Modal - Enhanced Robinhood-inspired with depth and visual appeal */}
          <motion.div
            initial={{ opacity: 0, scale: 0.95, y: 10 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.95, y: 10 }}
            transition={{ type: "spring", damping: 25, stiffness: 300 }}
            className="fixed inset-0 flex items-center justify-center z-50 pointer-events-none"
          >
            <div className="relative w-[90%] max-w-md m-auto pointer-events-auto">
              {/* Shadow effect behind the modal */}
              <div className="absolute inset-0 bg-gradient-to-br from-blue-200/30 to-indigo-200/30 rounded-xl blur-md transform scale-[0.98] translate-y-1"></div>
              
              <div className="bg-white border border-slate-200 rounded-xl shadow-lg overflow-hidden relative z-10"
                style={{
                  boxShadow: '0 10px 25px rgba(0, 0, 0, 0.12), 0 4px 10px rgba(0, 0, 0, 0.05)'
                }}
              >
                {/* Top accent bar */}
                <div className={`absolute top-0 left-0 right-0 h-1 ${
                  metricColor === 'green' ? 'bg-gradient-to-r from-green-400 to-green-600' :
                  metricColor === 'yellow' ? 'bg-gradient-to-r from-amber-400 to-amber-600' :
                  'bg-gradient-to-r from-red-400 to-red-600'
                }`}></div>
                
                {/* Header - Enhanced design */}
                <div className="p-4 border-b border-slate-100 flex justify-between items-center bg-gradient-to-b from-white to-slate-50">
                  <div className="flex items-center">
                    <div className={`w-10 h-10 flex items-center justify-center rounded-lg mr-3 shadow-md ${
                      metricColor === 'green' ? 'bg-gradient-to-br from-green-400 to-green-600' :
                      metricColor === 'yellow' ? 'bg-gradient-to-br from-amber-400 to-amber-600' :
                      'bg-gradient-to-br from-red-400 to-red-600'
                    } text-white`}>
                      {metricName === 'Performance' ? (
                        <TrendingUp size={18} />
                      ) : metricName === 'Value' ? (
                        <DollarSign size={18} />
                      ) : metricName === 'Stability' ? (
                        <Shield size={18} />
                      ) : (
                        <Zap size={18} />
                      )}
                    </div>
                    <div>
                      <h2 className="text-lg font-semibold bg-gradient-to-r from-slate-800 to-slate-600 bg-clip-text text-transparent">
                        {metricName} 
                        <span className={`ml-2 ${
                          metricColor === 'green' ? 'bg-green-100 text-green-600' :
                          metricColor === 'yellow' ? 'bg-amber-100 text-amber-600' :
                          'bg-red-100 text-red-600'
                        } text-sm font-medium px-2 py-0.5 rounded-full`}>
                          {metricData.rating}
                        </span>
                      </h2>
                      <p className="text-sm text-slate-600 font-medium">
                        {metricData.industry} Industry Overview
                      </p>
                    </div>
                  </div>
                  <button 
                    onClick={onClose}
                    className="p-2 rounded-full text-slate-400 hover:text-slate-600 hover:bg-slate-100 transition-colors"
                  >
                    <X size={18} />
                  </button>
                </div>
                
                {/* Content - Enhanced with depth and visual appeal */}
                <div className="p-5 max-h-[70vh] overflow-y-auto bg-gradient-to-b from-white to-slate-50/60">
                  {/* Introduction section */}
                  <div className="mb-5 bg-white rounded-xl border border-slate-200 shadow-md p-4 relative overflow-hidden">
                    <div className="absolute -right-6 -top-6 w-24 h-24 bg-gradient-to-br from-blue-50 via-indigo-50 to-transparent rounded-full opacity-70"></div>
                    <div className="flex items-start mb-2">
                      <div className="bg-blue-100 text-blue-600 p-1.5 rounded-md mr-2 shrink-0">
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <circle cx="12" cy="12" r="10" />
                          <path d="M12 16v-4" />
                          <path d="M12 8h.01" />
                        </svg>
                      </div>
                      <h3 className="font-semibold text-sm text-slate-800">Why These Metrics Matter</h3>
                    </div>
                    <p className="text-sm text-slate-700 leading-relaxed relative z-10 pl-1">
                      These comparative metrics show how {metricData.name || "this company"} performs against industry standards. Key variations can indicate competitive advantages or potential risks.
                    </p>
                  </div>
                  
                  {/* Integrated Metrics with Explanations */}
                  <div className="space-y-5">
                    {metricData.values.map((item, index) => {
                      // Match up industry average for this metric
                      const industryAvg = metricData.industryAverage.find(
                        indItem => indItem.label === item.label
                      )?.value || "N/A";
                      
                      // Determine color based on comparison
                      const comparisonColor = getComparisonStatus(
                        item.value, 
                        item.industry || industryAvg,
                        isMetricBetterWhenLower(item.label)
                      );
                      
                      const textColorClass = getColorClass(comparisonColor);
                      const bgColorClass = getBgColorClass(comparisonColor);
                      const borderColorClass = getBorderColorClass(comparisonColor);
                      
                      // Create a state for each metric's tooltip
                      const [showTooltip, setShowTooltip] = useState(false);
                      
                      return (
                        <div key={index} className="bg-white rounded-xl border border-slate-100 overflow-hidden shadow-sm hover:shadow-md transition-shadow duration-300">
                          {/* Metric Header */}
                          <div className={`p-3 ${bgColorClass} border-b ${borderColorClass}`}>
                            <h3 className="text-slate-800 font-semibold flex items-center justify-between">
                              <div className="flex items-center">
                                <div className="flex items-center cursor-pointer relative group">
                                  <Info size={18} className={`${textColorClass} mr-2 hover:scale-110 transition-transform`} />
                                  {item.label}
                                  
                                  <div className="fixed z-50 invisible group-hover:visible opacity-0 group-hover:opacity-100 
                                    transition-opacity duration-300 ease-in-out p-3 bg-white rounded-md
                                    shadow-lg border border-slate-200 text-xs text-slate-600 w-64"
                                    style={{ 
                                      transform: 'translate(-20px, -110%)',
                                      maxWidth: '250px',
                                      pointerEvents: 'none'
                                    }}>
                                    {getMetricDescription(item.label)}
                                    <div className="absolute -bottom-2 left-5 w-3 h-3 bg-white border-b border-r border-slate-200 transform rotate-45"></div>
                                  </div>
                                </div>
                              </div>
                            </h3>
                          </div>
                          
                          {/* Metric Content */}
                          <div className="p-4">
                            {/* Comparison Row */}
                            <div className="flex flex-col gap-3 mb-3">
                              <div className="flex justify-between items-center">
                                {/* Status badge */}
                                <div className={`px-3 py-1 rounded-full ${bgColorClass} text-xs font-medium uppercase ${textColorClass} shadow-sm border ${borderColorClass}`}>
                                  {comparisonColor === "green" ? "Better than Industry" : 
                                   comparisonColor === "yellow" ? "Industry Average" : "Below Industry Avg"}
                                </div>
                              </div>
                              
                              {/* Metric comparison */}
                              <div className="flex items-center justify-between w-full mt-2">
                                <div className="flex flex-col items-center">
                                  <span className="text-xs text-slate-800 mb-1.5 font-semibold">{metricData.name || "Company"}</span>
                                  <div className={`px-5 py-3 rounded-lg ${bgColorClass} ${textColorClass} font-bold text-2xl flex items-center justify-center min-w-24 shadow-md border ${borderColorClass} transform hover:scale-105 transition-all duration-150`}
                                    style={{
                                      boxShadow: comparisonColor === "green" ? "0 8px 16px rgba(34, 197, 94, 0.25), 0 2px 4px rgba(34, 197, 94, 0.15)" : 
                                               comparisonColor === "yellow" ? "0 8px 16px rgba(245, 158, 11, 0.25), 0 2px 4px rgba(245, 158, 11, 0.15)" :
                                               "0 8px 16px rgba(239, 68, 68, 0.25), 0 2px 4px rgba(239, 68, 68, 0.15)"
                                    }}>
                                    {item.value}{item.suffix || ""}
                                  </div>
                                </div>
                                
                                {/* Display comparison symbol with correct orientation */}
                                <div className="flex flex-col items-center justify-center">
                                  <div className={`${getColorClass(comparisonColor)} font-bold text-3xl flex items-center justify-center mx-2 p-1.5 rounded-full bg-white shadow-sm`}>
                                    {(() => {
                                      // Use correct arrows based on actual numeric values 
                                      const numValue = typeof item.value === 'string' ? parseFloat(item.value) : item.value;
                                      const industryValue = item.industry || industryAvg;
                                      const numIndustry = typeof industryValue === 'string' ? parseFloat(industryValue) : 
                                                          (typeof industryValue === 'number' ? industryValue : 0);
                                      
                                      if (isNaN(numValue) || isNaN(numIndustry)) {
                                        return <Minus size={30} className={getColorClass(comparisonColor)} />;
                                      }
                                      
                                      // Check if numbers are approximately equal (within 5%)
                                      const ratio = numValue / numIndustry;
                                      const isApproxEqual = ratio > 0.95 && ratio < 1.05;
                                      
                                      if (isApproxEqual) {
                                        return <span className={`${getColorClass(comparisonColor)} text-3xl font-semibold`}>~</span>;
                                      } else if (isMetricBetterWhenLower(item.label)) {
                                        // For metrics where lower is better (like P/E ratio, volatility)
                                        return numValue < numIndustry 
                                          ? <span className={`${getColorClass(comparisonColor)} text-3xl font-semibold`}>&lt;</span> // less than is good
                                          : <span className={`${getColorClass(comparisonColor)} text-3xl font-semibold`}>&gt;</span>; // greater than is bad
                                      } else {
                                        // For metrics where higher is better (like revenue growth)
                                        return numValue > numIndustry 
                                          ? <span className={`${getColorClass(comparisonColor)} text-3xl font-semibold`}>&gt;</span> // greater than is good
                                          : <span className={`${getColorClass(comparisonColor)} text-3xl font-semibold`}>&lt;</span>; // less than is bad
                                      }
                                    })()}
                                  </div>
                                </div>
                                
                                <div className="flex flex-col items-center">
                                  <span className="text-xs text-slate-800 mb-1.5 font-semibold">Industry Average</span>
                                  <div className="px-5 py-3 rounded-lg bg-slate-50 text-slate-600 font-bold text-2xl flex items-center justify-center min-w-24 shadow-md border border-slate-200 transform hover:scale-105 transition-all duration-150"
                                    style={{ boxShadow: "0 8px 16px rgba(0, 0, 0, 0.08), 0 2px 4px rgba(0, 0, 0, 0.05)" }}>
                                    {item.industry || industryAvg}{item.suffix || ""}
                                  </div>
                                </div>
                              </div>
                            </div>
                            
                            {/* Add 1-liner explanation if available */}
                            {item.explanation && (
                              <div className="mt-3 pt-3 border-t border-slate-100">
                                <p className="text-sm text-slate-600">{item.explanation}</p>
                              </div>
                            )}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                  
                  {/* Overall Explanation */}
                  <div className="mt-6 bg-slate-50 rounded-xl p-4 border border-slate-100 shadow-sm">
                    <h3 className="text-slate-800 font-bold flex items-center mb-3">
                      {metricName === 'Performance' ? (
                        <TrendingUp size={16} className={`${colorClass} mr-2`} />
                      ) : metricName === 'Value' ? (
                        <DollarSign size={16} className={`${colorClass} mr-2`} />
                      ) : metricName === 'Stability' ? (
                        <Shield size={16} className={`${colorClass} mr-2`} />
                      ) : (
                        <Zap size={16} className={`${colorClass} mr-2`} />
                      )}
                      What This Means Overall
                    </h3>
                    <p className="text-sm text-slate-600 leading-relaxed">
                      {getExplanation()}
                    </p>
                  </div>
                  
                  {/* Footer */}
                  <div className="mt-6 pt-3 border-t border-slate-100">
                    <p className="text-xs text-slate-500 italic">
                      These metrics are based on both historical data and forward-looking indicators. 
                      They should be used as one of many tools in your investment decision-making.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
}

================
File: client/src/components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: client/src/components/ui/pagination.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: client/src/components/ui/popover.tsx
================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: client/src/components/ui/portfolio-impact-calculator.tsx
================
import React, { useState, useEffect, useRef } from "react";
import { motion, AnimatePresence, useMotionValue, useTransform } from "framer-motion";
import { X, DollarSign, ChevronDown, ChevronUp, Info, TrendingUp, Shield, Zap, ArrowRight, Check } from "lucide-react";
import { StockData } from "@/lib/stock-data";
import { usePortfolio } from "@/contexts/portfolio-context";
import { cn } from "@/lib/utils";
import PurchaseSuccessModal from "./purchase-success-modal";

interface PortfolioImpactCalculatorProps {
  isOpen: boolean;
  onClose: () => void;
  onInvest: () => void;
  stock: StockData;
}

export default function PortfolioImpactCalculator({
  isOpen,
  onClose,
  onInvest,
  stock,
}: PortfolioImpactCalculatorProps) {
  const { cash, calculateImpact, buyStock, isLoading } = usePortfolio();
  
  // State for investment amount - start with min $1
  const [investmentAmount, setInvestmentAmount] = useState<number>(1);
  const [showValueShares, setShowValueShares] = useState<boolean>(true); // true for value, false for shares
  
  // State for metric info tooltips
  const [activeTooltip, setActiveTooltip] = useState<string | null>(null);
  
  // State for purchase success modal
  const [showSuccessModal, setShowSuccessModal] = useState<boolean>(false);
  
  // Metric explanations
  const metricExplanations = {
    performance: "Shows how much your portfolio has grown over time through stock price increases and dividends.",
    stability: "Measures how consistent your portfolio's value remains during market ups and downs.",
    value: "Indicates whether the companies in your portfolio are reasonably priced compared to what they're actually worth.",
    momentum: "Shows the strength and direction of your portfolio's recent price movements."
  };
  
  // Slide-to-invest state variables
  const slideTrackRef = useRef<HTMLDivElement>(null);
  const [slideTrackWidth, setSlideTrackWidth] = useState(0);
  const [slidingInProgress, setSlidingInProgress] = useState(false);
  const [slideSuccess, setSlideSuccess] = useState(false);
  const slideX = useMotionValue(0);
  const successOpacity = useTransform(
    slideX,
    [0, slideTrackWidth * 0.7, slideTrackWidth],
    [0, 0.5, 1]
  );
  
  // Update track width on mount and when ref changes
  useEffect(() => {
    const updateTrackWidth = () => {
      if (slideTrackRef.current) {
        const thumbWidth = 80; // Approximate width of the slider thumb
        setSlideTrackWidth(slideTrackRef.current.clientWidth - thumbWidth);
      }
    };
    
    // Initial update
    updateTrackWidth();
    
    // Add resize listener to handle window size changes
    window.addEventListener('resize', updateTrackWidth);
    
    // Cleanup
    return () => window.removeEventListener('resize', updateTrackWidth);
  }, [slideTrackRef, isOpen]);
  
  // Handle slide end
  const handleSlideEnd = () => {
    setSlidingInProgress(false);
    
    // If slid more than 70% of the way, trigger success (making it easier to complete)
    if (slideX.get() > slideTrackWidth * 0.7) {
      // Animate to completion
      slideX.set(slideTrackWidth);
      setSlideSuccess(true);
      
      // Haptic feedback if supported
      if (navigator.vibrate) {
        navigator.vibrate(100);
      }
      
      // Delay before triggering actual invest action to allow animation to play
      setTimeout(() => {
        handleInvest();
      }, 600);
    } else {
      // Spring back to start with animation
      slideX.set(0);
    }
  };
  
  // Reset slide state when calculator is opened
  useEffect(() => {
    if (isOpen) {
      setSlideSuccess(false);
      setSlidingInProgress(false);
      slideX.set(0);
    }
  }, [isOpen, slideX]);
  
  // Calculate max investment (limited by cash)
  const maxInvestment = Math.min(cash, 100);
  
  // Calculate shares based on investment amount (minimum 0.001 shares)
  const shares = Math.max(investmentAmount / stock.price, 0.001);
  
  // Projected 1-year return (based on oneYearReturn if available)
  const oneYearReturnRate = typeof stock.oneYearReturn === 'number' 
    ? stock.oneYearReturn / 100 
    : typeof stock.oneYearReturn === 'string' 
      ? parseFloat(stock.oneYearReturn.replace("%", "")) / 100
      : 0.08; // Default 8% growth if no return data
      
  const projectedReturn = investmentAmount * oneYearReturnRate;
  const estimatedValue = investmentAmount + projectedReturn;
  
  // Calculate portfolio impact with validation
  const impact = calculateImpact(stock, investmentAmount);
  
  // Function to format metric change with colored arrow
  const formatMetricChange = (value: number) => {
    const formatted = value.toFixed(1);
    if (value > 0) {
      return <span className="text-green-500 flex items-center"><ChevronUp size={16} />{formatted}</span>;
    } else if (value < 0) {
      return <span className="text-red-500 flex items-center"><ChevronDown size={16} />{Math.abs(parseFloat(formatted))}</span>;
    } else {
      return <span className="text-gray-500">0</span>;
    }
  };
  
  // Function to get icon for metric
  const getMetricIcon = (metricName: string, size: number = 16) => {
    switch (metricName.toLowerCase()) {
      case "performance":
        return <TrendingUp size={size} />;
      case "value":
        return <DollarSign size={size} />;
      case "stability":
        return <Shield size={size} />;
      case "momentum":
        return <Zap size={size} />;
      default:
        return <Info size={size} />;
    }
  };
  
  // Handle investment amount changes
  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseFloat(e.target.value);
    if (!isNaN(value)) {
      setInvestmentAmount(Math.min(value, maxInvestment));
    }
  };
  
  // Handle increment/decrement buttons
  const incrementAmount = () => {
    setInvestmentAmount(prev => Math.min(prev + 1, maxInvestment));
  };
  
  const decrementAmount = () => {
    setInvestmentAmount(prev => Math.max(prev - 1, 1));
  };
  
  // Handle invest action
  const handleInvest = () => {
    buyStock(stock, investmentAmount);
    setShowSuccessModal(true);
    onInvest();
    // Don't close the calculator yet - success modal will be shown first
  };
  
  // Handle success modal close
  const handleSuccessModalClose = () => {
    setShowSuccessModal(false);
    onClose(); // Close calculator after success modal is closed
  };
  
  // Close calculator when success modal is shown
  useEffect(() => {
    if (showSuccessModal) {
      // Hide calculator immediately when success modal is shown
      document.querySelector('.calculator-modal')?.classList.add('opacity-0');
    }
  }, [showSuccessModal]);
  
  // Format number for display
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(value);
  };
  
  // Format percentage for display
  const formatPercentage = (value: number) => {
    return `${value.toFixed(1)}%`;
  };
  
  return (
    <AnimatePresence mode="wait" key="calculator-modal">
      {isOpen && (
        <>
          {/* Backdrop with blur effect */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3, ease: [0.23, 1, 0.32, 1] }}
            className="calculator-overlay"
            onClick={onClose}
          />
          
          {/* Modal with enhanced animations and better centering */}
          <motion.div
            initial={{ opacity: 0, scale: 0.92, y: 30 }}
            animate={{ 
              opacity: 1, 
              scale: 1, 
              y: 0,
              transition: { 
                type: "spring", 
                damping: 30, 
                stiffness: 350,
                duration: 0.4,
                ease: [0.23, 1, 0.32, 1]
              }
            }}
            exit={{ 
              opacity: 0, 
              scale: 0.95, 
              y: 20,
              transition: { duration: 0.25, ease: [0.32, 0, 0.67, 0] }
            }}
            className="calculator-modal"
            style={{
              boxShadow: '0 20px 60px -15px rgba(0, 0, 0, 0.25), 0 12px 25px -10px rgba(0, 0, 0, 0.1)',
              position: 'fixed',
              left: '50%',
              top: '50%',
              transform: 'translate(-50%, -50%)',
              width: '90%',
              maxWidth: '450px'
            }}
          >
            {/* Enhanced Modern Header */}
            <div className="p-5 border-b border-slate-100 flex justify-between items-center bg-gradient-to-b from-white to-slate-50">
              <div className="flex items-center">
                <div className="bg-gradient-to-br from-green-500 to-emerald-600 text-white p-2.5 rounded-xl mr-4 shadow-lg flex items-center justify-center w-12 h-12">
                  <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
                  </svg>
                </div>
                <div>
                  <h2 className="text-lg font-bold bg-gradient-to-r from-slate-800 to-slate-700 bg-clip-text text-transparent mb-0.5">
                    Portfolio Impact
                  </h2>
                  <div className="flex items-center">
                    <span className="text-sm font-semibold text-green-600 mr-3">
                      {formatCurrency(cash)}
                    </span>
                    <span className="text-sm text-slate-600 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
                        <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
                      </svg>
                      {stock.name} ({stock.ticker})
                    </span>
                  </div>
                </div>
              </div>
              <button 
                onClick={onClose}
                className="p-2.5 rounded-full text-slate-400 hover:text-slate-600 hover:bg-slate-100 transition-all duration-200"
                aria-label="Close"
              >
                <X size={18} />
              </button>
            </div>
            
            {/* Content */}
            <div className="p-5">
              <div className="mb-4">
                {/* Title removed as it's redundant with the header */}
                
                {/* Pie Chart showing industry allocation */}
                <div className="relative h-48 mb-4">
                  <div className="absolute inset-0 flex items-center justify-center">
                    <svg viewBox="0 0 100 100" width="200" height="200">
                      {/* Background circle - lighter when empty */}
                      <circle 
                        cx="50" 
                        cy="50" 
                        r="40" 
                        fill="none" 
                        stroke={Object.keys(impact.industryAllocation).length === 0 ? "#f3f4f6" : "#e5e7eb"} 
                        strokeWidth="20" 
                      />
                      
                      {/* Dynamic segments - only rendered when data exists */}
                      {Object.entries(impact.industryAllocation).length > 0 && 
                        Object.entries(impact.industryAllocation).map(([industry, allocation], index) => {
                          // Calculate segment parameters
                          const colors = ["#06b6d4", "#8b5cf6", "#fbbf24", "#34d399", "#f87171"];
                          const color = colors[index % colors.length];
                          const segmentPct = allocation.new;
                          const circumference = 2 * Math.PI * 40;
                          const previousSegments = Object.entries(impact.industryAllocation)
                            .slice(0, index)
                            .reduce((sum, [_, alloc]) => sum + alloc.new, 0);
                          const rotation = (previousSegments * 3.6) - 90; // -90 to start at top
                          
                          // Only render segments with actual percentage values
                          return segmentPct > 0 ? (
                            <circle 
                              key={industry}
                              cx="50" 
                              cy="50" 
                              r="40" 
                              fill="none" 
                              stroke={color} 
                              strokeWidth="20"
                              strokeDasharray={`${circumference * (segmentPct / 100)} ${circumference}`}
                              transform={`rotate(${rotation} 50 50)`}
                              strokeLinecap="butt"
                            />
                          ) : null;
                        })
                      }
                      
                      {/* Central circle */}
                      <circle cx="50" cy="50" r="30" fill="white" />
                      
                      {/* If no allocations, show empty state text */}
                      {Object.entries(impact.industryAllocation).length === 0 && (
                        <text 
                          x="50" 
                          y="53" 
                          textAnchor="middle" 
                          fontSize="8" 
                          fill="#6b7280"
                        >
                          First investment
                        </text>
                      )}
                    </svg>
                  </div>
                  
                  {/* Better positioned industry legends with improved styling */}
                  {Object.entries(impact.industryAllocation).length > 0 && (
                    <div className="absolute inset-0 pointer-events-none">
                      {Object.entries(impact.industryAllocation).map(([industry, allocation], index) => {
                        const colors = ["#06b6d4", "#8b5cf6", "#fbbf24", "#34d399", "#f87171"];
                        const color = colors[index % colors.length];
                        
                        // Calculate positions around the pie chart for better spacing
                        let positionStyle = {};
                        
                        if (industry === "Real Estate") {
                          positionStyle = {
                            top: '10%',
                            right: '75%',
                          };
                        } else if (industry === "Technology") {
                          positionStyle = {
                            top: '20%',
                            left: '65%',
                          };
                        } else if (industry === "Healthcare") {
                          positionStyle = {
                            bottom: '20%',
                            left: '65%',
                          };
                        } else if (industry === "Financial") {
                          positionStyle = {
                            bottom: '20%',
                            right: '65%',
                          };
                        } else {
                          // Position other industries in a clean layout
                          const positions = [
                            { top: '10%', left: '50%', transform: 'translateX(-50%)' },
                            { bottom: '10%', left: '50%', transform: 'translateX(-50%)' },
                            { left: '10%', top: '50%', transform: 'translateY(-50%)' },
                            { right: '10%', top: '50%', transform: 'translateY(-50%)' },
                          ];
                          
                          positionStyle = positions[index % positions.length];
                        }
                        
                        // Only show legend items with actual values
                        return allocation.new > 0 ? (
                          <div 
                            key={industry} 
                            className="absolute flex items-center px-2 py-1 rounded-lg shadow-md bg-white border border-slate-200"
                            style={{
                              ...positionStyle,
                              zIndex: 10,
                              maxWidth: '120px',
                              opacity: 0.95,
                            }}
                          >
                            <div className="w-3 h-3 rounded-full mr-1.5" style={{ backgroundColor: color }}></div>
                            <div className="flex flex-col items-start">
                              <div className="flex items-center">
                                <span className="mr-1 text-xs text-slate-700 font-medium truncate">{industry}</span>
                                <span className="font-bold text-xs text-slate-900">{formatPercentage(allocation.new)}</span>
                              </div>
                              {/* Only show change indicator when there's a difference */}
                              {allocation.new !== allocation.current && Math.abs(allocation.new - allocation.current) > 0.1 && (
                                <span className={cn(
                                  "text-[10px] font-medium",
                                  allocation.new > allocation.current ? "text-green-600" : "text-red-600"
                                )}>
                                  {allocation.new > allocation.current ? "+" : ""}
                                  {formatPercentage(allocation.new - allocation.current)}
                                </span>
                              )}
                            </div>
                          </div>
                        ) : null;
                      })}
                    </div>
                  )}
                </div>
                
                {/* Improved Metrics Grid - More compact and space efficient */}
                <div className="grid grid-cols-2 gap-2 mb-4">
                  {Object.entries(impact.impact).map(([metric, change]) => (
                    <div 
                      key={metric} 
                      className="p-3 bg-white rounded-lg border border-slate-200 shadow-sm hover:shadow-md transition-all duration-200 hover:border-sky-200"
                    >
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center">
                          <div className={`p-1 rounded-md mr-1.5 ${
                            change > 0 ? "bg-green-100 text-green-600" : 
                            change < 0 ? "bg-red-100 text-red-600" : 
                            "bg-slate-100 text-slate-600"
                          }`}>
                            {getMetricIcon(metric, 14)}
                          </div>
                          <h4 className="font-semibold text-xs capitalize">{metric}</h4>
                          <button 
                            className="ml-1 text-slate-400 hover:text-slate-600 transition-colors"
                            onClick={(e) => {
                              e.stopPropagation();
                              setActiveTooltip(activeTooltip === metric ? null : metric);
                            }}
                            aria-label={`Info about ${metric}`}
                          >
                            <Info size={12} />
                          </button>
                          {activeTooltip === metric && (
                            <div 
                              className="absolute z-50 bg-white p-2 rounded-lg shadow-lg border border-slate-200 text-xs text-slate-700 max-w-[180px] mt-1 left-1/2 transform -translate-x-1/2"
                              style={{ top: '100%' }}
                            >
                              {(metricExplanations as any)[metric.toLowerCase()]}
                              <div className="absolute w-2 h-2 bg-white transform rotate-45 left-1/2 -mt-5 -ml-1 border-t border-l border-slate-200"></div>
                            </div>
                          )}
                        </div>
                        
                        <div className={`text-xs font-medium px-2 py-0.5 rounded-full ${
                          change > 0 ? "bg-green-100 text-green-700" : 
                          change < 0 ? "bg-red-100 text-red-700" : 
                          "bg-slate-100 text-slate-700"
                        }`}>
                          {change > 0 ? "+" : ""}{change.toFixed(1)}
                        </div>
                      </div>
                      
                      {/* Compact Current → New format with less vertical space */}
                      <div className="flex items-center justify-between text-sm">
                        {/* Current value */}
                        <div className="flex flex-col items-center">
                          <div className="text-[10px] text-slate-500">Current</div>
                          <div className="font-semibold bg-slate-50 px-2 py-1 rounded-md shadow-sm border border-slate-100 min-w-[40px] text-center">
                            {impact.currentMetrics[metric as keyof typeof impact.currentMetrics].toFixed(1)}
                          </div>
                        </div>
                        
                        {/* Arrow indicator */}
                        <div className="text-slate-400 mx-1">
                          <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <path d="M5 12h14"></path>
                            <path d="m12 5 7 7-7 7"></path>
                          </svg>
                        </div>
                        
                        {/* New value */}
                        <div className="flex flex-col items-center">
                          <div className="text-[10px] text-slate-500">New</div>
                          <div className={`font-semibold px-2 py-1 rounded-md shadow-sm border min-w-[40px] text-center ${
                            change > 0 ? "bg-green-50 border-green-100" : 
                            change < 0 ? "bg-red-50 border-red-100" : 
                            "bg-slate-50 border-slate-100"
                          }`}>
                            {impact.newMetrics[metric as keyof typeof impact.newMetrics].toFixed(1)}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                
                {/* Compact Investment Amount Controls */}
                <div className="bg-white rounded-lg border border-slate-200 shadow-sm p-3 mb-3">
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="font-bold text-sm text-slate-800">Investment Amount</h3>
                    <div className="flex items-center">
                      <button 
                        className={`px-2 py-0.5 text-xs rounded-l-md border ${
                          showValueShares ? 'bg-blue-50 text-blue-600 border-blue-200' : 'text-slate-500 border-slate-200'
                        }`}
                        onClick={() => setShowValueShares(true)}
                      >
                        Value
                      </button>
                      <button 
                        className={`px-2 py-0.5 text-xs rounded-r-md border ${
                          !showValueShares ? 'bg-blue-50 text-blue-600 border-blue-200' : 'text-slate-500 border-slate-200'
                        }`}
                        onClick={() => setShowValueShares(false)}
                      >
                        Shares
                      </button>
                    </div>
                  </div>
                  
                  {/* More compact input controls */}
                  <div className="flex items-center justify-between mb-2">
                    <button 
                      className="w-10 h-10 flex items-center justify-center bg-slate-100 rounded-full text-slate-700 hover:bg-slate-200 transition-colors"
                      onClick={decrementAmount}
                      disabled={investmentAmount <= 1}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M5 12h14"/></svg>
                    </button>
                    
                    <div className="relative">
                      <div className="absolute left-0 inset-y-0 flex items-center pl-2 pointer-events-none">
                        <span className="text-gray-500 text-sm">$</span>
                      </div>
                      <input
                        type="number"
                        className="block w-24 sm:w-32 p-1.5 pl-6 text-center text-base font-semibold border border-slate-200 rounded-lg"
                        value={investmentAmount}
                        onChange={handleAmountChange}
                        min={1}
                        max={maxInvestment}
                      />
                    </div>
                    
                    <button 
                      className="w-10 h-10 flex items-center justify-center bg-slate-100 rounded-full text-slate-700 hover:bg-slate-200 transition-colors"
                      onClick={incrementAmount}
                      disabled={investmentAmount >= maxInvestment}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M5 12h14"/><path d="M12 5v14"/></svg>
                    </button>
                  </div>
                  
                  {/* Improved share/value display and projected return */}
                  <div className="flex flex-col text-sm space-y-2">
                    <div className="text-center text-xs text-slate-600">
                      {showValueShares ? (
                        <span>Approx. {shares.toFixed(4)} shares @ {formatCurrency(stock.price)}</span>
                      ) : (
                        <span>Value: {formatCurrency(shares * stock.price)}</span>
                      )}
                    </div>
                    
                    <div className="flex items-center justify-between bg-gradient-to-r from-blue-50 to-indigo-50 rounded-md p-2 text-blue-800 text-sm">
                      <div className="flex items-center">
                        <TrendingUp size={14} className="mr-1.5 text-blue-500" />
                        <span className="font-medium">Projected Return:</span>
                      </div>
                      <span className="font-bold">{formatCurrency(projectedReturn)}</span>
                    </div>
                  </div>
                </div>
                
                {/* Clickable Invest Button - Modern and clean alternative to slider */}
                <div className="mt-6">
                  {isLoading ? (
                    <motion.button 
                      disabled
                      className="w-full h-14 rounded-xl bg-gradient-to-r from-green-500 to-emerald-600 text-white font-semibold text-lg shadow-lg flex items-center justify-center"
                      animate={{ 
                        scale: [1, 1.02, 1],
                        opacity: [0.9, 1, 0.9]
                      }}
                      transition={{ 
                        repeat: Infinity,
                        duration: 1.5
                      }}
                    >
                      <svg className="animate-spin mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Processing...
                    </motion.button>
                  ) : (
                    <motion.button
                      onClick={handleInvest}
                      className="w-full h-14 rounded-xl bg-gradient-to-r from-green-500 to-emerald-600 text-white font-semibold text-lg shadow-lg
                      flex items-center justify-center space-x-2 transition-all duration-300
                      hover:shadow-xl hover:from-green-400 hover:to-emerald-500 hover:scale-[1.02] active:scale-[0.98]"
                      whileTap={{ scale: 0.98 }}
                      whileHover={{ 
                        boxShadow: "0 10px 25px -5px rgba(16, 185, 129, 0.4), 0 8px 10px -6px rgba(16, 185, 129, 0.2)"
                      }}
                    >
                      <span>Invest {formatCurrency(investmentAmount)}</span>
                      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <path d="M5 12h14" />
                        <path d="m12 5 7 7-7 7" />
                      </svg>
                    </motion.button>
                  )}
                  
                  {/* Paper trading disclaimer */}
                  <div className="text-center text-xs text-slate-500 mt-3">
                    This is paper trading with virtual money.
                    <br />No real transactions will be processed.
                  </div>
                </div>
              </div>
            </div>
          </motion.div>
        </>
      )}
      
      {/* Purchase Success Modal */}
      <PurchaseSuccessModal
        isOpen={showSuccessModal}
        onClose={handleSuccessModalClose}
        stock={stock}
        shares={shares}
        amount={investmentAmount}
        projectedReturn={projectedReturn}
      />
    </AnimatePresence>
  );
}

================
File: client/src/components/ui/progress-ring.tsx
================
import { useState, useEffect } from "react";

interface ProgressRingProps {
  progress: number; // 0 to 100
  size?: number;
  strokeWidth?: number;
  children?: React.ReactNode;
  className?: string;
  color?: string;
  bgColor?: string;
}

export default function ProgressRing({
  progress,
  size = 32,
  strokeWidth = 5,
  children,
  className = "",
  color = "currentColor text-primary-500",
  bgColor = "text-gray-200",
}: ProgressRingProps) {
  const [offset, setOffset] = useState(0);
  
  // Calculate the radius of the circle
  const radius = (size - strokeWidth) / 2;
  
  // Calculate the circumference of the circle
  const circumference = radius * 2 * Math.PI;
  
  useEffect(() => {
    // Calculate the offset based on the progress
    const progressOffset = circumference - (progress / 100) * circumference;
    setOffset(progressOffset);
  }, [circumference, progress]);
  
  return (
    <div className={`relative inline-flex items-center justify-center ${className}`}>
      <svg className={`w-${size} h-${size}`} width={size} height={size}>
        <circle
          className={bgColor}
          strokeWidth={strokeWidth}
          stroke="currentColor"
          fill="transparent"
          r={radius}
          cx={size / 2}
          cy={size / 2}
        />
        <circle
          className={`progress-ring-circle ${color}`}
          strokeWidth={strokeWidth}
          strokeDasharray={circumference}
          strokeDashoffset={offset}
          strokeLinecap="round"
          stroke="currentColor"
          fill="transparent"
          r={radius}
          cx={size / 2}
          cy={size / 2}
          style={{
            transform: "rotate(-90deg)",
            transformOrigin: "50% 50%",
            transition: "stroke-dashoffset 0.35s",
          }}
        />
      </svg>
      <div className="absolute inset-0 flex items-center justify-center">
        {children}
      </div>
    </div>
  );
}

================
File: client/src/components/ui/progress.tsx
================
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: client/src/components/ui/purchase-success-modal.tsx
================
import React from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Check, X, TrendingUp } from "lucide-react";
import { StockData } from "@/lib/stock-data";

interface PurchaseSuccessModalProps {
  isOpen: boolean;
  onClose: () => void;
  stock: StockData;
  shares: number;
  amount: number;
  projectedReturn: number;
}

export default function PurchaseSuccessModal({
  isOpen,
  onClose,
  stock,
  shares,
  amount,
  projectedReturn,
}: PurchaseSuccessModalProps) {
  // Format currency for display
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(value);
  };

  return (
    <AnimatePresence mode="wait" key="success-modal">
      {isOpen && (
        <>
          {/* Semi-transparent backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 0.7 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black z-[59]"
            onClick={onClose}
          />
          
          {/* Success modal with green background */}
          <motion.div
            initial={{ opacity: 0, scale: 0.9, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 20 }}
            transition={{ type: "spring", damping: 25, stiffness: 300 }}
            className="success-modal fixed left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 z-[60]
                       w-[85%] max-w-xs rounded-xl overflow-hidden bg-gradient-to-b from-green-500 to-green-600 
                       shadow-2xl border border-green-400"
            style={{
              boxShadow: '0 20px 60px -15px rgba(0, 0, 0, 0.25), 0 12px 25px -10px rgba(0, 0, 0, 0.1)'
            }}
          >
            {/* Header with close button */}
            <div className="flex justify-between items-center p-3 border-b border-green-400">
              <div className="flex items-center">
                <div className="bg-white rounded-full p-1.5 mr-2">
                  <Check size={16} className="text-green-600" />
                </div>
                <h2 className="text-lg font-bold text-white">Congratulations!</h2>
              </div>
              <button 
                onClick={onClose}
                className="p-1.5 rounded-full bg-white/20 text-white hover:bg-white/30 transition-colors
                           flex items-center justify-center focus:outline-none focus:ring-2 focus:ring-white/50"
                aria-label="Close"
              >
                <X size={16} />
              </button>
            </div>
            
            {/* Content */}
            <div className="p-4 text-white">
              <div className="mb-4 text-center">
                <p className="text-2xl font-bold mb-1">
                  {shares.toFixed(4)} shares
                </p>
                <p className="text-lg font-semibold mb-3">
                  of {stock.name} ({stock.ticker})
                </p>
                
                <div className="flex justify-center items-center space-x-2 mb-2">
                  <div className="bg-white/20 px-3 py-1.5 rounded-lg flex-1">
                    <p className="text-xs font-medium">Investment</p>
                    <p className="text-lg font-bold">{formatCurrency(amount)}</p>
                  </div>
                  
                  <div className="flex items-center text-white/60">
                    <TrendingUp size={16} />
                  </div>
                  
                  <div className="bg-white/20 px-3 py-1.5 rounded-lg flex-1">
                    <p className="text-xs font-medium">Projected Return</p>
                    <p className="text-lg font-bold">{formatCurrency(projectedReturn)}</p>
                  </div>
                </div>
              </div>
              
              {/* Action button */}
              <button
                onClick={onClose}
                className="w-full py-2.5 bg-white rounded-lg text-green-600 font-bold text-base
                           hover:bg-green-50 transition-colors shadow-md"
              >
                Continue Investing
              </button>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
}

================
File: client/src/components/ui/radio-group.tsx
================
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: client/src/components/ui/resizable.tsx
================
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: client/src/components/ui/scroll-area.tsx
================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: client/src/components/ui/select.tsx
================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: client/src/components/ui/separator.tsx
================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: client/src/components/ui/sheet.tsx
================
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: client/src/components/ui/sidebar.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        if (setOpenProp) {
          return setOpenProp?.(
            typeof value === "function" ? value(open) : value
          )
        }

        _setOpen(value)

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: client/src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: client/src/components/ui/slider.tsx
================
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: client/src/components/ui/stack-card.tsx
================
import { TrendingUp, BarChart2, Star, Clock, ChevronLeft, ChevronRight, Heart } from "lucide-react";
import type { Stack } from "@shared/schema";
import { motion } from "framer-motion";
import { useState, useEffect } from "react";

interface StackCardProps {
  stack: Stack;
  onClick: (stackId: number) => void;
  imageUrl?: string;
  category?: string;
}

export default function StackCard({ stack, onClick, imageUrl, category }: StackCardProps) {
  // State for swipe animation cues
  const [showSwipeCues, setShowSwipeCues] = useState(true);
  const [currentCardIndex, setCurrentCardIndex] = useState(1);
  const totalCards = stack.cardCount || 10;
  
  // Hide swipe cues after a few seconds
  useEffect(() => {
    const timer = setTimeout(() => {
      setShowSwipeCues(false);
    }, 3000);
    
    return () => clearTimeout(timer);
  }, []);
  
  // Get a unique gradient based on stack id or title
  const getGradient = () => {
    const gradients = [
      "from-cyan-500 to-blue-600", // Tech
      "from-green-500 to-emerald-600", // ESG
      "from-purple-500 to-indigo-600", // Financial
      "from-red-500 to-rose-600", // Healthcare
      "from-orange-500 to-amber-600", // Consumer
      "from-blue-500 to-violet-600", // Real Estate
      "from-yellow-500 to-orange-600", // Bonds
      "from-teal-500 to-green-600", // ETFs
      "from-pink-500 to-rose-600", // Crypto
      "from-indigo-500 to-blue-600", // Stocks
    ];

    const index = stack.id % gradients.length;
    return gradients[index];
  };

  return (
    <motion.div 
      className="stack-card rounded-xl overflow-hidden flex flex-col shadow-lg border border-gray-800 bg-gray-900 h-64"
      onClick={() => onClick(stack.id)}
      whileHover={{ y: -5, transition: { duration: 0.2 } }}
      whileTap={{ scale: 0.98 }}
    >
      {/* Card Header with Image */}
      <div className="relative h-36 overflow-hidden">
        {/* Image with overlay gradient */}
        <div className="absolute inset-0 bg-black/30 z-10" />

        <div 
          className="w-full h-full bg-cover bg-center" 
          style={{ 
            backgroundImage: imageUrl ? `url(${imageUrl})` : 'none'
          }}
        />
        
        {/* Swipe indicators - only show for a few seconds */}
        {showSwipeCues && (
          <>
            <motion.div 
              className="absolute left-2 top-1/2 -translate-y-1/2 bg-black/70 backdrop-blur-sm rounded-full p-1 z-10"
              initial={{ opacity: 0, x: -5 }}
              animate={{ opacity: 0.8, x: 0 }}
              transition={{ repeat: 3, duration: 0.8, repeatType: "reverse" }}
            >
              <ChevronLeft className="w-4 h-4 text-white" />
            </motion.div>
            <motion.div 
              className="absolute right-2 top-1/2 -translate-y-1/2 bg-black/70 backdrop-blur-sm rounded-full p-1 z-10"
              initial={{ opacity: 0, x: 5 }}
              animate={{ opacity: 0.8, x: 0 }}
              transition={{ repeat: 3, duration: 0.8, repeatType: "reverse" }}
            >
              <ChevronRight className="w-4 h-4 text-white" />
            </motion.div>
          </>
        )}
        
        {/* Card Stack Preview - simulate the edge of the next card */}
        <div className="absolute -right-1 top-6 bottom-6 w-2 rounded-l-md bg-gray-200/10 backdrop-blur-sm z-10" />

        {/* Decorative gradient band */}
        <div className={`absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r ${getGradient()}`} />

        {/* Category badge */}
        {category && (
          <div className="absolute top-3 left-3 bg-black/60 border border-gray-700 backdrop-blur-sm rounded-full px-3 py-1 text-xs font-medium z-10 text-white">
            {category}
          </div>
        )}

        {/* Rating */}
        <div className="absolute bottom-3 left-3 bg-black/60 backdrop-blur-sm rounded-full px-3 py-1 flex items-center space-x-1 text-xs z-10 border border-gray-700">
          <Star className="w-3 h-3 text-yellow-400" />
          <span className="text-white">{stack.rating}.0</span>
        </div>

        {/* Card count with progress */}
        <div className="absolute bottom-3 right-3 bg-black/60 backdrop-blur-sm border border-gray-700 rounded-full px-3 py-1 flex items-center space-x-1 text-xs z-10">
          <BarChart2 className="w-3 h-3 text-cyan-400" />
          <span className="text-white">{currentCardIndex}/{totalCards} stocks</span>
        </div>
      </div>

      {/* Card Body */}
      <div className="px-4 py-3 flex-1 flex flex-col justify-between">
        {/* Title with icon */}
        <div>
          <div className="flex items-start justify-between">
            <h3 className="font-bold text-lg text-gray-800 leading-tight">{stack.title}</h3> {/* Changed text color here */}
            <div className="p-1.5 rounded-full bg-gray-800">
              <TrendingUp className="w-4 h-4 text-cyan-400" />
            </div>
          </div>
          <p className="text-xs text-gray-400 mt-1 line-clamp-2">{stack.description}</p>
        </div>

        {/* Bottom badges */}
        <div className="mt-3 flex items-center justify-between">
          <div className={`badge ${
            stack.difficulty === 'beginner' ? 'bg-green-900/40 text-green-400 border-green-500/30' :
            stack.difficulty === 'intermediate' ? 'bg-yellow-900/40 text-yellow-400 border-yellow-500/30' :
            'bg-red-900/40 text-red-400 border-red-500/30'
          } text-xs px-2 py-1 rounded-full border`}>
            {stack.difficulty || 'intermediate'}
          </div>
          
          {/* Favorite button */}
          <button 
            className="rounded-full p-1.5 bg-gray-800/30 hover:bg-gray-800/50 transition-colors"
            onClick={(e) => {
              e.stopPropagation(); // Prevent triggering the card click
              // Implement favorite functionality later
            }}
          >
            <Heart className="w-3.5 h-3.5 text-pink-400" />
          </button>
        </div>
        
        {/* Card navigation dots */}
        <div className="flex justify-center mt-2 space-x-1">
          {Array.from({ length: Math.min(5, totalCards) }).map((_, i) => (
            <button
              key={i}
              className={`w-1.5 h-1.5 rounded-full transition-colors ${
                i === 0 ? 'bg-cyan-500' : 'bg-gray-400/30'
              }`}
              onClick={(e) => {
                e.stopPropagation();
                setCurrentCardIndex(i + 1);
              }}
            />
          ))}
        </div>
      </div>
    </motion.div>
  );
}

================
File: client/src/components/ui/stock-card.tsx
================
import { useState, useRef, useMemo } from "react";
import { StockData } from "@/lib/stock-data";
import { getIndustryAverages } from "@/lib/industry-data";
import { Info, ChevronLeft, ChevronRight, RefreshCw, DollarSign, TrendingUp, Shield, Zap } from "lucide-react";
import { motion, useAnimation, useMotionValue, useTransform, PanInfo } from "framer-motion";
import MetricPopup from "./metric-popup-fixed";
import PortfolioImpactCalculator from "./portfolio-impact-calculator";
import OverallAnalysisCard from "@/components/overall-analysis-card";
import { Skeleton } from "@/components/ui/skeleton";
import ComparativeAnalysis from "@/components/comparative-analysis";

interface StockCardProps {
  stock: StockData;
  onNext: () => void;
  onPrevious: () => void;
  currentIndex: number;
  totalCount: number;
  nextStock?: StockData;
  displayMode?: 'simple' | 'realtime';
}

type TimeFrame = "1D" | "5D" | "1M" | "6M" | "YTD" | "1Y" | "5Y" | "MAX";

// Helper to generate new chart data based on the selected time frame
const generateTimeBasedData = (data: number[], timeFrame: TimeFrame) => {
  // Create variations of the chart data based on timeframe
  switch(timeFrame) {
    case "1D":
      // 1-day data will be more volatile with hourly fluctuations
      return data.map((point, i) => point * (1 + Math.sin(i * 0.5) * 0.03));
    case "5D":
      // 5-day data will have bigger swings
      return data.map((point, i) => point * (1 + Math.sin(i * 0.3) * 0.05));
    case "1M":
      // Default monthly data
      return data;
    case "6M":
      // 6-month data will be smoother with an overall trend
      return data.map((point, i) => point * (1 + (i/data.length) * 0.1));
    case "1Y":
      // 1-year data with more pronounced trends
      return data.map((point, i) => point * (1 + Math.sin(i * 0.2) * 0.08 + (i/data.length) * 0.15));
    case "5Y":
      // 5-year data with longer cycles
      return data.map((point, i) => point * (1 + Math.sin(i * 0.1) * 0.12 + (i/data.length) * 0.3));
    case "MAX":
      // Lifetime data with very long cycles 
      return data.map((point, i) => point * (1 + Math.sin(i * 0.05) * 0.15 + (i/data.length) * 0.5));
    default:
      return data;
  }
};

// Function to get time scale labels based on timeframe
const getTimeScaleLabels = (timeFrame: TimeFrame): string[] => {
  switch(timeFrame) {
    case "1D":
      return ["9:30", "11:00", "12:30", "14:00", "15:30", "16:00"];
    case "5D":
      return ["Mon", "Tue", "Wed", "Thu", "Fri"];
    case "1M":
      return ["Week 1", "Week 2", "Week 3", "Week 4"];
    case "6M":
      return ["Jan", "Feb", "Mar", "Apr", "May", "Jun"];
    case "YTD":
      return ["Jan", "Mar", "May", "Jul", "Sep", "Nov"];
    case "1Y":
      return ["Jan", "Mar", "May", "Jul", "Sep", "Nov"];
    case "5Y":
      return ["2020", "2021", "2022", "2023", "2024"];
    case "MAX":
      return ["2015", "2017", "2019", "2021", "2023"];
    default:
      return ["9:30", "11:00", "12:30", "14:00", "15:30", "16:00"];
  }
};

// Function to get industry average metrics for the metric popup using our industry-data module
const getIndustryAverageData = (stock: StockData, metricType: string) => {
  // Get industry averages from our centralized data
  const industryAvgs = getIndustryAverages(stock.industry);

  // Format for display
  if (metricType === 'performance') {
    return [
      { label: "Revenue Growth", value: `${industryAvgs.performance.revenueGrowth}` },
      { label: "Profit Margin", value: `${industryAvgs.performance.profitMargin}` },
      { label: "Return on Capital", value: `${industryAvgs.performance.returnOnCapital}` }
    ];
  } else if (metricType === 'stability') {
    return [
      { label: "Volatility", value: `${industryAvgs.stability.volatility}` },
      { label: "Beta", value: `${industryAvgs.stability.beta}` },
      { label: "Dividend Consistency", value: `${industryAvgs.stability.dividendConsistency}` }
    ];
  } else if (metricType === 'value') {
    return [
      { label: "P/E Ratio", value: `${industryAvgs.value.peRatio}` },
      { label: "P/B Ratio", value: `${industryAvgs.value.pbRatio}` },
      { label: "Dividend Yield", value: `${industryAvgs.value.dividendYield}` }
    ];
  } else if (metricType === 'momentum') {
    return [
      { label: "3-Month Return", value: `${industryAvgs.momentum.threeMonthReturn}` },
      { label: "Relative Performance", value: `${industryAvgs.momentum.relativePerformance}` },
      { label: "RSI", value: `${industryAvgs.momentum.rsi}` }
    ];
  }

  // Default empty array if metric type is not recognized
  return [];
};

export default function StockCard({ 
  stock, 
  onNext, 
  onPrevious, 
  currentIndex, 
  totalCount,
  nextStock,
  displayMode = 'realtime'
}: StockCardProps) {
  const cardControls = useAnimation();
  const x = useMotionValue(0);
  // Smoother opacity transform for better visual experience
  const cardOpacity = useTransform(x, [-300, -100, 0, 100, 300], [0, 0.9, 1, 0.9, 0]);
  // Smoother rotation transform for more natural feel
  const cardRotate = useTransform(x, [-300, 0, 300], [-6, 0, 6]);
  // Scale effect for better tactile feel
  const cardScale = useTransform(x, [-300, -150, 0, 150, 300], [0.95, 0.97, 1, 0.97, 0.95]);
  const cardRef = useRef<HTMLDivElement>(null);

  const [timeFrame, setTimeFrame] = useState<TimeFrame>("1D");
  const [swipeDirection, setSwipeDirection] = useState<string | null>(null);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [showSkippedMessage, setShowSkippedMessage] = useState(false);

  // State for metric popup
  const [isMetricPopupOpen, setIsMetricPopupOpen] = useState(false);
  const [selectedMetric, setSelectedMetric] = useState<{
    name: string;
    color: "green" | "yellow" | "red";
    data: any;
  } | null>(null);

  // State for portfolio impact calculator (real-time mode only)
  const [isPortfolioImpactOpen, setIsPortfolioImpactOpen] = useState(false);

  // Use static data only
  const chartData = useMemo(() => 
    generateTimeBasedData(stock.chartData, timeFrame),
    [stock.chartData, timeFrame]
  );

  // Format display price
  const displayPrice = stock.price.toFixed(2);
  const realTimeChange = stock.change;

  // Calculate min/max for chart display
  const minValue = Math.min(...chartData) - 5;
  const maxValue = Math.max(...chartData) + 5;

  // Get time scale labels based on selected timeframe
  const timeScaleLabels = useMemo(() => 
    getTimeScaleLabels(timeFrame),
    [timeFrame]
  );

  // Calculate price range for Y-axis
  const priceRangeMin = Math.floor(minValue);
  const priceRangeMax = Math.ceil(maxValue);

  // Get current date for the trading day
  const latestTradingDay = new Date().toISOString().split('T')[0];

  // Function to refresh data - now just a visual effect with no actual data refresh
  const refreshData = async () => {
    setIsRefreshing(true);
    setTimeout(() => setIsRefreshing(false), 1000); // Add a small delay for the animation
  };

  // Add a direct button for easier testing/accessibility (real-time mode only)
  const openPortfolioCalculator = () => {
    setIsPortfolioImpactOpen(true);
  };
  
  // Function to handle investment button click - used by the Buy button in stock detail page
  const handleInvestButtonClick = () => {
    openPortfolioCalculator();
  };

  // Enhanced drag handler with smoother transitions and feedback
  const handleDragEnd = (event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {
    const threshold = 100;

    if (displayMode === 'realtime') {
      // Right swipe (positive x) - Open portfolio impact calculator
      if (info.offset.x > threshold) {
        setSwipeDirection("right");
        // Haptic feedback if available
        if (navigator.vibrate) {
          navigator.vibrate(50);
        }
        // Open portfolio calculator
        setIsPortfolioImpactOpen(true);

        // Spring back animation
        cardControls.start({
          x: 0,
          opacity: 1,
          scale: 1,
          transition: { 
            type: "spring", 
            stiffness: 400, 
            damping: 30,
            duration: 0.4
          }
        });
        setSwipeDirection(null);
      } 
      // Left swipe (negative x) - Skip to next card
      else if (info.offset.x < -threshold) {
        setSwipeDirection("left");
        // Haptic feedback if available
        if (navigator.vibrate) {
          navigator.vibrate(30);
        }

        // Animate card off screen to the left
        cardControls.start({
          x: -500,
          opacity: 0,
          transition: { duration: 0.3 }
        }).then(() => {
          onNext();
          cardControls.set({ x: 0, opacity: 1 });
          setSwipeDirection(null);
        });
      } 
      // Not enough drag - Spring back
      else {
        cardControls.start({
          x: 0,
          opacity: 1,
          scale: 1,
          transition: { 
            type: "spring", 
            stiffness: 500, 
            damping: 30,
            duration: 0.3
          }
        });
        setSwipeDirection(null);
      }
    } else {
      // Simple mode swipe handling
      if (info.offset.x > threshold) {
        // Right swipe
        setSwipeDirection("right");
        cardControls.start({
          x: window.innerWidth,
          opacity: 0,
          transition: { duration: 0.3 }
        }).then(() => {
          onPrevious();
          cardControls.set({ x: 0, opacity: 1 });
          setSwipeDirection(null);
        });
      } else if (info.offset.x < -threshold) {
        // Left swipe
        setSwipeDirection("left");
        cardControls.start({
          x: -window.innerWidth,
          opacity: 0,
          transition: { duration: 0.3 }
        }).then(() => {
          onNext();
          cardControls.set({ x: 0, opacity: 1 });
          setSwipeDirection(null);
        });
      } else {
        // Return to center
        cardControls.start({
          x: 0,
          opacity: 1,
          scale: 1,
          transition: { type: "spring", stiffness: 300, damping: 25 }
        });
        setSwipeDirection(null);
      }
    }
  };

  // Handler for metric button clicks
  const handleMetricClick = (metricName: string) => {
    // Get color and data for the selected metric
    let color: "green" | "yellow" | "red" = "green";
    let metricObj;
    let metricDetails;

    switch(metricName) {
      case "Performance":
        metricObj = stock.metrics.performance;
        metricDetails = stock.metrics.performance.details;
        break;
      case "Stability":
        metricObj = stock.metrics.stability;
        metricDetails = stock.metrics.stability.details;
        break;
      case "Value":
        metricObj = stock.metrics.value;
        metricDetails = stock.metrics.value.details;
        break;
      case "Momentum":
        metricObj = stock.metrics.momentum;
        metricDetails = stock.metrics.momentum.details;
        break;
      default:
        return;
    }

    // Map color string to type
    if (metricObj.color === "green") color = "green";
    else if (metricObj.color === "yellow") color = "yellow";
    else if (metricObj.color === "red") color = "red";

    // Format metric values for display
    const metricValues = [];
    if (metricName === "Performance") {
      const perfDetails = metricDetails as { 
        revenueGrowth: number; 
        profitMargin: number; 
        returnOnCapital: number;
        revenueGrowthExplanation?: string;
        profitMarginExplanation?: string;
        returnOnCapitalExplanation?: string;
      };
      metricValues.push(
        { 
          label: "Revenue Growth", 
          value: perfDetails.revenueGrowth, 
          suffix: "%",
          explanation: perfDetails.revenueGrowthExplanation || "How much the company's total sales have grown compared to last year."
        },
        { 
          label: "Profit Margin", 
          value: perfDetails.profitMargin, 
          suffix: "%",
          explanation: perfDetails.profitMarginExplanation || "The percentage of sales that become profit after all expenses."
        },
        { 
          label: "Return on Capital", 
          value: perfDetails.returnOnCapital, 
          suffix: "%",
          explanation: perfDetails.returnOnCapitalExplanation || "How efficiently the company uses its investments to generate profits."
        }
      );
    } else if (metricName === "Stability") {
      const stabDetails = metricDetails as { 
        volatility: number; 
        beta: number; 
        dividendConsistency: string;
        volatilityExplanation?: string;
        betaExplanation?: string;
        dividendConsistencyExplanation?: string;
      };
      metricValues.push(
        { 
          label: "Volatility", 
          value: stabDetails.volatility, 
          suffix: "",
          explanation: stabDetails.volatilityExplanation || "How dramatically the stock price fluctuates; lower means more stable."
        },
        { 
          label: "Beta", 
          value: stabDetails.beta, 
          suffix: "",
          explanation: stabDetails.betaExplanation || "How much the stock moves relative to the market. 1.0 means it moves with the market."
        },
        { 
          label: "Dividend Consistency", 
          value: stabDetails.dividendConsistency, 
          suffix: "",
          explanation: stabDetails.dividendConsistencyExplanation || "How reliably the company pays and increases its dividends over time."
        }
      );
    } else if (metricName === "Value") {
      const valDetails = metricDetails as { 
        peRatio: number; 
        pbRatio: number; 
        dividendYield: number | "N/A";
        peRatioExplanation?: string;
        pbRatioExplanation?: string;
        dividendYieldExplanation?: string;
      };
      metricValues.push(
        { 
          label: "P/E Ratio", 
          value: valDetails.peRatio, 
          suffix: "",
          explanation: valDetails.peRatioExplanation || "The price you pay for each dollar of company earnings."
        },
        { 
          label: "P/B Ratio", 
          value: valDetails.pbRatio, 
          suffix: "",
          explanation: valDetails.pbRatioExplanation || "The price compared to the company's accounting book value."
        },
        { 
          label: "Dividend Yield", 
          value: valDetails.dividendYield === "N/A" ? "N/A" : valDetails.dividendYield, 
          suffix: valDetails.dividendYield === "N/A" ? "" : "%",
          explanation: valDetails.dividendYieldExplanation || "The percentage return you receive annually from dividends."
        }
      );
    } else if (metricName === "Momentum") {
      const momDetails = metricDetails as { 
        threeMonthReturn: number; 
        relativePerformance: number; 
        rsi: number;
        threeMonthReturnExplanation?: string;
        relativePerformanceExplanation?: string;
        rsiExplanation?: string;
      };
      metricValues.push(
        { 
          label: "3-Month Return", 
          value: momDetails.threeMonthReturn, 
          suffix: "%",
          explanation: momDetails.threeMonthReturnExplanation || "How much the stock price has changed in the last three months."
        },
        { 
          label: "Relative Performance", 
          value: momDetails.relativePerformance, 
          suffix: "%",
          explanation: momDetails.relativePerformanceExplanation || "How the stock has performed compared to the overall market."
        },
        { 
          label: "RSI", 
          value: momDetails.rsi, 
          suffix: "",
          explanation: momDetails.rsiExplanation || "Technical indicator showing if a stock is potentially oversold or overbought."
        }
      );
    }

    // Get industry average data
    const industryAverage = displayMode === 'realtime' 
      ? getIndustryAverageData(stock, metricName.toLowerCase())
      : [];

    // Set selected metric data and open popup
    setSelectedMetric({
      name: metricName,
      color,
      data: {
        values: metricValues,
        rating: metricObj.value,
        industryAverage,
        industry: stock.industry,
        explanation: metricObj.explanation || "",
        name: stock.name
      }
    });

    setIsMetricPopupOpen(true);
  };

  // Render appropriate stock card based on display mode
  if (displayMode === 'simple') {
    return (
      <div className="relative h-full w-full overflow-hidden">
        {/* Card stack container */}
        <div className="absolute inset-0 flex items-center justify-center">
          {/* Next card in stack (positioned behind) */}
          {nextStock && (
            <div 
              className="absolute inset-0 z-0 flex flex-col rounded-xl overflow-hidden"
              style={{
                transform: 'scale(0.92) translateY(20px)',
                opacity: 0.6,
                filter: 'blur(3px)'
              }}
            >
              {/* Very simple next card preview */}
              <div className="w-full h-full bg-gray-900 py-12 px-4 flex flex-col items-center justify-center">
                <div className="bg-black/40 rounded-xl p-6 border border-gray-700/40 shadow-xl backdrop-blur-sm w-11/12 max-w-md flex flex-col items-center text-center space-y-4">
                  <h2 className="text-2xl font-bold text-white">{nextStock.name}</h2>
                  <p className="text-xl font-medium text-gray-300">{nextStock.ticker}</p>
                  <div className={`text-lg font-bold px-4 py-1 rounded-full ${nextStock.change >= 0 ? 'text-green-300 bg-green-900/30' : 'text-red-300 bg-red-900/30'}`}>
                    ${nextStock.price.toFixed(2)} <span>{nextStock.change >= 0 ? '↑' : '↓'} {Math.abs(nextStock.change)}%</span>
                  </div>

                  {/* Blurred content suggestion */}
                  <div className="w-3/4 h-2 bg-gray-700/50 rounded-full mt-2"></div>
                  <div className="w-2/3 h-2 bg-gray-700/50 rounded-full"></div>
                </div>
              </div>
            </div>
          )}

          {/* Main stock card */}
          <motion.div
            className="absolute inset-0 z-10 bg-gradient-to-b from-gray-900 to-black rounded-xl overflow-y-auto"
            ref={cardRef}
            drag="x"
            dragConstraints={{ left: 0, right: 0 }}
            dragElastic={0.7}
            onDragEnd={handleDragEnd}
            animate={cardControls}
            whileDrag={{ scale: 0.98 }}
          >
            {/* Page indicator */}
            <div className="sticky top-2 left-0 right-0 z-20 flex justify-center">
              <div className="bg-gray-800/80 backdrop-blur-sm rounded-full px-3 py-1 text-xs border border-gray-700">
                {currentIndex + 1} / {totalCount}
              </div>
            </div>

            {/* Header with stock name and price */}
            <div className="p-4 border-b border-gray-800">
              <div className="flex justify-between items-center">
                <h2 className="text-xl font-bold text-white">{stock.name} <span className="text-gray-400">({stock.ticker})</span></h2>
                <div className={`flex items-center py-1 px-3 rounded-full ${stock.change >= 0 ? 'bg-green-900/30 text-green-300' : 'bg-red-900/30 text-red-300'}`}>
                  <span className="font-bold">${stock.price.toFixed(2)}</span>
                  <span className="ml-2 text-sm">{stock.change >= 0 ? '+' : ''}{stock.change}%</span>
                </div>
              </div>

              <p className="mt-2 text-sm text-gray-300">
                {stock.description}
              </p>
            </div>

            {/* Performance Metrics */}
            <div className="grid grid-cols-2 gap-3 p-4 border-b border-gray-800">
              {Object.entries(stock.metrics).map(([key, metricObj]) => {
                const metricName = key.charAt(0).toUpperCase() + key.slice(1);

                return (
                  <div 
                    key={key}
                    className={`p-3 rounded-xl relative ${
                      metricObj.color === 'green' ? 'bg-gradient-to-br from-green-900/40 to-black border border-green-500/30' :
                      metricObj.color === 'yellow' ? 'bg-gradient-to-br from-yellow-900/40 to-black border border-yellow-500/30' : 
                      'bg-gradient-to-br from-red-900/40 to-black border border-red-500/30'
                    } active:scale-95 transition-all duration-150 cursor-pointer shadow-lg hover:shadow-xl`}
                    onClick={() => handleMetricClick(metricName)}
                  >
                    <div className="absolute top-2 right-2">
                      <Info size={16} className={`${
                        metricObj.color === 'green' ? 'text-green-400' :
                        metricObj.color === 'yellow' ? 'text-yellow-400' : 
                        'text-red-400'
                      }`} />
                    </div>
                    <div 
                      className={`text-lg font-bold ${
                        metricObj.color === 'green' ? 'text-green-300' :
                        metricObj.color === 'yellow' ? 'text-yellow-300' : 
                        'text-red-300'
                      }`}
                    >
                      {metricObj.value}
                    </div>
                    <div className="text-white text-sm font-medium capitalize mt-1">{metricName}</div>
                  </div>
                );
              })}
            </div>

            {/* Stock Synopsis */}
            <div className="p-4 border-b border-gray-800">
              <h3 className="text-lg font-bold text-white mb-3">Stock Synopsis</h3>

              <div className="bg-gray-800/50 rounded-xl border border-gray-700/50 overflow-hidden">
                <div className="border-b border-gray-700/70">
                  <div className="p-3">
                    <h4 className="font-bold text-white text-sm mb-1">Price Trend</h4>
                    <p className="text-sm text-gray-300">{stock.synopsis.price}</p>
                  </div>
                </div>

                <div className="border-b border-gray-700/70">
                  <div className="p-3">
                    <h4 className="font-bold text-white text-sm mb-1">Company Overview</h4>
                    <p className="text-sm text-gray-300">{stock.synopsis.company}</p>
                  </div>
                </div>

                <div>
                  <div className="p-3">
                    <h4 className="font-bold text-white text-sm mb-1">Portfolio Role</h4>
                    <p className="text-sm text-gray-300">{stock.synopsis.role}</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Future predictions */}
            <div className="p-4 border-b border-gray-800">
              <h3 className="text-lg font-bold text-white mb-3">Price Forecast <span className="text-xs bg-amber-900/70 text-amber-300 px-2 py-0.5 rounded-full ml-2">Premium</span></h3>

              <div className="grid grid-cols-2 gap-3">
                <div>
                  <h4 className="text-sm font-medium text-gray-300 mb-1">1-Year Return</h4>
                  <div className="p-2 bg-gray-800/50 rounded-lg border border-gray-700/50">
                    <span className="text-white font-bold">{stock.oneYearReturn || "N/A"}</span>
                  </div>
                </div>

                <div>
                  <h4 className="text-sm font-medium text-gray-300 mb-1">Predicted Price</h4>
                  <div className="p-2 bg-gray-800/50 rounded-lg border border-gray-700/50 relative overflow-hidden">
                    <span className="text-white font-bold blur-sm select-none">{stock.predictedPrice || "$0.00"}</span>
                    <div className="absolute inset-0 flex items-center justify-center">
                      <span className="text-amber-400 text-xs font-medium">Unlock Premium</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Full analysis */}
            <div className="p-4">
              <OverallAnalysisCard 
                ticker={stock.ticker}
                name={stock.name}
                rating={stock.rating}
                analysis={stock.overallAnalysis}
              />

              {/* Industry Position & Comparative Analysis */}
              <ComparativeAnalysis currentStock={stock} />
            </div>
          </motion.div>
        </div>

        {/* Swipe indicators */}
        <div className="absolute top-1/2 left-4 z-20 transform -translate-y-1/2 opacity-50">
          <ChevronLeft size={40} className={`text-white/30 ${currentIndex === 0 ? 'invisible' : ''}`} />
        </div>
        <div className="absolute top-1/2 right-4 z-20 transform -translate-y-1/2 opacity-50">
          <ChevronRight size={40} className="text-white/30" />
        </div>

        {/* Metric Popup */}
        {isMetricPopupOpen && selectedMetric && (
          <MetricPopup
            isOpen={isMetricPopupOpen}
            onClose={() => setIsMetricPopupOpen(false)}
            metricName={selectedMetric.name}
            metricColor={selectedMetric.color}
            metricData={selectedMetric.data}
          />
        )}
      </div>
    );
  }

  // Real-time display mode
  return (
    <div className="relative h-full" data-testid="stock-card">
      {/* Blurred background stock (next in stack) - visible during swipes */}
      <div 
        className="absolute inset-0 overflow-hidden blur-xl pointer-events-none opacity-20"
        style={{
          clipPath: x.get() > 0 ? 'inset(0 0 0 100%)' : 'inset(0 0 0 0)',
          opacity: Math.abs(x.get()) > 50 ? 0.2 : 0,
          transform: `translateX(${x.get() < 0 ? '60px' : '-60px'})`
        }}
      >
        {/* This would ideally be the next stock's preview, simplified here */}
        <div className="w-full h-full bg-gradient-to-br from-slate-100 to-blue-50 flex items-center justify-center">
          <div className="w-32 h-32 rounded-full bg-gradient-to-tr from-blue-400/20 to-indigo-300/20"></div>
        </div>
      </div>
      {/* Skipped message - shows when swiping left */}
      {showSkippedMessage && (
        <motion.div
          className="absolute inset-0 z-30 flex items-center justify-center pointer-events-none"
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.8 }}
        >
          <div className="text-xl font-semibold bg-red-800/90 text-white px-6 py-3 rounded-xl border border-red-500/40 shadow-xl">
            Stock Skipped
          </div>
        </motion.div>
      )}

      <motion.div
        className="h-full overflow-y-auto overflow-x-hidden pb-16 stock-card"
        ref={cardRef}
        drag="x"
        dragConstraints={{ left: 0, right: 0 }}
        dragElastic={0.7}
        onDragEnd={handleDragEnd}
        animate={cardControls}
        style={{ x, opacity: cardOpacity, rotateZ: cardRotate, scale: cardScale }}
      >
        {/* Time Frame Selector - Enhanced with better visual contrast */}
        <div className="flex justify-center space-x-1 px-4 py-3 border-b border-slate-100 bg-white shadow-sm">
          {["1D", "5D", "1M", "6M", "YTD", "1Y", "5Y", "MAX"].map((period) => (
            <button
              key={period}
              className={`px-3 py-1 text-xs rounded-full transition-all duration-200 ${
                timeFrame === period 
                  ? `${realTimeChange >= 0 ? 'text-green-600 bg-green-50 border border-green-200 shadow-sm' : 'text-red-600 bg-red-50 border border-red-200 shadow-sm'} font-medium` 
                  : 'text-slate-600 hover:bg-slate-50 border border-transparent'
              }`}
              onClick={() => setTimeFrame(period as TimeFrame)}
            >
              {period}
            </button>
          ))}
        </div>

        {/* Stock Price and Chart - Enhanced with better visual hierarchy */}
        <div className="bg-white p-4 flex flex-col border-b border-slate-100 shadow-sm">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-1.5">
              <h2 className="text-xl font-bold text-slate-900">{stock.name}</h2>
              <span className="text-slate-500 font-medium bg-slate-50 px-2 py-0.5 rounded-md">{stock.ticker}</span>
            </div>
            <div className="flex items-center">
              <button 
                onClick={refreshData}
                className="p-1.5 rounded-full hover:bg-slate-100 transition-colors"
                disabled={isRefreshing}
              >
                <RefreshCw size={17} className={`text-slate-500 ${isRefreshing ? 'animate-spin' : ''}`} />
              </button>
            </div>
          </div>

          <div className="mt-2 flex items-center">
            <span className="text-3xl font-bold text-slate-900 drop-shadow-sm">${displayPrice}</span>
            <div className="ml-2 flex items-center">
              <span className={`flex items-center text-sm font-semibold px-2 py-0.5 rounded-full ${realTimeChange >= 0 ? 'text-green-600 bg-green-50' : 'text-red-600 bg-red-50'}`}>
                {realTimeChange >= 0 ? 
                  <TrendingUp size={14} className="mr-1" /> : 
                  <ChevronLeft size={14} className="mr-1 rotate-90" />}
                {realTimeChange >= 0 ? '+' : ''}{realTimeChange}%
              </span>
            </div>
          </div>
          
          {/* Day's range information */}
          <div className="mt-1 flex items-center text-xs text-slate-500">
            <span className="mr-2">Day's Range:</span>
            <span className="font-medium">${(parseFloat(displayPrice) * 0.98).toFixed(2)} - ${(parseFloat(displayPrice) * 1.02).toFixed(2)}</span>
          </div>

          {/* Chart placeholder - visualize the data */}
          <div className="relative mt-3 h-44 py-2">
            {/* Chart visual */}
            <div className="absolute inset-0 px-4">
              {/* Y-axis labels */}
              <div className="absolute left-0 top-0 bottom-0 flex flex-col justify-between text-[10px] text-slate-900 font-medium pointer-events-none py-3 z-10 w-12">
                <span>${Math.round(priceRangeMax)}</span>
                <span>${Math.round((priceRangeMax + priceRangeMin) / 2)}</span>
                <span>${Math.round(priceRangeMin)}</span>
              </div>

              {/* Chart path - dynamically draw based on chartData with extension to edge */}
              <div className="absolute inset-0 pl-12 pr-4">
                <svg className="w-full h-full" viewBox={`0 0 100 100`} preserveAspectRatio="none">
                  {/* Main chart line only - no fill */}
                  <path
                    d={`M-5,${100 - ((chartData[0] - minValue) / (maxValue - minValue)) * 100} ${chartData.map((point, i) => {
                      // Plot points with x-coordinates extending beyond the visible area
                      const x = (i / (chartData.length - 1)) * 110 - 5; // Extend from -5 to 105
                      const y = 100 - ((point - minValue) / (maxValue - minValue)) * 100;
                      return `L${x},${y}`;
                    }).join(' ')} L105,${100 - ((chartData[chartData.length-1] - minValue) / (maxValue - minValue)) * 100}`}
                    className={`${realTimeChange >= 0 ? 'stroke-green-500' : 'stroke-red-500'} fill-none`}
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
              </div>
            </div>

            {/* X-axis labels */}
            <div className="absolute left-0 right-0 bottom-1 pl-12 pr-4 flex justify-between text-[10px] text-slate-900 font-medium pointer-events-none">
              {timeScaleLabels.map((label, index) => (
                <span key={index}>{label}</span>
              ))}
            </div>
          </div>

          {/* Trading date and swipe instruction */}
          <div className="mt-4 flex items-center justify-between text-xs h-6">
            <span className="text-slate-900 font-medium">Last updated: {latestTradingDay}</span>
            <span className="text-slate-700 italic">Swipe <span className="text-red-600 font-medium">left to skip</span> • Swipe <span className="text-green-600 font-medium">right to invest</span></span>
          </div>
        </div>

        {/* Stock Metrics - Enhanced Card Style */}
        <div className="grid grid-cols-2 gap-4 p-4 bg-white border-b border-slate-100">
          {Object.entries(stock.metrics).map(([key, metricObj]) => {
            const metricName = key.charAt(0).toUpperCase() + key.slice(1);

            return (
              <div 
                key={key}
                className="group relative"
                onClick={() => handleMetricClick(metricName)}
              >
                {/* Background effect for hover that appears behind the card */}
                <div className={`absolute inset-0 rounded-xl blur-sm transform scale-[0.98] translate-y-1 opacity-0 group-hover:opacity-100 transition-all duration-300
                  ${metricObj.color === 'green' ? 'bg-gradient-to-r from-green-100/30 to-emerald-100/30' :
                  metricObj.color === 'yellow' ? 'bg-gradient-to-r from-amber-100/30 to-yellow-100/30' : 
                  'bg-gradient-to-r from-red-100/30 to-rose-100/30'}`}>
                </div>

                {/* Metric Card */}
                <div 
                  className={`p-4 rounded-xl border relative z-10 overflow-hidden active:scale-95 transition-all duration-150 cursor-pointer shadow-md hover:shadow-lg group-hover:translate-y-[-2px]
                    ${metricObj.color === 'green' ? 'bg-white border-green-200 group-hover:border-green-300' :
                    metricObj.color === 'yellow' ? 'bg-white border-amber-200 group-hover:border-amber-300' : 
                    'bg-white border-red-200 group-hover:border-red-300'}`}
                >
                  {/* Top gradient bar that appears on hover */}
                  <div className={`absolute top-0 left-0 w-full h-1 opacity-0 group-hover:opacity-100 transition-opacity duration-300
                    ${metricObj.color === 'green' ? 'bg-gradient-to-r from-green-400 to-emerald-500' :
                    metricObj.color === 'yellow' ? 'bg-gradient-to-r from-amber-400 to-yellow-500' : 
                    'bg-gradient-to-r from-red-400 to-rose-500'}`}>
                  </div>

                  {/* Metric indicator with icon */}
                  <div className="flex items-center justify-between mb-2">
                    <div className={`flex items-center justify-center rounded-full w-8 h-8 
                      ${metricObj.color === 'green' ? 'bg-green-100 text-green-600' :
                       metricObj.color === 'yellow' ? 'bg-amber-100 text-amber-600' : 
                       'bg-red-100 text-red-600'}`}
                    >
                      {key === 'performance' && <TrendingUp size={16} />}
                      {key === 'stability' && <Shield size={16} />}
                      {key === 'value' && <DollarSign size={16} />}
                      {key === 'momentum' && <Zap size={16} />}
                    </div>
                    <Info size={15} className="text-slate-400 group-hover:text-slate-600 transition-colors" />
                  </div>

                  {/* Metric value and name */}
                  <div className={`text-lg font-semibold 
                    ${metricObj.color === 'green' ? 'text-slate-900' :
                     metricObj.color === 'yellow' ? 'text-slate-900' : 
                     'text-slate-900'}`}
                  >
                    {metricObj.value}
                  </div>
                  <div className="text-slate-500 text-sm font-medium mt-0.5 capitalize">{metricName}</div>
                </div>
              </div>
            );
          })}
        </div>

        {/* Unified cards with consistent styling */}
        <div className="bg-white rounded-xl border border-slate-200 shadow-md overflow-hidden mb-4">
          {/* Common background with slight highlight */}
          <div className="absolute inset-0 bg-gradient-to-br from-blue-50/30 to-indigo-50/30 rounded-xl opacity-30"></div>

          {/* Price Trend */}
          <div className="p-4 border-b border-slate-100 relative">
            <div className="flex items-center gap-4">
              <div className={`${realTimeChange >= 0 ? 'text-white bg-gradient-to-br from-green-400 to-green-600' : 'text-white bg-gradient-to-br from-red-400 to-red-600'} 
                w-12 h-12 min-w-12 flex items-center justify-center rounded-lg shadow-md`}>
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6" />
                </svg>
              </div>
              <div className="flex-1 relative">
                <div className="font-bold text-slate-800 text-base flex items-center">
                  Price Trend
                  <div className={`ml-2 text-xs px-2 py-0.5 rounded-full ${realTimeChange >= 0 ? 'text-green-600 bg-green-50 border border-green-100' : 'text-red-600 bg-red-50 border border-red-100'}`}>
                    {realTimeChange >= 0 ? 'Bullish' : 'Bearish'}
                  </div>
                </div>
                <p className="text-slate-600 text-sm mt-1">
                  {stock.synopsis.price}
                </p>
              </div>
            </div>
          </div>

          {/* Company Overview */}
          <div className="p-4 border-b border-slate-100 relative">
            <div className="flex items-center gap-4">
              <div className="text-white bg-gradient-to-br from-blue-400 to-indigo-600 w-12 h-12 min-w-12 flex items-center justify-center rounded-lg shadow-md">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect>
                  <path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path>
                </svg>
              </div>
              <div className="flex-1 relative">
                <div className="font-bold text-slate-800 text-base flex items-center">
                  Company Overview
                </div>
                <p className="text-slate-600 text-sm mt-1">
                  {stock.synopsis.company}
                </p>
              </div>
            </div>
          </div>

          {/* Portfolio Role */}
          <div className="p-4 relative">
            <div className="flex items-center gap-4">
              <div className="text-white bg-gradient-to-br from-violet-400 to-purple-600 w-12 h-12 min-w-12 flex items-center justify-center rounded-lg shadow-md">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <circle cx="12" cy="12" r="10"></circle>
                  <path d="M12 16v-4"></path>
                  <path d="M12 8h.01"></path>
                </svg>
              </div>
              <div className="flex-1 relative">
                <div className="font-bold text-slate-800 text-base flex items-center">
                  Portfolio Role
                </div>
                <p className="text-slate-600 text-sm mt-1">
                  {stock.synopsis.role}
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Comparative Analysis Section */}
        <div 
          className="bg-white border-t border-b border-slate-100"
          onClick={(e) => e.stopPropagation()}
          onTouchStart={(e) => e.stopPropagation()}
          onTouchEnd={(e) => e.stopPropagation()}
        >
          <ComparativeAnalysis currentStock={stock} />
        </div>

        {/* Bottom Swipe Instruction */}
        <div className="p-4 bg-white border-t border-b border-slate-100 mb-4">
          <div className="text-center text-sm font-medium text-slate-600 my-2">
            Swipe <span className="text-red-600 font-medium">left to skip</span> • Swipe <span className="text-green-600 font-medium">right to invest</span>
          </div>
        </div>

        {/* Overall Analysis - Enhanced with consistent spacing */}
        {stock.overallAnalysis && (
          <div className="p-5 bg-gradient-to-b from-white to-slate-50">
            <div className="mb-1">
              <OverallAnalysisCard
                ticker={stock.ticker}
                name={stock.name}
                rating={stock.rating}
                analysis={stock.overallAnalysis}
              />
            </div>
          </div>
        )}
      </motion.div>

      {/* Metric Popup */}
      {selectedMetric && (
        <MetricPopup
          isOpen={isMetricPopupOpen}
          onClose={() => setIsMetricPopupOpen(false)}
          metricName={selectedMetric.name}
          metricColor={selectedMetric.color}
          metricData={selectedMetric.data}
        />
      )}

      {/* Hidden Buy Button - used for programmatic clicking */}
      <button 
        className="hidden"
        data-testid="buy-button"
        onClick={openPortfolioCalculator}
      >
        Buy
      </button>

      {/* Portfolio Impact Calculator */}
      <PortfolioImpactCalculator
        isOpen={isPortfolioImpactOpen}
        onClose={() => setIsPortfolioImpactOpen(false)}
        onInvest={() => {
          // Handle successful investment
          onNext(); // Move to next stock after investing
        }}
        stock={stock}
      />
    </div>
  );
}

================
File: client/src/components/ui/switch.tsx
================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: client/src/components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: client/src/components/ui/tabs.tsx
================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: client/src/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: client/src/components/ui/toast.tsx
================
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: client/src/components/ui/toaster.tsx
================
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: client/src/components/ui/toggle-group.tsx
================
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: client/src/components/ui/toggle.tsx
================
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: client/src/components/ui/tooltip.tsx
================
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: client/src/components/ui/topic-bubble.tsx
================
import { motion } from "framer-motion";

interface TopicBubbleProps {
  label: string;
  selected: boolean;
  onClick: () => void;
}

export default function TopicBubble({ label, selected, onClick }: TopicBubbleProps) {
  return (
    <motion.div
      className={`topic-bubble cursor-pointer ${
        selected 
          ? "bg-primary-100 text-primary-800" 
          : "bg-gray-100 text-gray-800"
      }`}
      whileTap={{ scale: 0.95 }}
      onClick={onClick}
    >
      {label}
    </motion.div>
  );
}

================
File: client/src/components/app-header.tsx
================
import { Bell, Menu, Smartphone } from "lucide-react";
import { useState } from "react";
import QRCodeModal from "./qr-code-modal";

export default function AppHeader() {
  const [showQRModal, setShowQRModal] = useState(false);

  return (
    <div className="app-header fixed top-0 left-0 right-0 z-20">
      <div className="bg-white border-b border-slate-100 shadow-sm flex items-center justify-between px-4 py-3">
        <div className="flex items-center">
          <Menu className="w-5 h-5 text-slate-500" />
        </div>
        
        <div className="absolute left-1/2 transform -translate-x-1/2 font-sans text-slate-800 text-xl font-semibold tracking-tight">
          Swipefolio
        </div>
        
        <div className="flex space-x-2">
          <button 
            className="bg-slate-50 rounded-full p-2 border border-slate-100" 
            onClick={() => setShowQRModal(true)}
            aria-label="Open on mobile"
          >
            <Smartphone className="w-5 h-5 text-sky-500" />
          </button>
          <button className="bg-slate-50 rounded-full p-2 border border-slate-100">
            <Bell className="w-5 h-5 text-slate-500" />
          </button>
        </div>
      </div>

      <QRCodeModal 
        isOpen={showQRModal}
        onClose={() => setShowQRModal(false)}
      />
    </div>
  );
}

================
File: client/src/components/app-navigation.tsx
================
import { Home, Search, Briefcase, User, BellRing, GraduationCap } from "lucide-react";
import { useLocation } from "wouter";

export default function AppNavigation() {
  const [location, setLocation] = useLocation();
  
  const isActive = (path: string) => {
    return location === path;
  };

  return (
    <div className="app-navigation fixed bottom-0 left-0 right-0 z-20 bg-gray-900 border-t border-gray-800">
      <div className="flex items-center justify-around px-4 py-3">
        <NavItem 
          icon={<Home className="w-5 h-5" />} 
          label="Home" 
          isActive={isActive("/")}
          href="/"
        />
        
        <NavItem 
          icon={<Search className="w-5 h-5" />} 
          label="Discover" 
          isActive={isActive("/discover")}
          href="/discover"
        />

        <NavItem 
          icon={<GraduationCap className="w-5 h-5" />} 
          label="Learn" 
          isActive={isActive("/learn")}
          href="/learn"
        />
        
        <NavItem 
          icon={<Briefcase className="w-5 h-5" />} 
          label="Portfolio" 
          isActive={isActive("/portfolio")}
          href="/portfolio"
        />
        
        <NavItem 
          icon={<User className="w-5 h-5" />} 
          label="Profile" 
          isActive={isActive("/profile")}
          href="/profile"
        />
      </div>
    </div>
  );
}

interface NavItemProps {
  icon: React.ReactNode;
  label: string;
  isActive: boolean;
  href: string;
}

function NavItem({ icon, label, isActive, href }: NavItemProps) {
  const [_, setLocation] = useLocation();
  
  const handleClick = () => {
    setLocation(href);
  };
  
  return (
    <button 
      className="flex flex-col items-center justify-center"
      onClick={handleClick}
    >
      <div className={`${isActive ? 'text-cyan-400' : 'text-gray-500'}`}>
        {icon}
      </div>
      <span className={`text-xs mt-1 ${isActive ? 'text-cyan-400' : 'text-gray-500'}`}>
        {label}
      </span>
    </button>
  );
}

================
File: client/src/components/board-room-game.tsx
================
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card } from './ui/card';
import { useGameState } from '@/hooks/use-game-state';
import { GameHeader, GameButton, GameProgress, GameOver } from './ui/game-elements';
import { Building2 } from 'lucide-react';
import { BOARD_ROOM_DECISIONS, type Decision } from '@/constants/board-room-data';

export function BoardRoomGame() {
  const { gameState, updateScore, addTickets, resetGame } = useGameState();
  const [currentDecision, setCurrentDecision] = useState(0);
  const [gameStarted, setGameStarted] = useState(false);
  const [gameOver, setGameOver] = useState(false);
  const [decisions, setDecisions] = useState<Decision[]>([]);
  const [companyMetrics, setCompanyMetrics] = useState({
    marketShare: 100,
    profitMargin: 100,
    brandValue: 100,
    revenueGrowth: 100
  });

  useEffect(() => {
    if (gameStarted && !gameOver) {
      // Shuffle decisions and select a subset
      const shuffledDecisions = [...BOARD_ROOM_DECISIONS]
        .sort(() => Math.random() - 0.5)
        .slice(0, 3); // Show 3 decisions per game
      setDecisions(shuffledDecisions);
      setCurrentDecision(0);
    }
  }, [gameStarted, gameOver]);

  const handleDecision = (isOptionA: boolean) => {
    const decision = decisions[currentDecision];
    const impacts = isOptionA ? decision.optionA.impacts : decision.optionB.impacts;
    
    // Update company metrics based on decision
    const newMetrics = { ...companyMetrics };
    impacts.forEach(impact => {
      const metricKey = impact.metric.toLowerCase().replace(' ', '') as keyof typeof companyMetrics;
      if (newMetrics[metricKey]) {
        newMetrics[metricKey] += impact.value;
      }
    });
    setCompanyMetrics(newMetrics);

    // Award tickets based on overall performance
    const avgMetric = Object.values(newMetrics).reduce((a, b) => a + b, 0) / Object.values(newMetrics).length;
    if (avgMetric > 110) {
      addTickets(1);
    }

    if (currentDecision < decisions.length - 1) {
      setCurrentDecision(currentDecision + 1);
    } else {
      setGameOver(true);
    }
  };

  const handleReset = () => {
    setCurrentDecision(0);
    setGameStarted(false);
    setGameOver(false);
    setDecisions([]);
    setCompanyMetrics({
      marketShare: 100,
      profitMargin: 100,
      brandValue: 100,
      revenueGrowth: 100
    });
    resetGame();
  };

  return (
    <motion.div 
      className="container mx-auto px-4 py-8"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <GameHeader 
        title="Board Room Decisions" 
        level={gameState.level}
        xp={gameState.xp}
      />

      <AnimatePresence mode="wait">
        {!gameStarted && !gameOver && (
          <motion.div
            key="start"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
          >
            <Card className="mb-6">
              <motion.div 
                className="p-6 text-center"
                initial={{ scale: 0.95 }}
                animate={{ scale: 1 }}
                transition={{ delay: 0.2 }}
              >
                <motion.div
                  initial={{ y: -10, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  transition={{ delay: 0.4 }}
                >
                  <Building2 className="w-12 h-12 mx-auto mb-4 text-blue-600" />
                </motion.div>
                <motion.h2 
                  className="text-2xl font-bold mb-4"
                  initial={{ y: 10, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  transition={{ delay: 0.6 }}
                >
                  Welcome to the Board Room
                </motion.h2>
                <motion.p 
                  className="text-gray-600 mb-6"
                  initial={{ y: 10, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  transition={{ delay: 0.8 }}
                >
                  Make strategic decisions that will impact your company's future.
                </motion.p>
                <motion.div
                  initial={{ y: 10, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  transition={{ delay: 1 }}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <GameButton onClick={() => setGameStarted(true)}>
                    Start Making Decisions
                  </GameButton>
                </motion.div>
              </motion.div>
            </Card>
          </motion.div>
        )}

        {gameStarted && !gameOver && decisions[currentDecision] && (
          <motion.div
            key="game"
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -50 }}
            transition={{ duration: 0.3 }}
          >
            <Card className="mb-6">
              <motion.div 
                className="p-6"
                initial={{ y: 20, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ delay: 0.2 }}
              >
                <motion.h3 
                  className="text-xl font-bold mb-4"
                  layoutId="decision-title"
                >
                  {decisions[currentDecision].title}
                </motion.h3>
                <motion.p 
                  className="text-gray-600 mb-6"
                  layoutId="decision-description"
                >
                  {decisions[currentDecision].description}
                </motion.p>
                <motion.div className="space-y-4">
                  {decisions[currentDecision].options.map((option, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: 0.3 + index * 0.1 }}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <GameButton
                        onClick={() => handleDecision(option.effects)}
                        variant={option.type === 'positive' ? 'good' : option.type === 'negative' ? 'bad' : 'default'}
                      >
                        {option.text}
                      </GameButton>
                    </motion.div>
                  ))}
                </motion.div>
              </motion.div>
            </Card>
            <GameProgress current={currentDecision + 1} total={decisions.length} />
          </motion.div>
        )}

        {gameOver && (
          <motion.div
            key="end"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 1.1 }}
            transition={{ duration: 0.4 }}
          >
            <GameOver
              score={gameState.score}
              tickets={gameState.tickets}
              onPlayAgain={resetGame}
            />
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
}

================
File: client/src/components/category-chips.tsx
================
import { useState } from "react";
import { motion } from "framer-motion";
import { TrendingUp, LineChart, DollarSign, BarChartHorizontal, Building } from "lucide-react";

interface CategoryChipsProps {
  onCategoryChange?: (category: string) => void;
}

// Define category icons lookup object
const categoryIcons = {
  "Trending": <TrendingUp className="w-3.5 h-3.5" />,
  "Stocks": <LineChart className="w-3.5 h-3.5" />,
  "Crypto": <DollarSign className="w-3.5 h-3.5" />,
  "ETFs": <BarChartHorizontal className="w-3.5 h-3.5" />,
  "Alternatives": <Building className="w-3.5 h-3.5" />
};

export default function CategoryChips({ onCategoryChange }: CategoryChipsProps) {
  const [activeCategory, setActiveCategory] = useState("Trending");
  
  const categories = ["Trending", "Stocks", "Crypto", "ETFs", "Alternatives"];
  
  const handleCategoryClick = (category: string) => {
    setActiveCategory(category);
    if (onCategoryChange) {
      onCategoryChange(category);
    }
  };
  
  return (
    <div className="relative pb-1">
      <div className="flex overflow-x-auto py-4 space-x-3 no-scrollbar">
        {categories.map(category => (
          <motion.button
            key={category}
            className={`relative flex items-center space-x-1.5 whitespace-nowrap rounded-full px-4 py-2 text-sm transition-all duration-150
              ${activeCategory === category 
                ? 'text-white shadow-md bg-blue-500' 
                : 'bg-white text-slate-600 border border-slate-200 hover:bg-slate-50'}`}
            onClick={() => handleCategoryClick(category)}
            whileTap={{ scale: 0.95 }}
          >
            {/* Background pill that animates */}
            {activeCategory === category && (
              <motion.div 
                className="absolute inset-0 rounded-full bg-gradient-to-r from-blue-500 to-indigo-500 -z-10"
                layoutId="categoryBackground"
                initial={false}
                transition={{ type: "spring", duration: 0.5 }}
              />
            )}
            
            {/* Icon */}
            <span className={`${activeCategory === category ? 'text-white' : 'text-slate-500'}`}>
              {categoryIcons[category as keyof typeof categoryIcons]}
            </span>
            
            {/* Category name */}
            <span>{category}</span>
          </motion.button>
        ))}
      </div>
      
      {/* Decorative indicator at the bottom */}
      <div className="absolute -bottom-1 left-0 right-0 h-[1px] bg-gradient-to-r from-transparent via-slate-200 to-transparent opacity-70" />
    </div>
  );
}

================
File: client/src/components/competition-tracker.tsx
================
import { useState, useEffect, useContext } from 'react';
import { motion } from 'framer-motion';
import { Users, ChevronRight } from 'lucide-react';
import { PortfolioContext } from '@/contexts/portfolio-context';

// Define the investor type
interface Investor {
  id: number;
  name: string;
  avatar: string;
  returns: number;
  isUser?: boolean;
  gain?: string;
}

// Sample leaderboard data - in a real app this would come from API
const baseLeaderboardData: Investor[] = [
  { id: 1, name: 'Investor27', avatar: '👨‍💼', returns: 15.7 },
  { id: 2, name: 'TradingPro', avatar: '👩‍💼', returns: 12.3 },
  { id: 3, name: 'WealthMaster', avatar: '🧔', returns: 8.9 },
  { id: 4, name: 'StockExpert', avatar: '👱‍♀️', returns: 6.5 },
  { id: 6, name: 'MarketGuru', avatar: '👨‍🦰', returns: 2.4 },
  { id: 7, name: 'InvestorX', avatar: '👴', returns: 1.2 },
  { id: 8, name: 'TradeQueen', avatar: '👩‍🦱', returns: -1.8 },
  { id: 9, name: 'ValueHunter', avatar: '👨‍🦱', returns: -3.5 },
  { id: 10, name: 'NewTrader', avatar: '🧑', returns: -5.2 },
];

export default function CompetitionTracker() {
  const portfolio = useContext(PortfolioContext);
  const [expanded, setExpanded] = useState(false);
  const [userRank, setUserRank] = useState(10); // Start at rank 10 (bottom)
  const [userReturns, setUserReturns] = useState(0);
  const [leaderboardData, setLeaderboardData] = useState(baseLeaderboardData);
  const [_, forceUpdate] = useState({});
  
  // Force update when portfolio changes
  useEffect(() => {
    if (portfolio) {
      // Schedule a re-render after portfolio updates with small delay for state propagation
      const timer = setTimeout(() => {
        forceUpdate({ timestamp: Date.now() });
        console.log("Portfolio updated in CompetitionTracker:", {
          holdings: portfolio.holdings.length,
          version: portfolio.version,
          lastUpdated: new Date(portfolio.lastUpdated).toISOString()
        });
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [
    portfolio, 
    portfolio?.holdings.length, 
    portfolio?.cash, 
    portfolio?.portfolioValue,
    portfolio?.version,
    portfolio?.lastUpdated
  ]);
  
  // Calculate projected 1-year return and update leaderboard position
  useEffect(() => {
    if (portfolio && portfolio.holdings.length > 0) {
      // Calculate projected 1-year returns
      const totalInvested = portfolio.holdings.reduce((total, h) => total + (h.shares * h.purchasePrice), 0);
      
      if (totalInvested > 0) {
        const oneYearReturns = portfolio.holdings.reduce((total, h) => {
          // Parse the oneYearReturn string (remove % sign and convert to number)
          const oneYearReturnPercent = 
            typeof h.stock.oneYearReturn === 'number' ? h.stock.oneYearReturn :
            typeof h.stock.oneYearReturn === 'string' ? parseFloat(h.stock.oneYearReturn.replace('%', '')) : 
            0;
            
          const stockValue = h.shares * h.purchasePrice;
          const stockReturn = stockValue * (oneYearReturnPercent / 100);
          return total + stockReturn;
        }, 0);
        
        const projectedReturnPercent = (oneYearReturns / totalInvested) * 100;
        setUserReturns(projectedReturnPercent);
        
        // Create user data
        const userData = {
          id: 5,
          name: 'Belford&Co',
          avatar: '👨‍💼', // Use a professional emoji as avatar
          returns: projectedReturnPercent,
          isUser: true
        };
        
        // Insert user into leaderboard and sort
        const newLeaderboard = [...baseLeaderboardData];
        const userIndex = newLeaderboard.findIndex(item => item.id === 5);
        if (userIndex >= 0) {
          newLeaderboard[userIndex] = userData;
        } else {
          newLeaderboard.push(userData);
        }
        
        // Sort by returns
        newLeaderboard.sort((a, b) => b.returns - a.returns);
        setLeaderboardData(newLeaderboard);
        
        // Find user's rank
        const rank = newLeaderboard.findIndex(item => item.isUser) + 1;
        setUserRank(rank);
      }
    }
  }, [portfolio]);
  
  // Format the gain/loss values with dollar signs
  const formattedLeaderboardData = leaderboardData.map(item => ({
    ...item,
    gain: `${item.returns >= 0 ? '+' : ''}$${Math.abs(item.returns).toFixed(2)}`
  }));
  
  // Get top 3 and user's position
  const topThree = formattedLeaderboardData.slice(0, 3);
  const userPosition = formattedLeaderboardData.find(item => item.isUser) || 
    { id: 5, name: 'Belford&Co', avatar: '👨‍💼', returns: 0, gain: '$0.00', isUser: true };
  
  return (
    <motion.div 
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.3 }}
      className="competition-tracker mb-6"
    >
      <div className="bg-white rounded-xl overflow-hidden border border-slate-200 shadow-md">
        <div 
          onClick={() => setExpanded(!expanded)}
          className="flex items-center justify-between p-4 cursor-pointer"
        >
          <div className="flex items-center">
            <div className="h-8 w-8 rounded-full bg-indigo-500/20 flex items-center justify-center mr-3">
              <Users className="h-4 w-4 text-indigo-500" />
            </div>
            <div>
              <h3 className="text-slate-800 font-medium">Competition Standings</h3>
              <p className="text-xs text-slate-500">You're in position #{userRank}</p>
            </div>
          </div>
          <ChevronRight className={`h-5 w-5 text-slate-400 transition-transform duration-300 ${expanded ? 'rotate-90' : ''}`} />
        </div>
        
        {expanded && (
          <div className="px-4 pb-4">
            {/* Top 3 leaderboard */}
            <div className="mb-4">
              <div className="text-xs text-slate-500 mb-2">Top performers</div>
              <div className="space-y-2">
                {topThree.map((investor, index) => (
                  <motion.div 
                    key={investor.id}
                    initial={{ opacity: 0, x: -10 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                    className="flex items-center justify-between"
                  >
                    <div className="flex items-center">
                      <div className={`h-6 w-6 rounded-full flex items-center justify-center mr-2 text-xs font-bold text-white
                        ${index === 0 ? 'bg-yellow-500' : index === 1 ? 'bg-slate-400' : 'bg-amber-700'}`}>
                        {index + 1}
                      </div>
                      <div className="flex items-center">
                        <span className="mr-2">{investor.avatar}</span>
                        <span className="text-sm font-medium text-slate-700">{investor.name}</span>
                      </div>
                    </div>
                    <div className="text-sm font-semibold text-green-600">
                      {investor.gain}
                    </div>
                  </motion.div>
                ))}
              </div>
            </div>
            
            {/* User position with glass effect */}
            <div className="mb-2">
              <div className="text-xs text-slate-500 mb-2">Your position</div>
              <motion.div 
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.5 }}
                className="glass-effect p-3 rounded-lg flex items-center justify-between"
              >
                <div className="flex items-center">
                  <div className="h-7 w-7 rounded-full bg-blue-100 flex items-center justify-center mr-2 text-sm font-bold text-blue-800">
                    {userRank}
                  </div>
                  <div className="flex items-center">
                    <span className="mr-2">{userPosition.avatar}</span>
                    <span className="text-sm font-medium text-slate-700">{userPosition.name}</span>
                    <span className="ml-2 text-xs text-blue-500 bg-blue-50 px-1.5 py-0.5 rounded-full">You</span>
                  </div>
                </div>
                <div className={`text-sm font-semibold ${userPosition.returns > 0 ? 'text-green-600' : 'text-red-600'}`}>
                  {userPosition.gain}
                </div>
              </motion.div>
            </div>
            
            {/* Positions to beat */}
            <div className="mt-3">
              <div className="text-xs text-slate-500 mb-2">Positions to beat</div>
              <div className="space-y-2">
                {leaderboardData
                  .filter((_, index) => index === userRank - 2)
                  .map((investor) => (
                    <motion.div 
                      key={investor.id}
                      initial={{ opacity: 0, y: 5 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3 }}
                      className="flex items-center justify-between p-2 bg-slate-50 rounded-lg border border-slate-100"
                    >
                      <div className="flex items-center">
                        <div className="h-6 w-6 rounded-full flex items-center justify-center mr-2 text-xs font-bold text-white bg-indigo-400">
                          {userRank - 1}
                        </div>
                        <div className="flex items-center">
                          <span className="mr-2">{investor.avatar}</span>
                          <span className="text-sm font-medium text-slate-700">{investor.name}</span>
                        </div>
                      </div>
                      <div className={`text-sm font-semibold ${investor.returns > 0 ? 'text-green-600' : 'text-red-600'}`}>
                        {investor.gain}
                      </div>
                    </motion.div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </motion.div>
  );
}

================
File: client/src/components/current-lesson.tsx
================
import { useLocation } from "wouter";
import { Stack, UserProgress } from "@shared/schema";
import { PlayCircle } from "lucide-react";
import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";

interface CurrentLessonProps {
  stack: Stack;
  progress?: UserProgress | null;
}

export default function CurrentLesson({ stack, progress }: CurrentLessonProps) {
  const [_, setLocation] = useLocation();
  
  const progressPercentage = progress 
    ? (progress.currentCardIndex / stack.cardCount) * 100 
    : 0;
  
  const handleContinueLearning = () => {
    setLocation(`/lesson/${stack.id}`);
  };
  
  return (
    <div className="mt-8">
      <div className="flex justify-between items-center mb-4">
        <h2 className="font-poppins font-semibold text-xl text-gray-800">Continue Learning</h2>
        <a href="#" className="text-primary-500 text-sm font-medium">See all</a>
      </div>
      
      <div className="bg-white rounded-xl shadow-md overflow-hidden">
        <div className={`relative h-32 bg-gradient-to-r ${stack.color} flex items-end p-4`}>
          <div className="absolute right-4 top-4 bg-white bg-opacity-20 rounded-lg px-2 py-1">
            <span className="text-white text-xs font-medium">
              {stack.estimatedMinutes} min{progressPercentage > 0 ? ' left' : ''}
            </span>
          </div>
          <div className="z-10">
            <h3 className="text-white font-medium text-lg">{stack.title}</h3>
            <p className="text-primary-100 text-sm">{stack.description}</p>
          </div>
          <div className="absolute right-6 bottom-6">
            <i className={`ri-${stack.iconName} text-white text-4xl opacity-25`}></i>
          </div>
        </div>
        <div className="p-4">
          <div className="flex justify-between items-center mb-2">
            <div className="flex items-center">
              <span className="text-sm font-medium text-gray-800">Progress</span>
              <span className="ml-2 text-xs font-medium text-gray-500">
                {progress ? progress.currentCardIndex : 0}/{stack.cardCount} cards
              </span>
            </div>
            <span className="text-sm font-medium text-primary-500">
              {progressPercentage.toFixed(0)}%
            </span>
          </div>
          <Progress value={progressPercentage} className="h-1" />
          <Button 
            className="mt-4 w-full gap-2"
            onClick={handleContinueLearning}
          >
            <PlayCircle className="h-4 w-4" />
            Continue Learning
          </Button>
        </div>
      </div>
    </div>
  );
}

================
File: client/src/components/daily-goal.tsx
================
import { CalendarClock } from "lucide-react";
import { Progress } from "./ui/progress";
import { Skeleton } from "./ui/skeleton";

interface DailyGoalProps {
  dailyGoal: number;
  completed: number;
  isLoading?: boolean;
}

export default function DailyGoal({ dailyGoal, completed, isLoading = false }: DailyGoalProps) {
  const progress = Math.min(Math.round((completed / dailyGoal) * 100), 100);
  
  if (isLoading) {
    return (
      <div className="daily-goal bg-[#242438] rounded-xl p-4 mb-6">
        <div className="flex items-center justify-between mb-3">
          <Skeleton className="h-5 w-24" />
          <Skeleton className="h-8 w-8 rounded-full" />
        </div>
        <Skeleton className="h-3 w-full mb-2" />
        <Skeleton className="h-4 w-16" />
      </div>
    );
  }
  
  return (
    <div className="daily-goal bg-[#242438] rounded-xl p-4 mb-6">
      <div className="flex items-center justify-between mb-3">
        <h3 className="text-white font-medium">Daily Goal</h3>
        <div className="h-8 w-8 rounded-full bg-cyan-500/20 flex items-center justify-center">
          <CalendarClock className="h-4 w-4 text-cyan-500" />
        </div>
      </div>
      
      <Progress 
        value={progress} 
        className="h-2 mb-2" 
      />
      
      <p className="text-gray-400 text-sm">
        {completed}/{dailyGoal} lessons completed
      </p>
    </div>
  );
}

================
File: client/src/components/hero-section.tsx
================
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Trophy, Clock } from 'lucide-react';

export default function HeroSection() {
  const [timeRemaining, setTimeRemaining] = useState({
    days: 0,
    hours: 0,
    minutes: 0,
    seconds: 0
  });

  // Set competition end date (2 weeks from today)
  useEffect(() => {
    const endDate = new Date();
    endDate.setDate(endDate.getDate() + 14); // 2 weeks from now
    
    const updateTimer = () => {
      const now = new Date();
      const difference = endDate.getTime() - now.getTime();
      
      if (difference <= 0) {
        // Competition ended
        setTimeRemaining({ days: 0, hours: 0, minutes: 0, seconds: 0 });
        return;
      }
      
      const days = Math.floor(difference / (1000 * 60 * 60 * 24));
      const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((difference % (1000 * 60)) / 1000);
      
      setTimeRemaining({ days, hours, minutes, seconds });
    };
    
    updateTimer();
    const timerId = setInterval(updateTimer, 1000);
    
    return () => clearInterval(timerId);
  }, []);

  const timerVariants = {
    pulse: {
      scale: [1, 1.03, 1],
      transition: {
        duration: 2,
        repeat: Infinity,
        repeatType: "loop" as const
      }
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6 }}
      className="hero-section mb-6 rounded-xl overflow-hidden"
    >
      <div className="bg-gradient-to-r from-blue-600 to-violet-600 p-4 relative">
        {/* Background pattern */}
        <div className="absolute inset-0 overflow-hidden opacity-10">
          {Array.from({ length: 20 }).map((_, i) => (
            <div 
              key={i}
              className="absolute bg-white/30 rounded-full"
              style={{
                width: `${Math.random() * 30 + 10}px`,
                height: `${Math.random() * 30 + 10}px`,
                top: `${Math.random() * 100}%`,
                left: `${Math.random() * 100}%`,
                opacity: Math.random() * 0.5 + 0.3,
                transform: `scale(${Math.random() * 0.8 + 0.5})`,
                animation: `float ${Math.random() * 10 + 10}s infinite ease-in-out ${Math.random() * 5}s`,
              }}
            />
          ))}
        </div>
        
        <div className="relative z-10">
          <div className="flex items-center justify-between text-white mb-1">
            <div className="flex items-center">
              <Trophy className="h-5 w-5 mr-2 text-yellow-300" />
              <span className="text-sm font-medium text-yellow-300">Competition</span>
            </div>
            <motion.div 
              variants={timerVariants}
              animate="pulse"
              className="flex items-center bg-white/20 rounded-full px-2 py-1 backdrop-blur-sm"
            >
              <Clock className="h-3 w-3 mr-1" />
              <span className="text-xs font-medium">
                {timeRemaining.days}d {timeRemaining.hours}h {timeRemaining.minutes}m
              </span>
            </motion.div>
          </div>
          
          <h2 className="text-xl md:text-2xl font-bold text-white text-shadow mb-2">
            Invest $100 - Climb the Leaderboard
          </h2>
          
          <div className="flex items-center space-x-2">
            <div className="bg-white/20 text-white text-xs font-medium rounded-full px-2 py-1 backdrop-blur-sm">
              10 competitors
            </div>
            <div className="bg-white/20 text-white text-xs font-medium rounded-full px-2 py-1 backdrop-blur-sm">
              Real market data
            </div>
          </div>
        </div>
      </div>
    </motion.div>
  );
}

================
File: client/src/components/investment-panel.tsx
================
import { useContext, useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Wallet, TrendingUp, DollarSign, Calendar } from 'lucide-react';
import { Progress } from './ui/progress';
import { PortfolioContext } from '@/contexts/portfolio-context';

export default function InvestmentPanel() {
  // Force component to update on any portfolio change
  const [_, forceUpdate] = useState({});
  const portfolio = useContext(PortfolioContext);
  
  // Update component whenever portfolio changes
  useEffect(() => {
    if (portfolio) {
      // Force re-render when portfolio updates with small delay for state propagation
      const timer = setTimeout(() => {
        forceUpdate({ timestamp: Date.now() });
        console.log("Portfolio updated in InvestmentPanel:", {
          holdings: portfolio.holdings.length,
          cash: portfolio.cash,
          value: portfolio.portfolioValue,
          version: portfolio.version,
          lastUpdated: new Date(portfolio.lastUpdated).toISOString()
        });
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [
    portfolio, 
    portfolio?.holdings.length, 
    portfolio?.cash, 
    portfolio?.portfolioValue,
    portfolio?.version,
    portfolio?.lastUpdated
  ]);
  
  if (!portfolio) {
    return (
      <div className="investment-panel rounded-xl bg-white border border-slate-200 shadow-md animate-pulse p-4 mb-6">
        <div className="h-6 bg-slate-200 rounded w-1/2 mb-3"></div>
        <div className="h-4 bg-slate-200 rounded w-full mb-4"></div>
        <div className="h-3 bg-slate-200 rounded-full w-full mb-3"></div>
        <div className="flex justify-between">
          <div className="h-4 bg-slate-200 rounded w-1/4"></div>
          <div className="h-4 bg-slate-200 rounded w-1/4"></div>
        </div>
      </div>
    );
  }
  
  const { cash, portfolioValue, totalValue, holdings } = portfolio;
  const allocationPercentage = Math.round((portfolioValue / totalValue) * 100);
  
  // Calculate projected 1-year return based on holdings
  let projectedReturn = 0;
  let projectedPercent = 0;

  if (holdings.length > 0) {
    const totalInvested = holdings.reduce((total, h) => total + (h.shares * h.purchasePrice), 0);
    const oneYearReturns = holdings.reduce((total, h) => {
      // Convert to number or use 0 if undefined
      const oneYearReturnPercent = typeof h.stock.oneYearReturn === 'number' ? h.stock.oneYearReturn : 0;
      const stockValue = h.shares * h.purchasePrice;
      const stockReturn = stockValue * (oneYearReturnPercent / 100);
      return total + stockReturn;
    }, 0);
    
    projectedReturn = oneYearReturns;
    projectedPercent = totalInvested > 0 ? (oneYearReturns / totalInvested) * 100 : 0;
  }
  
  return (
    <motion.div 
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.2 }}
      className="investment-panel rounded-xl p-4 mb-6 border border-slate-200 shadow-md bg-gradient-to-br from-white to-slate-50"
    >
      <div className="flex items-center justify-between mb-2">
        <h3 className="flex items-center text-slate-800 font-semibold">
          <Wallet className="w-4 h-4 mr-1.5 text-blue-500" />
          Your Portfolio
        </h3>
        <div className="flex items-center text-sm text-slate-500">
          <TrendingUp className={`w-3.5 h-3.5 mr-1 ${portfolioValue > 0 ? 'text-green-500' : 'text-red-500'}`} />
          <span>Updated now</span>
        </div>
      </div>
      
      <div className="p-3 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg mb-3">
        <div className="flex items-baseline mb-1">
          <DollarSign className="w-4 h-4 text-blue-500" />
          <span className="text-xl font-bold text-slate-800">{totalValue.toFixed(2)}</span>
          <span className="ml-1 text-xs text-slate-500">total value</span>
        </div>
        {holdings.length > 0 && (
          <div className="flex items-center text-sm">
            <Calendar className="w-3 h-3 mr-1 text-blue-500" />
            <span className="text-xs text-slate-600">Projected 1-year return: </span>
            <span className={`ml-1 text-xs font-medium ${projectedReturn >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              {projectedReturn >= 0 ? '+' : ''}{projectedReturn.toFixed(2)} ({projectedReturn >= 0 ? '+' : ''}{projectedPercent.toFixed(1)}%)
            </span>
          </div>
        )}
      </div>
      
      <div className="mb-1 flex justify-between items-center">
        <span className="text-sm text-slate-600 font-medium">Portfolio allocation</span>
        <span className="text-sm font-medium text-slate-700">{allocationPercentage}%</span>
      </div>
      
      <Progress 
        value={allocationPercentage} 
        className="h-2 mb-3"
      />
      
      <div className="flex justify-between text-sm">
        <div className="flex flex-col items-start">
          <span className="text-xs text-slate-500">Invested</span>
          <span className="font-semibold text-slate-700">${portfolioValue.toFixed(2)}</span>
        </div>
        <div className="flex flex-col items-end">
          <span className="text-xs text-slate-500">Available</span>
          <span className="font-semibold text-emerald-600">${cash.toFixed(2)}</span>
        </div>
      </div>
    </motion.div>
  );
}

================
File: client/src/components/lesson-card.tsx
================
import { useState } from "react";
import { Card } from "@shared/schema";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { ArrowRight } from "lucide-react";

interface LessonCardProps {
  card: Card;
  onNextCard: () => void;
}

export default function LessonCard({ card, onNextCard }: LessonCardProps) {
  // Content for the card would be stored in card.content
  const content = card.content as { 
    title?: string;
    description?: string;
    imageUrl?: string;
    bulletPoints?: string[];
    funFact?: string;
  };

  return (
    <motion.div
      className="bg-white rounded-xl shadow-lg p-6 max-w-md w-full mx-auto"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div className="mb-4">
        <h2 className="text-xl font-bold text-gray-800">{card.title}</h2>
        {card.subtitle && (
          <p className="text-gray-600 mt-1">{card.subtitle}</p>
        )}
      </div>
      
      <div className="space-y-4 mb-6">
        {content.description && (
          <p className="text-gray-700">{content.description}</p>
        )}
        
        {content.imageUrl && (
          <div className="rounded-lg overflow-hidden">
            <img 
              src={content.imageUrl} 
              alt={card.title} 
              className="w-full h-auto object-cover"
            />
          </div>
        )}
        
        {content.bulletPoints && content.bulletPoints.length > 0 && (
          <ul className="list-disc pl-5 space-y-2">
            {content.bulletPoints.map((point, index) => (
              <li key={index} className="text-gray-700">{point}</li>
            ))}
          </ul>
        )}
        
        {content.funFact && (
          <div className="bg-blue-50 border-l-4 border-blue-500 p-4 rounded">
            <p className="text-blue-700 font-medium">Fun Fact</p>
            <p className="text-blue-800">{content.funFact}</p>
          </div>
        )}
      </div>
      
      <div className="flex justify-end">
        <Button 
          onClick={onNextCard}
          className="flex items-center gap-2"
        >
          Continue <ArrowRight className="h-4 w-4" />
        </Button>
      </div>
    </motion.div>
  );
}

================
File: client/src/components/modern-user-welcome.tsx
================
import { useState, useEffect, useContext } from 'react';
import { motion } from 'framer-motion';
import { ChevronUp, Award } from 'lucide-react';
import { PortfolioContext } from '@/contexts/portfolio-context';
import belfordAvatar from '../assets/belford-avatar.png';

interface ModernUserWelcomeProps {
  name: string;
  rank?: number;
}

export default function ModernUserWelcome({ name, rank: initialRank = 10 }: ModernUserWelcomeProps) {
  const [animateRank, setAnimateRank] = useState(false);
  const [rank, setRank] = useState(initialRank);
  const portfolio = useContext(PortfolioContext);
  const [prevRank, setPrevRank] = useState(initialRank);
  const [_, forceUpdate] = useState({});
  
  // Force update when portfolio changes
  useEffect(() => {
    if (portfolio) {
      // Schedule a re-render after portfolio updates with small delay for state propagation
      const timer = setTimeout(() => {
        forceUpdate({ timestamp: Date.now() });
        console.log("Portfolio updated in ModernUserWelcome:", {
          holdings: portfolio.holdings.length,
          version: portfolio.version,
          lastUpdated: new Date(portfolio.lastUpdated).toISOString()
        });
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [
    portfolio, 
    portfolio?.holdings.length, 
    portfolio?.cash, 
    portfolio?.portfolioValue,
    portfolio?.version,
    portfolio?.lastUpdated
  ]);
  
  // Update rank based on portfolio performance
  useEffect(() => {
    if (portfolio && portfolio.holdings.length > 0) {
      // Calculate projected 1-year returns
      const totalInvested = portfolio.holdings.reduce((total, h) => total + (h.shares * h.purchasePrice), 0);
      
      if (totalInvested > 0) {
        const oneYearReturns = portfolio.holdings.reduce((total, h) => {
          // Parse the oneYearReturn string (remove % sign and convert to number)
          const oneYearReturnPercent = 
            typeof h.stock.oneYearReturn === 'number' ? h.stock.oneYearReturn :
            typeof h.stock.oneYearReturn === 'string' ? parseFloat(h.stock.oneYearReturn.replace('%', '')) : 
            0;
            
          const stockValue = h.shares * h.purchasePrice;
          const stockReturn = stockValue * (oneYearReturnPercent / 100);
          return total + stockReturn;
        }, 0);
        
        const projectedReturnPercent = (oneYearReturns / totalInvested) * 100;
        
        // Calculate rank based on return percent
        // Start at rank 10 (lowest) and improve as returns increase
        let newRank = 10;
        if (projectedReturnPercent > 0) newRank = 9;
        if (projectedReturnPercent > 2) newRank = 8;
        if (projectedReturnPercent > 4) newRank = 7;
        if (projectedReturnPercent > 6) newRank = 6;
        if (projectedReturnPercent > 8) newRank = 5;
        if (projectedReturnPercent > 10) newRank = 4;
        if (projectedReturnPercent > 12) newRank = 3;
        if (projectedReturnPercent > 14) newRank = 2;
        if (projectedReturnPercent > 16) newRank = 1;
        
        // Check if rank improved
        if (newRank < prevRank) {
          setPrevRank(rank);
          setRank(newRank);
          setAnimateRank(true);
        }
      }
    }
  }, [portfolio, prevRank, rank]);
  
  return (
    <div className="welcome-section mb-6">
      <div className="flex items-center space-x-4">
        <motion.div 
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.5, type: 'spring' }}
          className="relative"
        >
          {/* Avatar with glow effect - simplified */}
          <div className="avatar-container relative">
            {/* Glow effect */}
            <div className="absolute inset-0 rounded-full bg-gradient-to-r from-blue-400 to-violet-400 opacity-70 blur-md" />
            
            {/* Avatar container */}
            <div className="relative w-14 h-14 rounded-full overflow-hidden border-2 border-white shadow-lg">
              {/* Businessman avatar image */}
              <img 
                src={belfordAvatar} 
                alt="Belford avatar" 
                className="w-full h-full object-cover"
              />
            </div>
          </div>
        </motion.div>
        
        <div>
          <h1 className="text-2xl font-bold text-slate-800 mb-0 flex items-center">
            <span className="font-serif mr-1">Belford&Co</span>
            <motion.div 
              initial={{ opacity: 0.7, y: 0 }}
              animate={{ 
                opacity: animateRank ? 1 : 0.7, 
                y: animateRank ? [0, -20, 0] : 0,
                scale: animateRank ? [1, 1.2, 1] : 1
              }}
              transition={{ duration: 0.5 }}
              className="inline-flex items-center ml-2 bg-amber-100 text-amber-800 text-xs rounded-full px-2 py-0.5"
            >
              <Award className="w-3 h-3 mr-0.5" />
              <span className="font-medium">Rank {rank}</span>
              {animateRank && (
                <ChevronUp className="w-3 h-3 ml-0.5 text-green-600" />
              )}
            </motion.div>
          </h1>
          <p className="text-sm text-slate-500">
            Continue building your investment portfolio
          </p>
        </div>
      </div>
    </div>
  );
}

================
File: client/src/components/overall-analysis-card.tsx
================
import React from "react";
import { ChartBar, Lightbulb, LineChart, TrendingUp } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { cn } from "@/lib/utils";

interface OverallAnalysisCardProps {
  ticker: string;
  name: string;
  rating: number;
  analysis: string;
}

export default function OverallAnalysisCard({ ticker, name, rating, analysis }: OverallAnalysisCardProps) {
  // Calculate rating color and style based on the numeric rating (1-10)
  const getRatingColor = (rating: number) => {
    if (rating >= 8) return "text-green-600";
    if (rating >= 6) return "text-sky-600";
    if (rating >= 4) return "text-amber-600";
    return "text-red-600";
  };

  const getRatingBackground = (rating: number) => {
    if (rating >= 8) return "bg-green-50";
    if (rating >= 6) return "bg-sky-50";
    if (rating >= 4) return "bg-amber-50";
    return "bg-red-50";
  };

  const getRatingBorder = (rating: number) => {
    if (rating >= 8) return "border-green-200";
    if (rating >= 6) return "border-sky-200";
    if (rating >= 4) return "border-amber-200";
    return "border-red-200";
  };

  const getRatingGradient = (rating: number) => {
    if (rating >= 8) return "from-green-50 to-white";
    if (rating >= 6) return "from-sky-50 to-white";
    if (rating >= 4) return "from-amber-50 to-white";
    return "from-red-50 to-white";
  };

  const getRatingText = (rating: number) => {
    if (rating >= 8) return "Strong";
    if (rating >= 6) return "Good";
    if (rating >= 4) return "Fair";
    return "Weak";
  };

  // Get appropriate icon based on rating
  const RatingIcon = () => {
    if (rating >= 8) return <TrendingUp className={cn("w-5 h-5", getRatingColor(rating))} />;
    if (rating >= 6) return <ChartBar className={cn("w-5 h-5", getRatingColor(rating))} />;
    if (rating >= 4) return <LineChart className={cn("w-5 h-5", getRatingColor(rating))} />;
    return <Lightbulb className={cn("w-5 h-5", getRatingColor(rating))} />;
  };

  return (
    <div className="relative">
      {/* Add shadow effect behind the card */}
      <div className="absolute inset-0 bg-gradient-to-br from-blue-200/30 to-indigo-200/30 rounded-xl blur-md transform scale-[0.98] translate-y-1"></div>
      
      <Card 
        className="border border-slate-200 bg-white rounded-xl overflow-hidden shadow-lg relative z-10"
      >
        <div className={`absolute top-0 left-0 right-0 h-1 ${
          rating >= 8 ? 'bg-gradient-to-r from-green-400 to-green-600' :
          rating >= 6 ? 'bg-gradient-to-r from-blue-400 to-blue-600' :
          rating >= 4 ? 'bg-gradient-to-r from-amber-400 to-amber-600' :
          'bg-gradient-to-r from-red-400 to-red-600'
        }`}></div>
        
        <CardHeader className="py-4 px-5 bg-gradient-to-b from-white to-slate-50">
          <div className="flex items-center justify-between">
            <CardTitle className="text-base font-semibold flex items-center gap-2">
              <div className="bg-gradient-to-br from-cyan-500 to-blue-600 text-white p-1.5 rounded-lg mr-1 shadow-sm">
                <LineChart className="w-5 h-5" />
              </div>
              <span className="bg-gradient-to-r from-slate-800 to-slate-600 bg-clip-text text-transparent">
                Analysis Overview
              </span>
            </CardTitle>
            
            <div className={cn(
              "text-sm px-3 py-1 rounded-full font-medium flex items-center gap-1.5 shadow-sm",
              "text-white",
              rating >= 8 ? 'bg-gradient-to-r from-green-500 to-green-600' :
              rating >= 6 ? 'bg-gradient-to-r from-blue-500 to-blue-600' :
              rating >= 4 ? 'bg-gradient-to-r from-amber-500 to-amber-600' :
              'bg-gradient-to-r from-red-500 to-red-600'
            )}>
              <RatingIcon />
              <span>{getRatingText(rating)} ({rating}/10)</span>
            </div>
          </div>
        </CardHeader>
        
        <CardContent className="pt-3 px-5 pb-5">
          <div className="space-y-4">          
            {/* Analysis paragraph - enhanced styling */}
            <div className="relative group transition-all duration-300">
              <div className="absolute inset-0 bg-gradient-to-r from-slate-100/30 to-gray-100/30 rounded-xl blur-sm transform scale-[0.98] translate-y-1 opacity-0 group-hover:opacity-100 transition-all duration-300"></div>
              <div className="bg-white p-4 rounded-xl border border-slate-200 shadow-md hover:shadow-lg transition-all duration-300 relative z-10 overflow-hidden group-hover:border-slate-300">
                <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-slate-200 to-slate-300 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                <div className="absolute -right-6 -top-6 w-24 h-24 bg-gradient-to-br from-slate-50 via-blue-50 to-transparent rounded-full opacity-70"></div>
                <p className="text-slate-700 text-sm leading-relaxed relative z-10">
                  {analysis}
                </p>
              </div>
            </div>
            
            {/* Key Insight box - enhanced Robinhood-style feature */}
            <div className="relative group transition-all duration-300">
              <div className="absolute inset-0 bg-gradient-to-r from-blue-100/30 to-cyan-100/30 rounded-xl blur-sm transform scale-[0.98] translate-y-1 opacity-0 group-hover:opacity-100 transition-all duration-300"></div>
              <div className="p-4 bg-white rounded-xl border border-blue-200 shadow-md hover:shadow-lg transition-all duration-300 relative z-10 overflow-hidden group-hover:border-blue-300">
                <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-400 to-cyan-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                <div className="flex gap-3 items-start">
                  <div className="text-white bg-gradient-to-br from-blue-400 to-blue-600 w-10 h-10 min-w-10 flex items-center justify-center rounded-lg shadow-md">
                    <Lightbulb className="w-5 h-5" />
                  </div>
                  <div className="flex-1">
                    <h4 className="font-semibold text-base text-slate-800 mb-1">Key Insight</h4>
                    <div className="text-sm text-slate-700 leading-relaxed font-medium">
                      {name} ({ticker}) is currently rated <span className={getRatingColor(rating)}>{getRatingText(rating).toLowerCase()}</span> based on financial metrics, market positioning, and growth projections. This stock fits best in a {
                        rating >= 8 ? 'growth-oriented portfolio.' :
                        rating >= 6 ? 'balanced investment strategy.' :
                        rating >= 4 ? 'value-focused portfolio with careful monitoring.' :
                        'speculative portion of a diversified portfolio.'
                      }
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: client/src/components/portfolio-dashboard.tsx
================
import React, { useMemo } from 'react'; // Removed useState, useEffect, useCallback, useRef
import { motion } from 'framer-motion';
import { ArrowUp, ArrowDown, Wallet, TrendingUp, Clock, DollarSign, PieChart } from 'lucide-react';
import { Progress } from './ui/progress'; // Assuming this path is correct
import { usePortfolio, PortfolioHolding } from '@/contexts/portfolio-context'; // Assuming this path is correct

// Helper component for metrics (Unchanged)
function MetricItem({ label, value, color }: { label: string; value: number; color: string }) {
  return (
    <div className="bg-slate-50 rounded-lg p-2 border border-slate-100">
      <p className="text-xs text-slate-500 mb-1">{label}</p>
      <div className="flex items-center">
        <div className={`h-2 w-2 rounded-full ${color} mr-2`}></div>
        <p className="font-bold text-base">{value}</p>
      </div>
      <Progress value={value} className="h-1 mt-1" />
    </div>
  );
}


export default function PortfolioDashboard() {
  // 1. Get LIVE data directly from the context
  const portfolio = usePortfolio();
  const {
    cash,
    holdings,
    portfolioMetrics,
    lastUpdated, // Use the context's lastUpdated
    // version // You might not need version directly here anymore
  } = portfolio;

  // 2. Calculate ALL derived values directly within the component body.
  // Use useMemo for potentially expensive calculations if needed, though often not necessary
  // unless profiling shows performance issues.

  const portfolioValue = useMemo(() => {
    console.log("Dashboard: Recalculating portfolioValue");
    return holdings.reduce((total, h) => total + (h.shares * h.stock.price), 0);
  }, [holdings]); // Recalculate only if holdings array reference changes

  const totalValue = useMemo(() => {
    console.log("Dashboard: Recalculating totalValue");
    return cash + portfolioValue;
  }, [cash, portfolioValue]); // Recalculate if cash or portfolioValue changes

  const totalReturn = useMemo(() => {
    console.log("Dashboard: Recalculating totalReturn");
    return holdings.reduce((total, h) => {
      const currentValue = h.shares * h.stock.price;
      const investedValue = h.shares * h.purchasePrice;
      // Add a check for valid numbers if necessary
      if (!isNaN(currentValue) && !isNaN(investedValue)) {
          return total + (currentValue - investedValue);
      }
      return total;
    }, 0);
  }, [holdings]); // Recalculate only if holdings array reference changes

  const totalInvested = useMemo(() => {
    console.log("Dashboard: Recalculating totalInvested");
    // Calculate the total amount initially invested
     return holdings.reduce((total, h) => total + (h.shares * h.purchasePrice), 0);
  }, [holdings]);

  const totalReturnPercent = useMemo(() => {
    console.log("Dashboard: Recalculating totalReturnPercent");
    // Base the percentage on the total amount invested for a clearer picture
    return totalInvested > 0.01 // Avoid division by zero or near-zero
      ? (totalReturn / totalInvested) * 100
      : 0;
  }, [totalReturn, totalInvested]);


  const projectedReturn = useMemo(() => {
    console.log("Dashboard: Recalculating projectedReturn");
    return holdings.reduce((total, h) => {
      // Parse the oneYearReturn string (remove % sign and convert to number)
      const oneYearReturnPercent = 
        typeof h.stock.oneYearReturn === 'number' ? h.stock.oneYearReturn :
        typeof h.stock.oneYearReturn === 'string' ? parseFloat(h.stock.oneYearReturn.replace('%', '')) : 
        0;
      
      // Base projection on current value or purchase price? Let's use purchase price as in original code
      const stockInvestedValue = h.shares * h.purchasePrice;
      const stockReturn = stockInvestedValue * (oneYearReturnPercent / 100);
      
      if (!isNaN(stockReturn)) {
        return total + stockReturn;
      }
      return total;
    }, 0);
  }, [holdings]); // Recalculate only if holdings array reference changes

  const projectedReturnPercent = useMemo(() => {
      console.log("Dashboard: Recalculating projectedReturnPercent");
      // Base percentage on current portfolio value
      return portfolioValue > 0.01 // Avoid division by zero or near-zero
          ? (projectedReturn / portfolioValue) * 100
          : 0;
  }, [projectedReturn, portfolioValue]);


  const allocationPercentage = useMemo(() => {
    console.log("Dashboard: Recalculating allocationPercentage");
    return Math.round((portfolioValue / Math.max(0.01, totalValue)) * 100);
  }, [portfolioValue, totalValue]); // Recalculate if these change

  // Get metrics directly
  const performanceMetric = portfolioMetrics.performance;
  const stabilityMetric = portfolioMetrics.stability;

  // Prepare sorted holdings for the "Top Holdings" section
  const sortedHoldings = useMemo(() => {
      console.log("Dashboard: Recalculating sortedHoldings");
      // Ensure holding.value is calculated correctly if not already present
      const holdingsWithValue = holdings.map(h => ({
        ...h,
        value: h.shares * h.stock.price // Calculate current value here
      }));
      return [...holdingsWithValue] // Create a new array reference for sorting
          .sort((a, b) => b.value - a.value)
          .slice(0, 2);
  }, [holdings]); // Recalculate only if holdings array reference changes


  // 3. Render using the direct context data and calculated values
  // Removed the `key={renderKey}` - not needed anymore.
  // React will re-render when the `portfolio` context value changes.

  console.log("PortfolioDashboard rendering. Total Value:", totalValue.toFixed(2), "Holdings Count:", holdings.length);


  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.2 }}
      className="portfolio-dashboard rounded-xl p-4 mb-6 border border-slate-200 shadow-md bg-white"
    >
      <div className="flex items-center justify-between mb-3">
        <h3 className="flex items-center text-slate-800 font-semibold">
          <Wallet className="w-4 h-4 mr-1.5 text-blue-500" />
          Your Portfolio
        </h3>
        <div className="flex items-center text-sm text-slate-500">
          <TrendingUp className={`w-3.5 h-3.5 mr-1 ${portfolioValue > 0 ? 'text-green-500' : 'text-slate-400'}`} />
          {/* Use lastUpdated from context */}
          <span>Updated {new Date(lastUpdated).toLocaleTimeString()}</span>
        </div>
      </div>

      {/* Portfolio Summary Card */}
      <div className="p-3 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg mb-3">
        <div className="flex items-baseline justify-between mb-1">
          <div>
            <DollarSign className="w-4 h-4 text-blue-500 inline mr-1" />
            {/* Use calculated totalValue */}
            <span className="text-xl font-bold text-slate-800">{totalValue.toFixed(2)}</span>
            <span className="ml-1 text-xs text-slate-500">total value</span>
          </div>

          {holdings.length > 0 && (
            <div className={`text-sm font-semibold flex items-center ${totalReturn >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              {totalReturn >= 0 ? (
                <ArrowUp className="h-3 w-3 mr-0.5" />
              ) : (
                <ArrowDown className="h-3 w-3 mr-0.5" />
              )}
              {/* Use calculated totalReturn and totalReturnPercent */}
              ${Math.abs(totalReturn).toFixed(2)} ({totalReturn >= 0 ? '+' : ''}{totalReturnPercent.toFixed(1)}%)
            </div>
          )}
        </div>

        {holdings.length > 0 && (
          <div className="flex items-center text-sm">
            <Clock className="w-3 h-3 mr-1 text-blue-500" />
            <span className="text-xs text-slate-600">Projected 1-year return: </span>
            {/* Use calculated projectedReturn and projectedReturnPercent */}
            <span className={`ml-1 text-xs font-medium ${projectedReturn >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              {projectedReturn >= 0 ? '+' : ''}{projectedReturn.toFixed(2)} ({projectedReturn >= 0 ? '+' : ''}{projectedReturnPercent.toFixed(1)}%)
            </span>
          </div>
        )}
      </div>

      {/* Portfolio Metrics */}
      {holdings.length > 0 && (
        <div className="grid grid-cols-2 gap-2 mb-3">
          {/* Use direct performanceMetric */}
          <MetricItem
            label="Performance"
            value={performanceMetric}
            color="bg-blue-500"
          />
          {/* Use direct stabilityMetric */}
          <MetricItem
            label="Stability"
            value={stabilityMetric}
            color="bg-purple-500"
          />
        </div>
      )}

      {/* Allocation */}
      <div className="mb-1 flex justify-between items-center">
        <span className="text-sm text-slate-600 font-medium">Portfolio allocation</span>
        {/* Use calculated allocationPercentage */}
        <span className="text-sm font-medium text-slate-700">{allocationPercentage}%</span>
      </div>

      {/* Use calculated allocationPercentage */}
      <Progress
        value={allocationPercentage}
        className="h-2 mb-3"
      />

      <div className="flex justify-between text-sm">
        <div className="flex flex-col items-start">
          <span className="text-xs text-slate-500">Invested</span>
           {/* Use calculated portfolioValue */}
          <span className="font-semibold text-slate-700">${portfolioValue.toFixed(2)}</span>
        </div>
        <div className="flex flex-col items-end">
          <span className="text-xs text-slate-500">Available</span>
           {/* Use direct cash from context */}
          <span className="font-semibold text-emerald-600">${cash.toFixed(2)}</span>
        </div>
      </div>

      {/* Top Holdings */}
      {/* Use the pre-calculated sortedHoldings */}
      {sortedHoldings.length > 0 && (
        <div className="mt-3 pt-3 border-t border-slate-100">
          <div className="flex items-center justify-between mb-2">
            <h4 className="text-sm font-medium text-slate-700">Top Holdings</h4>
            <PieChart className="h-3 w-3 text-slate-400" />
          </div>

          {/* Map over sortedHoldings */}
          {sortedHoldings.map(holding => {
            // Calculate return percentage for this specific holding
            const returnPercent = holding.purchasePrice > 0 // Avoid division by zero
                ? ((holding.stock.price - holding.purchasePrice) / holding.purchasePrice) * 100
                : 0;

            return (
              // Key should be stable and unique - ticker is usually good if unique per portfolio
              <div key={holding.stock.ticker} className="flex justify-between items-center p-2 hover:bg-slate-50 rounded-md text-sm">
                <div className="flex items-center">
                  <div className="w-6 h-6 bg-slate-100 rounded flex items-center justify-center mr-2 text-xs font-medium">
                    {holding.stock.ticker.substring(0, 2)}
                  </div>
                  <div>
                    <p className="font-medium text-slate-800">{holding.stock.ticker}</p>
                    <p className="text-xs text-slate-500">{holding.shares.toFixed(4)} shares</p>
                  </div>
                </div>
                <div className="text-right">
                   {/* Use holding.value calculated in useMemo */}
                  <p className="font-medium">${holding.value.toFixed(2)}</p>
                  <p className={`text-xs ${returnPercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                    {returnPercent >= 0 ? '+' : ''}{returnPercent.toFixed(1)}%
                  </p>
                </div>
              </div>
            );
          })}
        </div>
      )}
    </motion.div>
  );
}

================
File: client/src/components/price-forecast.tsx
================
import { Lock, Info } from 'lucide-react';

interface PriceForecastProps {
  ticker: string;
  currentPrice: number;
  oneYearReturn: number | string;
  isPremium?: boolean;
}

export default function PriceForecast({ 
  ticker, 
  currentPrice, 
  oneYearReturn, 
  isPremium = false 
}: PriceForecastProps) {
  // Parse the one year return to ensure it's a number
  const parsedOneYearReturn = typeof oneYearReturn === 'string' 
    ? parseFloat(oneYearReturn.replace('%', '')) 
    : oneYearReturn;
  
  // Calculate the predicted price
  const predictedPrice = currentPrice * (1 + parsedOneYearReturn / 100);
  const formattedPredictedPrice = predictedPrice.toFixed(2);
  
  // Format year return display
  const returnDisplay = parsedOneYearReturn > 0 
    ? `+${parsedOneYearReturn.toFixed(2)}%` 
    : `${parsedOneYearReturn.toFixed(2)}%`;
  
  const returnColor = parsedOneYearReturn >= 0 ? 'text-emerald-600' : 'text-red-500';
  
  return (
    <div className="mb-4">
      {/* Header with title and premium badge */}
      <div className="flex justify-between items-center mb-1">
        <div className="flex items-center">
          <h3 className="text-gray-800 font-medium">Price Forecast</h3>
          <span className="ml-1.5 text-xs bg-gray-100 px-1.5 py-0.5 rounded text-gray-500">AI</span>
        </div>
        
        <div className="flex items-center">
          {!isPremium && (
            <div className="mr-1 bg-amber-50 text-amber-700 border border-amber-200 text-xs px-2 py-0.5 rounded-full flex items-center">
              <Lock className="h-3 w-3 mr-1" />
              <span>Premium</span>
            </div>
          )}
          <Info className="h-4 w-4 text-gray-400" />
        </div>
      </div>
      
      {/* Main content with return and price */}
      <div className="flex justify-between mb-2">
        <div>
          <p className="text-sm text-gray-500">1-year return</p>
          <p className={`text-xl font-bold ${returnColor}`}>{returnDisplay}</p>
        </div>
        <div className="text-right">
          <p className="text-sm text-gray-500">Current price</p>
          <p className="text-xl font-bold text-gray-800">${currentPrice.toFixed(2)}</p>
        </div>
      </div>
      
      {/* Forecast box with premium lock */}
      <div className="bg-white border border-gray-200 rounded-lg relative">
        <div className="flex items-center justify-center py-3 px-4">
          {!isPremium && (
            <>
              <div className="blur-[3px] opacity-40 absolute inset-0 pointer-events-none">
                <p className="text-lg font-semibold text-gray-800">${formattedPredictedPrice}</p>
              </div>
              <div className="flex flex-col items-center z-10">
                <Lock className="h-5 w-5 text-gray-500 mb-1" />
                <p className="text-sm font-medium text-gray-700 mb-2">Unlock premium forecast</p>
                <button className="bg-indigo-500 hover:bg-indigo-600 text-white text-sm py-1 px-4 rounded-full transition-colors">
                  Upgrade
                </button>
              </div>
            </>
          )}
          
          {isPremium && (
            <div className="flex justify-between w-full">
              <div>
                <p className="text-sm text-gray-500">Expected price (1yr)</p>
                <p className="text-xl font-bold text-gray-800">${formattedPredictedPrice}</p>
              </div>
              <div className={`text-xl font-bold ${returnColor} flex items-center`}>
                {returnDisplay}
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Disclaimer text */}
      <p className="text-xs text-gray-500 mt-2">
        Based on historical performance and market conditions. Not financial advice.
      </p>
    </div>
  );
}

================
File: client/src/components/progress-header.tsx
================
import { Award, DollarSign } from "lucide-react";
import { Skeleton } from "./ui/skeleton";
import { usePortfolio } from "@/contexts/portfolio-context";
import { motion } from "framer-motion";

interface ProgressHeaderProps {
  streakCount: number;
  xp: number;
  isLoading?: boolean;
}

export default function ProgressHeader({ streakCount, xp, isLoading = false }: ProgressHeaderProps) {
  // Get portfolio data (cash, holdings) from context
  const { cash, portfolioValue, totalValue } = usePortfolio();
  
  // Format currency for display
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(value);
  };
  
  if (isLoading) {
    return (
      <div className="progress-stats flex space-x-4 my-5">
        <div className="flex-1 bg-white rounded-xl p-3 flex items-center space-x-3 shadow-md border border-slate-100">
          <Skeleton className="h-10 w-10 rounded-full" />
          <div className="flex-1">
            <Skeleton className="h-4 w-24 mb-1" />
            <Skeleton className="h-3 w-16" />
          </div>
        </div>
        <div className="flex-1 bg-white rounded-xl p-3 flex items-center space-x-3 shadow-md border border-slate-100">
          <Skeleton className="h-10 w-10 rounded-full" />
          <div className="flex-1">
            <Skeleton className="h-4 w-24 mb-1" />
            <Skeleton className="h-3 w-16" />
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="progress-stats flex space-x-4 my-5">
      <motion.div 
        className="flex-1 bg-white rounded-xl p-3 flex items-center space-x-3 shadow-md border border-slate-100"
        whileHover={{ y: -2, boxShadow: "0 8px 20px rgba(0, 0, 0, 0.1)" }}
        transition={{ type: "spring", stiffness: 400, damping: 25 }}
      >
        <div className="h-10 w-10 rounded-full bg-gradient-to-br from-green-500 to-emerald-600 flex items-center justify-center shadow-inner">
          <DollarSign className="h-5 w-5 text-white" />
        </div>
        <div>
          <p className="text-sm text-slate-500">Available Cash</p>
          <p className="text-lg font-bold text-slate-800 flex items-center">
            <span className="tracking-tight">{formatCurrency(cash)}</span>
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              className="ml-2 text-xs font-medium px-2 py-0.5 rounded-full bg-blue-50 text-blue-600"
            >
              Paper
            </motion.div>
          </p>
        </div>
      </motion.div>
      
      <motion.div 
        className="flex-1 bg-white rounded-xl p-3 flex items-center space-x-3 shadow-md border border-slate-100"
        whileHover={{ y: -2, boxShadow: "0 8px 20px rgba(0, 0, 0, 0.1)" }}
        transition={{ type: "spring", stiffness: 400, damping: 25 }}
      >
        <div className="h-10 w-10 rounded-full bg-gradient-to-br from-blue-500 to-cyan-600 flex items-center justify-center shadow-inner">
          <Award className="h-5 w-5 text-white" />
        </div>
        <div>
          <p className="text-sm text-slate-500">Portfolio Value</p>
          <p className="text-lg font-bold text-slate-800">{formatCurrency(portfolioValue)}</p>
        </div>
      </motion.div>
    </div>
  );
}

================
File: client/src/components/qr-code-modal.tsx
================
import { useState, useEffect } from "react";
import QRCode from "qrcode";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";

interface QRCodeModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function QRCodeModal({ isOpen, onClose }: QRCodeModalProps) {
  const [qrCodeDataUrl, setQrCodeDataUrl] = useState<string>("");
  const [hostUrl, setHostUrl] = useState<string>("");

  useEffect(() => {
    if (isOpen) {
      // Get the current hostname
      const hostname = window.location.hostname;
      const protocol = window.location.protocol;
      const port = window.location.port;
      
      // Format URL based on environment
      let url;
      if (hostname === "localhost") {
        url = `${protocol}//${hostname}:${port}`;
      } else {
        // For Replit deployment
        url = `https://${hostname}`;
      }
      
      setHostUrl(url);
      
      // Generate QR code
      QRCode.toDataURL(url, {
        width: 300,
        margin: 2,
        color: {
          dark: "#0af", // Cyan color for the QR code
          light: "#111" // Dark background
        }
      })
        .then(dataUrl => {
          setQrCodeDataUrl(dataUrl);
        })
        .catch(err => {
          console.error("Error generating QR code:", err);
        });
    }
  }, [isOpen]);

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="sm:max-w-md bg-gray-900 border-gray-800 text-white">
        <DialogHeader>
          <DialogTitle className="text-xl font-bold text-center">Open Swipefolio on your phone</DialogTitle>
          <DialogDescription className="text-gray-400 text-center">
            Scan this QR code with your phone's camera to open the app
          </DialogDescription>
        </DialogHeader>
        
        <div className="flex flex-col items-center justify-center p-4 bg-gray-800 rounded-lg">
          {qrCodeDataUrl ? (
            <img src={qrCodeDataUrl} alt="QR Code" className="w-64 h-64 border-4 border-gray-700 rounded-lg" />
          ) : (
            <div className="w-64 h-64 bg-gray-700 animate-pulse rounded-lg"></div>
          )}
          
          <p className="mt-4 text-sm text-gray-400 text-center break-all">
            {hostUrl || "Loading URL..."}
          </p>
        </div>
        
        <div className="flex justify-center mt-4">
          <Button 
            onClick={onClose}
            className="bg-gray-800 hover:bg-gray-700 text-white"
          >
            Close
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}

================
File: client/src/components/quiz-card.tsx
================
import { useState } from "react";
import { Card } from "@shared/schema";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { ArrowRight, CheckCircle, XCircle } from "lucide-react";
import ChoiceButton from "@/components/ui/choice-button";

interface QuizCardProps {
  card: Card;
  onNextCard: () => void;
}

export default function QuizCard({ card, onNextCard }: QuizCardProps) {
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [showFeedback, setShowFeedback] = useState(false);
  
  const handleAnswerSelect = (value: string) => {
    if (showFeedback) return;
    
    setSelectedAnswer(value);
    setShowFeedback(true);
  };
  
  const isCorrectAnswer = () => {
    if (!selectedAnswer) return false;
    
    const correctOption = card.content.options.find(opt => opt.isCorrect);
    return selectedAnswer === correctOption?.value;
  };
  
  const handleContinue = () => {
    onNextCard();
  };
  
  return (
    <div className="bg-white rounded-xl shadow-md w-[85%] max-w-lg h-[70%] overflow-hidden">
      <div className="h-full flex flex-col">
        <div className="bg-gradient-to-r from-accent-500 to-yellow-500 px-5 py-4">
          <h3 className="text-white font-medium text-lg">{card.title}</h3>
          <p className="text-yellow-100 text-sm">{card.subtitle}</p>
        </div>
        
        <div className="flex-1 p-5 overflow-auto">
          <div className="prose">
            <h4 className="font-medium text-gray-800 text-xl mb-4">
              {card.content.question}
            </h4>
            
            <div className="space-y-3 mt-6">
              {card.content.options.map((option, index) => (
                <ChoiceButton
                  key={index}
                  title={option.text}
                  value={option.value}
                  selected={selectedAnswer === option.value}
                  onClick={() => handleAnswerSelect(option.value)}
                  correct={showFeedback && option.isCorrect}
                  incorrect={showFeedback && selectedAnswer === option.value && !option.isCorrect}
                  disabled={showFeedback && selectedAnswer !== option.value && !option.isCorrect}
                  showFeedback={showFeedback}
                />
              ))}
            </div>
          </div>
        </div>
        
        {showFeedback && (
          <div className="p-4 bg-gray-50 border-t">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
            >
              <div className={`p-3 ${
                isCorrectAnswer() 
                  ? 'bg-green-50 border border-green-200' 
                  : 'bg-red-50 border border-red-200'
              } rounded-lg mb-4`}>
                <div className="flex items-start">
                  {isCorrectAnswer() ? (
                    <CheckCircle className="text-green-500 mr-2 mt-0.5" size={20} />
                  ) : (
                    <XCircle className="text-red-500 mr-2 mt-0.5" size={20} />
                  )}
                  <div>
                    <h4 className={`font-medium ${
                      isCorrectAnswer() ? 'text-green-800' : 'text-red-800'
                    }`}>
                      {isCorrectAnswer() ? 'Correct!' : 'Not quite!'}
                    </h4>
                    <p className={`text-sm ${
                      isCorrectAnswer() ? 'text-green-700' : 'text-red-700'
                    }`}>
                      {isCorrectAnswer() 
                        ? card.content.correctFeedback 
                        : card.content.incorrectFeedback
                      }
                    </p>
                  </div>
                </div>
              </div>
              
              <Button
                onClick={handleContinue}
                className="w-full"
              >
                <span>Continue</span>
                <ArrowRight className="ml-2" size={18} />
              </Button>
            </motion.div>
          </div>
        )}
      </div>
    </div>
  );
}

================
File: client/src/components/search-bar.tsx
================
import { Search } from "lucide-react";

export default function SearchBar() {
  return (
    <div className="relative flex items-center mt-5">
      <div className="absolute left-3 text-gray-400">
        <Search className="w-5 h-5" />
      </div>
      <input
        type="text"
        placeholder="Search..."
        className="search-bar w-full py-3 pl-10 pr-4 rounded-full text-sm focus:outline-none focus:ring-1 focus:ring-cyan-400"
      />
    </div>
  );
}

================
File: client/src/components/section-header.tsx
================
interface SectionHeaderProps {
  title: string;
  showSeeAll?: boolean;
  onSeeAllClick?: () => void;
}

export default function SectionHeader({
  title,
  showSeeAll = true,
  onSeeAllClick
}: SectionHeaderProps) {
  return (
    <div className="flex justify-between items-center mb-4">
      <h2 className="section-header">{title}</h2>
      
      {showSeeAll && (
        <button 
          className="see-all" 
          onClick={onSeeAllClick}
        >
          See all
        </button>
      )}
    </div>
  );
}

================
File: client/src/components/stack-complete-card.tsx
================
import { motion } from "framer-motion";
import { Trophy, ArrowRight, HomeIcon } from "lucide-react";
import { Button } from "@/components/ui/button";

interface StackCompleteCardProps {
  stackName: string;
  xpEarned: number;
  onReturn: () => void;
  onViewMoreStacks?: () => void;
  industry: string;
}

export default function StackCompleteCard({
  stackName,
  xpEarned,
  onReturn,
  onViewMoreStacks,
  industry
}: StackCompleteCardProps) {
  // Set badge name based on the industry
  const getBadgeName = () => {
    switch (industry) {
      case "Technology":
        return "Tech Rookie";
      case "Investing":
        return "Investor Rookie";
      case "Cryptocurrency":
        return "Crypto Rookie";
      case "Real Estate":
        return "Property Rookie";
      case "Healthcare":
        return "Healthcare Rookie";
      default:
        return "Finance Rookie";
    }
  };
  
  // Get icon name based on the industry
  const getBadgeIcon = () => {
    switch (industry) {
      case "Technology":
        return "computer-line";
      case "Investing":
        return "line-chart-line";
      case "Cryptocurrency":
        return "coins-line";
      case "Real Estate":
        return "building-line";
      case "Healthcare":
        return "heart-pulse-line";
      default:
        return "bar-chart-box-line";
    }
  };
  
  return (
    <div className="bg-white rounded-xl shadow-md w-[85%] max-w-lg overflow-hidden">
      <div className="p-6 text-center">
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.5 }}
          className="w-20 h-20 mx-auto bg-primary-100 rounded-full flex items-center justify-center mb-4"
        >
          <Trophy className="text-primary-500 text-4xl" />
        </motion.div>
        
        <h3 className="text-xl font-semibold text-gray-800 mb-2">Stack Complete!</h3>
        <p className="text-gray-600 mb-4">You've earned {xpEarned} XP and unlocked a new badge.</p>
        
        <motion.div
          className="py-4 flex justify-center"
          initial={{ rotateY: -30, opacity: 0 }}
          animate={{ rotateY: 0, opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          style={{ perspective: "1000px" }}
        >
          <div className="badge bg-gradient-to-br from-primary-500 to-blue-600 text-white w-16 h-16 rounded-full flex items-center justify-center shadow-lg transform transition-transform hover:rotate-y-12">
            <i className={`ri-${getBadgeIcon()} text-2xl`}></i>
          </div>
        </motion.div>
        
        <div className="my-4">
          <h4 className="font-medium text-gray-800">{getBadgeName()}</h4>
          <p className="text-sm text-gray-500">Completed your first {industry.toLowerCase()} stack</p>
        </div>
        
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.3, delay: 0.4 }}
          className="xp-animation bg-primary-50 text-primary-800 font-medium py-2 px-4 rounded-full inline-block mb-6"
        >
          +{xpEarned} XP
        </motion.div>
        
        <div className="grid grid-cols-2 gap-3">
          <Button
            variant="outline"
            onClick={onViewMoreStacks}
            className="border gap-2"
          >
            <ArrowRight className="h-4 w-4" />
            <span>More Stacks</span>
          </Button>
          
          <Button
            onClick={onReturn}
            className="gap-2"
          >
            <HomeIcon className="h-4 w-4" />
            <span>Home</span>
          </Button>
        </div>
      </div>
    </div>
  );
}

================
File: client/src/components/stack-completed-modal.tsx
================
import { motion, AnimatePresence } from "framer-motion";
import { CheckCircle, X, Home, Repeat } from "lucide-react";
import { useLocation } from "wouter";

interface StackCompletedModalProps {
  isOpen: boolean;
  onClose: () => void;
  onReset: () => void;
  stackName: string;
  stocksCount: number;
}

export default function StackCompletedModal({
  isOpen,
  onClose,
  onReset,
  stackName,
  stocksCount
}: StackCompletedModalProps) {
  const [_, setLocation] = useLocation();

  const handleGoHome = () => {
    setLocation("/");
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/70"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            transition={{ type: "spring", duration: 0.4 }}
            className="relative w-full max-w-md bg-gray-900 rounded-xl p-6 shadow-xl border border-cyan-500/20"
            onClick={(e) => e.stopPropagation()}
          >
            <button
              className="absolute top-3 right-3 text-gray-400 hover:text-white"
              onClick={onClose}
            >
              <X size={20} />
            </button>
            
            <div className="flex flex-col items-center text-center">
              <div className="w-16 h-16 flex items-center justify-center bg-cyan-500/20 rounded-full mb-4">
                <CheckCircle className="w-10 h-10 text-cyan-400" />
              </div>
              
              <h2 className="text-xl font-bold mb-2">Stack Completed!</h2>
              
              <p className="text-gray-400 mb-4">
                You've viewed all {stocksCount} stocks in the <span className="text-cyan-400">{stackName}</span> stack.
              </p>
              
              <div className="w-full bg-gray-800 h-1 rounded-full mb-6 overflow-hidden">
                <div className="bg-cyan-400 h-full w-full" />
              </div>
              
              <div className="flex gap-3 w-full">
                <button
                  onClick={handleGoHome}
                  className="flex-1 flex items-center justify-center gap-2 bg-gray-800 hover:bg-gray-700 py-3 px-4 rounded-lg font-medium transition-colors"
                >
                  <Home size={18} />
                  Home
                </button>
                
                <button
                  onClick={onReset}
                  className="flex-1 flex items-center justify-center gap-2 bg-cyan-500/20 hover:bg-cyan-500/30 text-cyan-400 py-3 px-4 rounded-lg font-medium transition-colors"
                >
                  <Repeat size={18} />
                  View Again
                </button>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

================
File: client/src/components/stacks-explorer.tsx
================
import { useLocation } from "wouter";
import StackCard from "./ui/stack-card";
import type { Stack } from "@shared/schema";

interface StacksExplorerProps {
  stacks: Stack[];
}

export default function StacksExplorer({ stacks }: StacksExplorerProps) {
  const [_, setLocation] = useLocation();

  const handleStackClick = (stackId: number) => {
    setLocation(`/stock/${stackId}`);
  };

  // Industry names and images with vibrant mobile-friendly imagery
  const industryDetails: Record<string, { name: string, image: string }> = {
    "Tech": { 
      name: "Tech Titans", 
      image: "https://images.unsplash.com/photo-1550745165-9bc0b252726f?q=80&w=580&auto=format&fit=crop" 
    },
    "Healthcare": { 
      name: "Med-Tech Innovators", 
      image: "https://images.unsplash.com/photo-1584036561566-baf8f5f1b144?q=80&w=580&auto=format&fit=crop" 
    },
    "Consumer": { 
      name: "Retail Champions", 
      image: "https://images.unsplash.com/photo-1472851294608-062f824d29cc?q=80&w=580&auto=format&fit=crop" 
    },
    "Real Estate": { 
      name: "Property Players", 
      image: "https://images.unsplash.com/photo-1582407947304-fd86f028f716?q=80&w=580&auto=format&fit=crop" 
    },
    "Energy": { 
      name: "Energy Innovators", 
      image: "https://images.unsplash.com/photo-1591964006776-90d33e597522?q=80&w=580&auto=format&fit=crop" 
    },
    "Automotive": { 
      name: "Mobility Disruptors", 
      image: "https://images.unsplash.com/photo-1533106418989-88406c7cc8ca?q=80&w=580&auto=format&fit=crop" 
    },
    "Fintech": { 
      name: "Banking Disruptors", 
      image: "https://images.unsplash.com/photo-1563013544-824ae1b704d3?q=80&w=580&auto=format&fit=crop" 
    },
    "ESG": { 
      name: "Green Giants", 
      image: "https://images.unsplash.com/photo-1464380573004-8ca85a08751a?q=80&w=580&auto=format&fit=crop" 
    },
    "Industrials": { 
      name: "Industrial Leaders", 
      image: "https://images.unsplash.com/photo-1516937941344-00b4e0337589?q=80&w=580&auto=format&fit=crop" 
    },
    "Communication": { 
      name: "Media Movers", 
      image: "https://images.unsplash.com/photo-1516321497487-e288fb19713f?q=80&w=580&auto=format&fit=crop" 
    }
  };

  // Filter out non-industry stacks (like "investing" and "crypto currency" guides)
  const industryStacksOnly = stacks.filter(stack => {
    // Keep stacks if they have a real industry name, filter out educational stacks
    const isEducational = stack.title.includes("Investing") || 
                          stack.title.includes("Basics") || 
                          stack.title.includes("101") ||
                          stack.title.includes("Learn");

    return !isEducational;
  });

  // Add some default industry stacks if we don't have enough
  if (industryStacksOnly.length < 5) {
    // Example industries to add if there aren't enough
    const defaultIndustries = ["Tech", "Healthcare", "Consumer", "Real Estate", "ESG"];
    const industryStockCounts: Record<string, number> = {
      "Real Estate": 10,
      "Healthcare": 9,
      "Tech": 10,
      "Consumer": 8,
      "ESG": 8
    };

    // Add missing industries from our defaults
    defaultIndustries.forEach((industry, index) => {
      if (!industryStacksOnly.some(s => s.industry === industry)) {
        industryStacksOnly.push({
          id: 100 + index, // Avoid ID conflicts
          title: industryDetails[industry].name,
          description: `Explore top companies in the ${industry} sector`,
          industry: industry,
          iconName: "trending-up", // Default icon
          difficulty: "intermediate",
          cardCount: industryStockCounts[industry] || 8, // Use specific count or default to 8
          rating: 4.5,
          estimatedMinutes: 15,
          color: "#000"
        });
      }
    });
  }

  // Get details for a given industry
  const getIndustryDetails = (industry: string) => {
    return industryDetails[industry] || { 
      name: industry, 
      image: "https://images.unsplash.com/photo-1579532537598-459ecdaf39cc?q=80&w=580&auto=format&fit=crop" 
    };
  };

  // Enhance stack data with industry details
  const enhancedStacks = industryStacksOnly.map(stack => {
    const details = getIndustryDetails(stack.industry);
    return {
      ...stack,
      title: details.name, // Replace title with industry-specific name
      imageUrl: details.image
    };
  });

  return (
    <div className="grid-cols-stacks">
      {enhancedStacks.map((stack) => (
        <StackCard
          key={stack.id}
          stack={stack}
          onClick={handleStackClick}
          imageUrl={stack.imageUrl}
          category={stack.industry}
        />
      ))}
    </div>
  );
}

================
File: client/src/components/time-attack-game.tsx
================
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card } from './ui/card';
import { useGameState } from '@/hooks/use-game-state';
import { GameHeader, MetricCard, GameButton, GameProgress, GameOver } from './ui/game-elements';
import { METRIC_QUESTIONS, GAME_CONSTANTS } from '@/constants/game-data.tsx';
import { Ticket } from 'lucide-react';
import type { MetricQuestion } from '@/types/game';

export function TimeAttackGame() {
  const {
    gameState,
    updateScore,
    addTickets,
    resetGame
  } = useGameState();

  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [timeLeft, setTimeLeft] = useState(GAME_CONSTANTS.GAME_TIME_LIMIT);
  const [gameStarted, setGameStarted] = useState(false);
  const [gameOver, setGameOver] = useState(false);
  const [questions, setQuestions] = useState<MetricQuestion[]>([]);
  const [correctAnswers, setCorrectAnswers] = useState(0);

  // Initialize randomized questions when game starts
  useEffect(() => {
    if (gameStarted && !gameOver) {
      // Create a copy of questions and shuffle them
      const shuffledQuestions = [...METRIC_QUESTIONS]
        .sort(() => Math.random() - 0.5)
        .slice(0, GAME_CONSTANTS.QUESTIONS_PER_GAME);
      setQuestions(shuffledQuestions);
      setCurrentQuestion(0);
      setCorrectAnswers(0);
    }
  }, [gameStarted, gameOver]);

  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (gameStarted && !gameOver && timeLeft > 0) {
      timer = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev <= 1) {
            setGameOver(true);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => clearInterval(timer);
  }, [gameStarted, gameOver, timeLeft]);

  const handleAnswer = (isGood: boolean) => {
    const currentQ = questions[currentQuestion];
    if (isGood === currentQ.isGood) {
      const newCorrectAnswers = correctAnswers + 1;
      setCorrectAnswers(newCorrectAnswers);
      updateScore(1);
      
      // Award ticket for every 10 correct answers
      if (newCorrectAnswers % 10 === 0) {
        addTickets(GAME_CONSTANTS.TICKETS_PER_10_CORRECT);
      }
    }
    
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setGameOver(true);
    }
  };

  const handleReset = () => {
    setCurrentQuestion(0);
    setTimeLeft(GAME_CONSTANTS.GAME_TIME_LIMIT);
    setGameStarted(false);
    setGameOver(false);
    setQuestions([]);
    setCorrectAnswers(0);
    resetGame();
  };

  const TicketAnimation = () => (
    <div className="flex flex-col items-center justify-center py-12 space-y-8">
      <motion.div
        className="relative"
        animate={{
          y: [0, -10, 0],
          rotate: [0, -5, 5, 0],
        }}
        transition={{
          duration: 3,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      >
        <motion.div
          animate={{
            scale: [1, 1.05, 1],
          }}
          transition={{
            duration: 2,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        >
          <div className="relative bg-gradient-to-br from-green-400 to-green-500 p-8 rounded-xl shadow-lg">
            <Ticket className="w-20 h-20 text-white" strokeWidth={1.5} />
            <motion.div
              className="absolute -top-1 -right-1 w-3 h-3 bg-yellow-300 rounded-full"
              animate={{
                scale: [1, 1.2, 1],
                opacity: [0.5, 1, 0.5]
              }}
              transition={{
                duration: 1.5,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            />
          </div>
        </motion.div>
      </motion.div>

      <div className="space-y-6">
        <h3 className="text-2xl font-semibold">Ready to test your knowledge?</h3>
        <p className="text-gray-600">Answer 10 questions correctly to earn a raffle ticket!</p>
        <GameButton 
          onClick={() => setGameStarted(true)}
          className="px-8 py-3 text-lg"
        >
          Start Game
        </GameButton>
      </div>
    </div>
  );

  return (
    <div className="max-w-2xl mx-auto p-4">
      <Card className="p-6 relative min-h-[500px]">
        <GameHeader
          title="Ticket Time Attack"
          timeLeft={timeLeft}
          tickets={gameState.tickets}
        />

        {!gameStarted ? (
          <div className="flex items-center justify-center h-full">
            <TicketAnimation />
          </div>
        ) : !gameOver && questions.length > 0 ? (
          <AnimatePresence mode="wait">
            <motion.div
              key={currentQuestion}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="space-y-6"
            >
              <MetricCard
                title={questions[currentQuestion].metric}
                value={questions[currentQuestion].companyValue}
                industryAverage={questions[currentQuestion].industryAverage}
                explanation={questions[currentQuestion].explanation}
              />

              <div className="flex justify-center gap-4">
                <GameButton
                  variant="bad"
                  onClick={() => handleAnswer(false)}
                >
                  Bad Choice
                </GameButton>
                <GameButton
                  variant="good"
                  onClick={() => handleAnswer(true)}
                >
                  Good Choice
                </GameButton>
              </div>

              <GameProgress
                current={currentQuestion + 1}
                total={questions.length}
              />
            </motion.div>
          </AnimatePresence>
        ) : (
          <GameOver
            score={gameState.score}
            tickets={gameState.tickets}
            onPlayAgain={handleReset}
          />
        )}
      </Card>
    </div>
  );
}

================
File: client/src/components/user-welcome.tsx
================
interface UserWelcomeProps {
  name: string;
}

export default function UserWelcome({ name }: UserWelcomeProps) {
  return (
    <div className="welcome-section mb-6">
      <h1 className="text-2xl font-semibold text-gray-800 mb-1">
        Hey, {name}! 👋
      </h1>
      <p className="text-gray-400">
        Continue learning finance today
      </p>
    </div>
  );
}

================
File: client/src/constants/board-room-data.tsx
================
export interface Decision {
  scenario: string;
  context: string;
  optionA: {
    text: string;
    impacts: {
      metric: string;
      value: number;
      explanation: string;
    }[];
  };
  optionB: {
    text: string;
    impacts: {
      metric: string;
      value: number;
      explanation: string;
    }[];
  };
}

export const BOARD_ROOM_DECISIONS: Decision[] = [
  {
    scenario: "Market Expansion Strategy",
    context: "Your company has the opportunity to expand. You must choose between two strategic paths.",
    optionA: {
      text: "Expand into emerging markets with lower-cost products",
      impacts: [
        {
          metric: "Market Share",
          value: 15,
          explanation: "Potential for rapid market share growth in developing regions"
        },
        {
          metric: "Profit Margin",
          value: -5,
          explanation: "Lower margins due to reduced pricing"
        }
      ]
    },
    optionB: {
      text: "Focus on premium products in established markets",
      impacts: [
        {
          metric: "Brand Value",
          value: 20,
          explanation: "Enhanced brand perception in mature markets"
        },
        {
          metric: "Revenue Growth",
          value: 8,
          explanation: "Steady but slower growth with higher-margin products"
        }
      ]
    }
  },
  {
    scenario: "Innovation Investment",
    context: "R&D has proposed two major innovation projects. You need to decide which path to pursue.",
    optionA: {
      text: "Invest heavily in breakthrough technology research",
      impacts: [
        {
          metric: "Brand Value",
          value: 25,
          explanation: "Position as industry innovator"
        },
        {
          metric: "Profit Margin",
          value: -10,
          explanation: "High research costs impact short-term profits"
        }
      ]
    },
    optionB: {
      text: "Focus on incremental improvements to existing products",
      impacts: [
        {
          metric: "Revenue Growth",
          value: 12,
          explanation: "Quick returns from enhanced product lines"
        },
        {
          metric: "Market Share",
          value: 5,
          explanation: "Moderate market share growth from improved offerings"
        }
      ]
    }
  },
  {
    scenario: "Talent Management Crisis",
    context: "Employee satisfaction is dropping. You need to address the situation.",
    optionA: {
      text: "Implement comprehensive benefits package and flexible work policies",
      impacts: [
        {
          metric: "Profit Margin",
          value: -8,
          explanation: "Increased operational costs"
        },
        {
          metric: "Brand Value",
          value: 15,
          explanation: "Enhanced employer brand and company culture"
        }
      ]
    },
    optionB: {
      text: "Focus on performance-based bonuses and career development",
      impacts: [
        {
          metric: "Revenue Growth",
          value: 15,
          explanation: "Increased productivity and innovation"
        },
        {
          metric: "Market Share",
          value: -5,
          explanation: "Some talent loss to competitors"
        }
      ]
    }
  },
  {
    scenario: "Digital Transformation",
    context: "The industry is rapidly digitalizing. You must choose your company's approach.",
    optionA: {
      text: "Complete digital overhaul of all systems and processes",
      impacts: [
        {
          metric: "Revenue Growth",
          value: 20,
          explanation: "Long-term efficiency gains and new digital revenue streams"
        },
        {
          metric: "Profit Margin",
          value: -15,
          explanation: "Significant implementation costs"
        }
      ]
    },
    optionB: {
      text: "Gradual digital adoption focusing on customer-facing systems",
      impacts: [
        {
          metric: "Market Share",
          value: 10,
          explanation: "Improved customer experience and retention"
        },
        {
          metric: "Brand Value",
          value: 5,
          explanation: "Perceived as moderately progressive"
        }
      ]
    }
  },
  {
    scenario: "Sustainability Initiative",
    context: "Stakeholders are demanding stronger environmental commitments.",
    optionA: {
      text: "Implement comprehensive sustainability program",
      impacts: [
        {
          metric: "Brand Value",
          value: 30,
          explanation: "Strong positive impact on brand reputation"
        },
        {
          metric: "Profit Margin",
          value: -12,
          explanation: "High implementation costs"
        }
      ]
    },
    optionB: {
      text: "Focus on cost-effective green initiatives",
      impacts: [
        {
          metric: "Market Share",
          value: 8,
          explanation: "Moderate appeal to environmentally conscious consumers"
        },
        {
          metric: "Revenue Growth",
          value: 5,
          explanation: "Slight growth from eco-friendly products"
        }
      ]
    }
  }
];

================
File: client/src/constants/ceo-decisions.tsx
================
import { Building2, Users, DollarSign, Heart, Star, TrendingUp, LineChart, Briefcase, LucideIcon } from 'lucide-react';

interface Decision {
  title: string;
  description: string;
  icon: LucideIcon;
  iconColor: string;
  options: {
    text: string;
    effects: {
      value?: number;
      employees?: number;
      revenue?: number;
      happiness?: number;
      innovation?: number;
      reputation?: number;
    };
  }[];
}

// Normal mode decisions - smaller impacts on company metrics
export const NORMAL_DECISIONS: Decision[] = [
  {
    title: "Team Building Event",
    description: "The HR department suggests organizing a team building event. How would you like to proceed?",
    icon: Users,
    iconColor: "text-blue-500",
    options: [
      {
        text: "Organize a company-wide event",
        effects: {
          happiness: 8,
          value: -3000,
          reputation: 4,
          innovation: 2
        }
      },
      {
        text: "Organize small department lunches",
        effects: {
          happiness: 5,
          value: -1000,
          reputation: 2
        }
      },
      {
        text: "Skip the event to save costs",
        effects: {
          happiness: -3,
          value: 1000,
          reputation: -1
        }
      }
    ]
  },
  {
    title: "Office Equipment Upgrade",
    description: "Some employees have requested new office equipment. What's your decision?",
    icon: Building2,
    iconColor: "text-purple-500",
    options: [
      {
        text: "Complete office modernization",
        effects: {
          happiness: 10,
          value: -5000,
          innovation: 5,
          reputation: 3
        }
      },
      {
        text: "Approve basic upgrades",
        effects: {
          happiness: 3,
          value: -2000,
          innovation: 2
        }
      },
      {
        text: "Maintain current equipment",
        effects: {
          happiness: -2,
          value: 1000,
          innovation: -1
        }
      }
    ]
  },
  {
    title: "Social Media Presence",
    description: "Marketing team suggests increasing our social media activity.",
    icon: TrendingUp,
    iconColor: "text-green-500",
    options: [
      {
        text: "Build dedicated social media team",
        effects: {
          value: -8000,
          revenue: 12000,
          reputation: 8,
          employees: 3,
          innovation: 4
        }
      },
      {
        text: "Hire a part-time social media manager",
        effects: {
          value: -3000,
          revenue: 5000,
          reputation: 3,
          employees: 1
        }
      },
      {
        text: "Use existing team members",
        effects: {
          revenue: 2000,
          happiness: -2,
          reputation: 1
        }
      }
    ]
  },
  {
    title: "Office Snacks",
    description: "Employees are requesting a stocked snack bar in the break room.",
    icon: Heart,
    iconColor: "text-red-500",
    options: [
      {
        text: "Create premium snack and coffee bar",
        effects: {
          happiness: 12,
          value: -3000,
          reputation: 4,
          innovation: 2
        }
      },
      {
        text: "Provide healthy snacks and drinks",
        effects: {
          happiness: 8,
          value: -1500,
          reputation: 2
        }
      },
      {
        text: "Keep basic coffee and water only",
        effects: {
          happiness: -4,
          value: 500
        }
      }
    ]
  },
  {
    title: "Weekly Schedule",
    description: "Team leads propose changing the weekly meeting schedule.",
    icon: Users,
    iconColor: "text-indigo-500",
    options: [
      {
        text: "Implement flexible work hours",
        effects: {
          innovation: 8,
          happiness: 10,
          revenue: -2000,
          reputation: 5
        }
      },
      {
        text: "Switch to async updates",
        effects: {
          innovation: 5,
          happiness: 6,
          revenue: -1000
        }
      },
      {
        text: "Keep current meeting schedule",
        effects: {
          happiness: -2,
          innovation: -3,
          revenue: 1000
        }
      }
    ]
  },
  {
    title: "Office Plants",
    description: "The office space feels a bit sterile. Consider adding some greenery?",
    icon: Building2,
    iconColor: "text-purple-500",
    options: [
      {
        text: "Add plants throughout the office",
        effects: {
          happiness: 4,
          value: -800,
          reputation: 2
        }
      },
      {
        text: "Keep current office layout",
        effects: {
          value: 500,
          happiness: -1
        }
      }
    ]
  },
  {
    title: "Casual Friday",
    description: "Employees request a casual dress code on Fridays.",
    icon: Users,
    iconColor: "text-blue-500",
    options: [
      {
        text: "Implement casual Fridays",
        effects: {
          happiness: 7,
          reputation: -2,
          innovation: 3
        }
      },
      {
        text: "Maintain professional dress code",
        effects: {
          happiness: -3,
          reputation: 2
        }
      }
    ]
  }
];

// Board Room mode decisions - major impacts on company metrics
export const BOARDROOM_DECISIONS: Decision[] = [
  {
    title: "Strategic Acquisition",
    description: "A competitor is available for acquisition. This could reshape the industry landscape.",
    icon: Building2,
    iconColor: "text-purple-600",
    options: [
      {
        text: "Pursue aggressive acquisition ($5M)",
        effects: {
          value: -5000000,
          employees: 50,
          revenue: 7500000,
          innovation: 25,
          reputation: 20
        }
      },
      {
        text: "Negotiate partial acquisition",
        effects: {
          value: -2500000,
          employees: 25,
          revenue: 4000000,
          innovation: 15,
          reputation: 10
        }
      },
      {
        text: "Develop internal capabilities",
        effects: {
          value: -1000000,
          employees: 10,
          innovation: 15,
          reputation: 5
        }
      }
    ]
  },
  {
    title: "Global Expansion",
    description: "Board proposes expanding into international markets. This is a pivotal moment for the company.",
    icon: LineChart,
    iconColor: "text-blue-600",
    options: [
      {
        text: "Launch full-scale global expansion",
        effects: {
          value: -3000000,
          employees: 30,
          revenue: 5000000,
          reputation: 30,
          innovation: 20
        }
      },
      {
        text: "Focus on key regional markets",
        effects: {
          value: -1500000,
          employees: 15,
          revenue: 2500000,
          reputation: 20,
          innovation: 10
        }
      },
      {
        text: "Start with limited market testing",
        effects: {
          value: -500000,
          employees: 5,
          revenue: 800000,
          reputation: 10
        }
      }
    ]
  },
  {
    title: "Revolutionary R&D Project",
    description: "Research team proposes a groundbreaking but risky innovation project.",
    icon: Star,
    iconColor: "text-yellow-500",
    options: [
      {
        text: "Invest heavily in breakthrough technology",
        effects: {
          value: -2500000,
          innovation: 40,
          reputation: 25,
          revenue: -1000000
        }
      },
      {
        text: "Balance innovation with stability",
        effects: {
          value: -1500000,
          innovation: 25,
          reputation: 15,
          revenue: -500000
        }
      },
      {
        text: "Focus on incremental improvements",
        effects: {
          value: -500000,
          innovation: 10,
          revenue: 500000
        }
      }
    ]
  },
  {
    title: "Major Restructuring",
    description: "Economic pressures require decisive action. This decision will define your legacy.",
    icon: Briefcase,
    iconColor: "text-orange-500",
    options: [
      {
        text: "Complete company reorganization",
        effects: {
          employees: -20,
          value: 2000000,
          happiness: -30,
          revenue: 3000000,
          innovation: 15
        }
      },
      {
        text: "Strategic department mergers",
        effects: {
          employees: -10,
          value: 1000000,
          happiness: -15,
          revenue: 1500000,
          innovation: 8
        }
      },
      {
        text: "Implement gradual changes",
        effects: {
          employees: -5,
          value: 500000,
          happiness: -10,
          revenue: 800000,
          innovation: 3
        }
      }
    ]
  },
  {
    title: "Industry-Changing Partnership",
    description: "A major tech giant proposes a strategic partnership that could transform both companies.",
    icon: DollarSign,
    iconColor: "text-green-600",
    options: [
      {
        text: "Form exclusive partnership",
        effects: {
          value: 4000000,
          innovation: 35,
          reputation: 40,
          revenue: 6000000
        }
      },
      {
        text: "Create limited joint venture",
        effects: {
          value: 2000000,
          innovation: 20,
          reputation: 25,
          revenue: 3000000
        }
      },
      {
        text: "Maintain independence",
        effects: {
          value: 500000,
          innovation: 5,
          reputation: -5
        }
      }
    ]
  }
];

================
File: client/src/constants/game-data.tsx
================
import React from 'react';
import { Brain, Heart, Building2, LineChart, Users, TrendingUp, Star } from 'lucide-react';
import type { Stock, Decision, MetricQuestion } from '@/types/game';

export const STOCK_TIERS = [
  { name: "Penny Stocks", minPrice: 0.05, maxPrice: 1, requiredLevel: 1 },
  { name: "Small Caps", minPrice: 1, maxPrice: 10, requiredLevel: 2 },
  { name: "Mid Caps", minPrice: 10, maxPrice: 50, requiredLevel: 3 },
  { name: "Large Caps", minPrice: 50, maxPrice: 200, requiredLevel: 5 },
  { name: "Blue Chips", minPrice: 200, maxPrice: 1000, requiredLevel: 8 },
  { name: "Tech Giants", minPrice: 1000, maxPrice: 10000, requiredLevel: 12 },
  { name: "Alien Tech", minPrice: 10000, maxPrice: 1000000, requiredLevel: 15 }
];

export const INITIAL_STOCKS: Stock[] = [
  // Tier 1 - Penny Stocks
  {
    id: 101,
    name: "MicroTech Solutions",
    symbol: "MCRO",
    price: 0.05,
    change: 0,
    marketCap: 100000,
    industry: "Technology",
    description: "Small tech startup with innovative software solutions.",
    tier: 1,
    volatility: 0.05
  },
  // Add more stocks as needed
];

export const DECISIONS: Decision[] = [
  {
    id: 1,
    title: "Basic Financial Planning",
    description: "Your CFO suggests implementing basic financial planning tools. (Level 1 Finance Tip: Budgeting is the foundation of financial success)",
    options: [
      {
        text: "Implement budgeting software",
        effects: { 
          value: -5000,
          revenue: 2000,
          innovation: 8,
          happiness: -5
        }
      },
      // Add more options
    ],
    icon: <Brain className="w-6 h-6 text-purple-500" />
  },
  // Add more decisions
];

export const METRIC_QUESTIONS: MetricQuestion[] = [
  {
    id: 1,
    metric: "Revenue Growth",
    explanation: "Revenue growth measures the percentage increase in a company's revenue over a specific period. A higher growth rate indicates strong business performance and market demand.",
    companyValue: 15.5,
    industryAverage: 8.2,
    isGood: true
  },
  {
    id: 2,
    metric: "Operating Margin",
    explanation: "Operating margin shows the percentage of revenue that remains after covering operating expenses. A higher margin indicates better efficiency and profitability.",
    companyValue: 12.3,
    industryAverage: 18.5,
    isGood: false
  },
  {
    id: 3,
    metric: "Customer Acquisition Cost (CAC)",
    explanation: "CAC measures the cost of acquiring a new customer. A lower CAC relative to industry average indicates more efficient marketing and sales processes.",
    companyValue: 45,
    industryAverage: 65,
    isGood: true
  },
  {
    id: 4,
    metric: "Employee Turnover Rate",
    explanation: "Employee turnover rate shows the percentage of employees who leave the company within a year. A higher rate than industry average suggests potential workplace issues.",
    companyValue: 25,
    industryAverage: 15,
    isGood: false
  },
  {
    id: 5,
    metric: "Research & Development Investment",
    explanation: "R&D investment as a percentage of revenue indicates a company's commitment to innovation. Higher investment than industry average often leads to future growth.",
    companyValue: 8.5,
    industryAverage: 5.2,
    isGood: true
  },
  {
    id: 6,
    metric: "Debt-to-Equity Ratio",
    explanation: "This ratio compares a company's total debt to its shareholder equity. A higher ratio than industry average indicates more financial risk.",
    companyValue: 2.8,
    industryAverage: 1.5,
    isGood: false
  },
  {
    id: 7,
    metric: "Customer Satisfaction Score",
    explanation: "Customer satisfaction measures how happy customers are with the company's products or services. A higher score than industry average indicates better customer service.",
    companyValue: 92,
    industryAverage: 85,
    isGood: true
  },
  {
    id: 8,
    metric: "Inventory Turnover",
    explanation: "Inventory turnover shows how quickly a company sells its inventory. A lower rate than industry average might indicate poor inventory management.",
    companyValue: 3.2,
    industryAverage: 4.5,
    isGood: false
  },
  {
    id: 9,
    metric: "Market Share Growth",
    explanation: "Market share growth indicates how much a company's market presence is expanding. Higher growth than industry average suggests competitive advantage.",
    companyValue: 2.5,
    industryAverage: 1.8,
    isGood: true
  },
  {
    id: 10,
    metric: "Return on Investment (ROI)",
    explanation: "ROI measures the efficiency of an investment. A higher ROI than industry average indicates better use of capital.",
    companyValue: 18.3,
    industryAverage: 22.5,
    isGood: false
  },
  {
    id: 11,
    metric: "Digital Transformation Progress",
    explanation: "This metric measures how well a company is adopting digital technologies. Higher progress than industry average suggests better future readiness.",
    companyValue: 75,
    industryAverage: 60,
    isGood: true
  },
  {
    id: 12,
    metric: "Carbon Footprint",
    explanation: "Carbon footprint measures environmental impact. A higher footprint than industry average indicates poor environmental practices.",
    companyValue: 1200,
    industryAverage: 800,
    isGood: false
  },
  {
    id: 13,
    metric: "Product Quality Score",
    explanation: "Product quality score measures the reliability and performance of products. A higher score than industry average indicates better product quality.",
    companyValue: 94,
    industryAverage: 88,
    isGood: true
  },
  {
    id: 14,
    metric: "Supply Chain Efficiency",
    explanation: "Supply chain efficiency measures how well a company manages its supply chain. A lower efficiency score than industry average suggests operational issues.",
    companyValue: 65,
    industryAverage: 75,
    isGood: false
  },
  {
    id: 15,
    metric: "Brand Recognition",
    explanation: "Brand recognition measures how well-known a company's brand is. Higher recognition than industry average indicates stronger market presence.",
    companyValue: 82,
    industryAverage: 70,
    isGood: true
  },
  {
    id: 16,
    metric: "Employee Training Investment",
    explanation: "Training investment per employee shows commitment to workforce development. Higher investment than industry average indicates better employee growth opportunities.",
    companyValue: 2500,
    industryAverage: 1800,
    isGood: true
  },
  {
    id: 17,
    metric: "Customer Churn Rate",
    explanation: "Customer churn rate shows the percentage of customers who stop using a company's products. A higher rate than industry average indicates customer retention issues.",
    companyValue: 8.5,
    industryAverage: 5.2,
    isGood: false
  },
  {
    id: 18,
    metric: "Patent Portfolio Growth",
    explanation: "Patent portfolio growth indicates innovation and intellectual property development. Higher growth than industry average suggests stronger innovation capabilities.",
    companyValue: 12,
    industryAverage: 8,
    isGood: true
  },
  {
    id: 19,
    metric: "Energy Efficiency",
    explanation: "Energy efficiency measures how well a company uses energy resources. Lower efficiency than industry average indicates poor resource management.",
    companyValue: 65,
    industryAverage: 75,
    isGood: false
  },
  {
    id: 20,
    metric: "Social Media Engagement",
    explanation: "Social media engagement shows how well a company connects with its audience. Higher engagement than industry average indicates better brand interaction.",
    companyValue: 4.8,
    industryAverage: 3.2,
    isGood: true
  },
  {
    id: 21,
    metric: "Product Return Rate",
    explanation: "Product return rate indicates customer satisfaction with products. A higher rate than industry average suggests quality issues.",
    companyValue: 5.5,
    industryAverage: 3.8,
    isGood: false
  },
  {
    id: 22,
    metric: "Employee Diversity Score",
    explanation: "Diversity score measures workforce representation across different demographics. Higher score than industry average indicates better inclusivity.",
    companyValue: 85,
    industryAverage: 70,
    isGood: true
  },
  {
    id: 23,
    metric: "Cybersecurity Rating",
    explanation: "Cybersecurity rating measures protection against digital threats. Lower rating than industry average indicates security vulnerabilities.",
    companyValue: 75,
    industryAverage: 85,
    isGood: false
  },
  {
    id: 24,
    metric: "Market Response Time",
    explanation: "Market response time shows how quickly a company adapts to market changes. Faster response than industry average indicates better agility.",
    companyValue: 2.5,
    industryAverage: 3.8,
    isGood: true
  },
  {
    id: 25,
    metric: "Customer Support Resolution Time",
    explanation: "Support resolution time measures customer service efficiency. Longer resolution time than industry average indicates poor customer service.",
    companyValue: 48,
    industryAverage: 36,
    isGood: false
  },
  {
    id: 26,
    metric: "Innovation Pipeline Strength",
    explanation: "Innovation pipeline strength shows potential future products and services. Stronger pipeline than industry average indicates better future growth potential.",
    companyValue: 85,
    industryAverage: 70,
    isGood: true
  },
  {
    id: 27,
    metric: "Employee Burnout Rate",
    explanation: "Employee burnout rate indicates workplace stress levels. Higher rate than industry average suggests poor work-life balance.",
    companyValue: 25,
    industryAverage: 15,
    isGood: false
  },
  {
    id: 28,
    metric: "Brand Loyalty Score",
    explanation: "Brand loyalty measures customer commitment to the brand. Higher score than industry average indicates stronger customer relationships.",
    companyValue: 88,
    industryAverage: 75,
    isGood: true
  },
  {
    id: 29,
    metric: "Regulatory Compliance Rate",
    explanation: "Regulatory compliance rate shows adherence to industry regulations. Lower rate than industry average indicates potential legal risks.",
    companyValue: 92,
    industryAverage: 95,
    isGood: false
  },
  {
    id: 30,
    metric: "Market Expansion Rate",
    explanation: "Market expansion rate measures growth into new markets. Higher rate than industry average indicates successful geographic expansion.",
    companyValue: 15,
    industryAverage: 10,
    isGood: true
  }
];

export const GAME_CONSTANTS = {
  SAVE_KEY: "market_adventure_save",
  AUTO_SAVE_INTERVAL: 60000,
  XP_PER_LEVEL: 100,
  INITIAL_MONEY: 1,
  TICKETS_PER_10_CORRECT: 1,
  GAME_TIME_LIMIT: 60,
  QUESTIONS_PER_GAME: 10 // Number of questions shown per game
};

================
File: client/src/contexts/portfolio-context.tsx
================
import React, { createContext, useState, useContext, ReactNode, useEffect } from 'react';
import { StockData, PerformanceDetails, StabilityDetails, ValueDetails, MomentumDetails } from '@/lib/stock-data';
import { useToast } from '@/hooks/use-toast';
import { getIndustryAverages } from '@/lib/industry-data';
import { getAdvancedMetricScore, calculatePortfolioScore } from '@/lib/advanced-metric-scoring';

// Define types
export interface PortfolioHolding {
  stock: StockData;
  shares: number;
  value: number;
  purchasePrice: number;
  purchaseDate: string;
}

interface PortfolioContextProps {
  cash: number;
  holdings: PortfolioHolding[];
  portfolioValue: number;
  totalValue: number;
  version: number; // Add version property to trigger updates
  lastUpdated: number; // Timestamp for tracking updates
  portfolioMetrics: {
    performance: number;
    stability: number;
    value: number;
    momentum: number;
  };
  buyStock: (stock: StockData, amount: number) => void;
  sellStock: (stockId: string, shares: number) => void;
  calculateImpact: (stock: StockData, amount: number) => {
    currentMetrics: {
      performance: number;
      stability: number;
      value: number;
      momentum: number;
    };
    newMetrics: {
      performance: number;
      stability: number;
      value: number;
      momentum: number;
    };
    impact: {
      performance: number;
      stability: number;
      value: number;
      momentum: number;
    };
    industryAllocation: Record<string, { current: number; new: number }>;
  };
  isLoading: boolean;
}

// Create context
export const PortfolioContext = createContext<PortfolioContextProps | null>(null);

// Provider component
export function PortfolioProvider({ children }: { children: ReactNode }) {
  const { toast } = useToast();
  
  // State
  const [cash, setCash] = useState<number>(100);
  const [holdings, setHoldings] = useState<PortfolioHolding[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [version, setVersion] = useState<number>(1); // Add version counter for triggering updates
  const [lastUpdated, setLastUpdated] = useState<number>(Date.now()); // Timestamp for tracking updates
  
  // Derived state
  const portfolioValue = holdings.reduce((total, holding) => total + holding.value, 0);
  const totalValue = cash + portfolioValue;
  
  // Portfolio metrics
  const portfolioMetrics = {
    performance: calculatePortfolioMetric('performance'),
    stability: calculatePortfolioMetric('stability'),
    value: calculatePortfolioMetric('value'),
    momentum: calculatePortfolioMetric('momentum')
  };
  
  // Calculate individual portfolio metric score using the advanced 0-100 scale
  function calculatePortfolioMetric(metricName: "performance" | "stability" | "value" | "momentum"): number {
    if (holdings.length === 0) return 0; // Empty portfolio starts at 0
    
    // Use the new advanced scoring system from the imported function
    return calculatePortfolioScore(holdings, metricName);
  }
  
  // Helper to get numeric score from metric on a 0-100 scale
  function getMetricScore(stock: StockData, metricName: string): number {
    console.log(`\nCalculating ${metricName} score for ${stock.ticker} using advanced scoring system:`);
    
    if (metricName === 'performance' || metricName === 'stability' || 
        metricName === 'value' || metricName === 'momentum') {
      // Use the advanced scoring system for the main metric categories
      const score = getAdvancedMetricScore(stock, metricName as any);
      
      console.log(`- Final ${metricName} score (0-100 scale): ${score}`);
      
      return score;
    } else {
      // Fallback for any other metrics - convert string ratings to scores
      const metricData = stock.metrics[metricName as keyof typeof stock.metrics];
      const metricValue = metricData?.value || "";
      
      // Convert string rating to numeric score
      switch (metricValue) {
        case "Strong":
        case "High":
          return 90;
        case "Good":
          return 70;
        case "Fair":
        case "Average":
          return 50;
        case "Weak":
        case "Poor":
        case "Unstable":
          return 30;
        default:
          return 50; // Default middle score
      }
    }
  }
  
  // Buy a stock
  const buyStock = (stock: StockData, amount: number) => {
    setIsLoading(true);
    
    try {
      // Validate transaction
      if (amount <= 0) {
        throw new Error("Investment amount must be positive");
      }
      
      if (amount > cash) {
        throw new Error("Not enough cash available");
      }
      
      // Calculate shares
      const shares = amount / stock.price;
      
      // Update state
      setCash(prevCash => prevCash - amount);
      
      // Check if already holding this stock
      const existingHoldingIndex = holdings.findIndex(h => h.stock.ticker === stock.ticker);
      
      if (existingHoldingIndex >= 0) {
        // Update existing holding
        setHoldings(prevHoldings => {
          const updatedHoldings = [...prevHoldings];
          const existing = updatedHoldings[existingHoldingIndex];
          
          // Calculate new average purchase price
          const totalShares = existing.shares + shares;
          const totalCost = (existing.shares * existing.purchasePrice) + amount;
          const newAvgPrice = totalCost / totalShares;
          
          updatedHoldings[existingHoldingIndex] = {
            ...existing,
            shares: totalShares,
            value: totalShares * stock.price,
            purchasePrice: newAvgPrice
          };
          
          return updatedHoldings;
        });
      } else {
        // Add new holding
        setHoldings(prevHoldings => [
          ...prevHoldings,
          {
            stock,
            shares,
            value: amount,
            purchasePrice: stock.price,
            purchaseDate: new Date().toISOString().split('T')[0]
          }
        ]);
      }
      
      // Show success message
      toast({
        title: "Stock purchased",
        description: `You purchased ${shares.toFixed(4)} shares of ${stock.ticker} for $${amount.toFixed(2)}`,
        variant: "default",
      });
      
      // Update version and timestamp to trigger updates
      setVersion(prev => prev + 1);
      setLastUpdated(Date.now());
      console.log("Portfolio updated: version and timestamp updated after purchase");
    } catch (error) {
      // Handle errors
      toast({
        title: "Transaction failed",
        description: error instanceof Error ? error.message : "Unknown error occurred",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Sell a stock
  const sellStock = (stockId: string, sharesToSell: number) => {
    setIsLoading(true);
    
    try {
      // Find the holding
      const holdingIndex = holdings.findIndex(h => h.stock.ticker === stockId);
      
      if (holdingIndex === -1) {
        throw new Error("Stock not found in portfolio");
      }
      
      const holding = holdings[holdingIndex];
      
      // Validate shares
      if (sharesToSell <= 0) {
        throw new Error("Shares to sell must be positive");
      }
      
      if (sharesToSell > holding.shares) {
        throw new Error("Not enough shares to sell");
      }
      
      // Calculate sale amount
      const saleAmount = sharesToSell * holding.stock.price;
      
      // Update cash
      setCash(prevCash => prevCash + saleAmount);
      
      // Update holdings
      setHoldings(prevHoldings => {
        const updatedHoldings = [...prevHoldings];
        const remainingShares = holding.shares - sharesToSell;
        
        if (remainingShares > 0.0001) { // Account for floating point errors
          // Update holding
          updatedHoldings[holdingIndex] = {
            ...holding,
            shares: remainingShares,
            value: remainingShares * holding.stock.price
          };
        } else {
          // Remove holding completely
          updatedHoldings.splice(holdingIndex, 1);
        }
        
        return updatedHoldings;
      });
      
      // Show success message
      toast({
        title: "Stock sold",
        description: `You sold ${sharesToSell.toFixed(4)} shares of ${stockId} for $${saleAmount.toFixed(2)}`,
        variant: "default",
      });
      
      // Update version and timestamp to trigger updates
      setVersion(prev => prev + 1);
      setLastUpdated(Date.now());
      console.log("Portfolio updated: version and timestamp updated after sale");
    } catch (error) {
      // Handle errors
      toast({
        title: "Transaction failed",
        description: error instanceof Error ? error.message : "Unknown error occurred",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Calculate impact of adding a new stock
  const calculateImpact = (stock: StockData, amount: number) => {
    // Debug information
    console.log('---- PORTFOLIO IMPACT CALCULATION ----');
    console.log(`Adding ${stock.ticker} (${stock.industry}) with $${amount}`);
    
    // For first investment, set baseline metrics based on stock
    const hasExistingHoldings = holdings.length > 0;
    console.log('Has existing holdings:', hasExistingHoldings);
    
    // Calculate and log individual metric scores for this stock
    console.log(`Calculating raw scores for ${stock.ticker}:`);
    const performanceScore = getMetricScore(stock, 'performance');
    console.log(`- Performance score: ${performanceScore} (Raw data:`, stock.metrics.performance.details, ')');
    
    const stabilityScore = getMetricScore(stock, 'stability');
    console.log(`- Stability score: ${stabilityScore} (Raw data:`, stock.metrics.stability.details, ')');
    
    const valueScore = getMetricScore(stock, 'value');
    console.log(`- Value score: ${valueScore} (Raw data:`, stock.metrics.value.details, ')');
    
    const momentumScore = getMetricScore(stock, 'momentum');
    console.log(`- Momentum score: ${momentumScore} (Raw data:`, stock.metrics.momentum.details, ')');
    
    const stockMetricScore = {
      performance: performanceScore,
      stability: stabilityScore,
      value: valueScore,
      momentum: momentumScore
    };
    console.log(`Stock ${stock.ticker} overall scores:`, stockMetricScore);
    
    // Current metrics - use 0 for empty portfolio (0-100 scale)
    const currentMetrics = {
      performance: hasExistingHoldings ? portfolioMetrics.performance : 0,
      stability: hasExistingHoldings ? portfolioMetrics.stability : 0,
      value: hasExistingHoldings ? portfolioMetrics.value : 0,
      momentum: hasExistingHoldings ? portfolioMetrics.momentum : 0
    };
    console.log('Current portfolio metrics:', currentMetrics);
    
    // Create simulated portfolio with new stock
    const simulatedHoldings = [...holdings];
    const existingHoldingIndex = holdings.findIndex(h => h.stock.ticker === stock.ticker);
    
    if (existingHoldingIndex >= 0) {
      // Update existing holding in simulation
      const existing = simulatedHoldings[existingHoldingIndex];
      const shares = amount / stock.price;
      const totalShares = existing.shares + shares;
      
      simulatedHoldings[existingHoldingIndex] = {
        ...existing,
        shares: totalShares,
        value: totalShares * stock.price
      };
    } else {
      // Add new holding in simulation
      simulatedHoldings.push({
        stock,
        shares: amount / stock.price,
        value: amount,
        purchasePrice: stock.price,
        purchaseDate: new Date().toISOString().split('T')[0]
      });
    }
    
    // Calculate new metrics with debugging
    console.log('Calculating new portfolio metrics with this stock added:');
    
    let newPerformance, newStability, newValue, newMomentum;
    
    if (hasExistingHoldings) {
      console.log('Adding to existing portfolio - calculating weighted averages');
      newPerformance = calculateNewMetricScore('performance', simulatedHoldings, stock);
      newStability = calculateNewMetricScore('stability', simulatedHoldings, stock);
      newValue = calculateNewMetricScore('value', simulatedHoldings, stock);
      newMomentum = calculateNewMetricScore('momentum', simulatedHoldings, stock);
    } else {
      console.log('First investment - using stock metrics directly');
      newPerformance = stockMetricScore.performance;
      newStability = stockMetricScore.stability;
      newValue = stockMetricScore.value;
      newMomentum = stockMetricScore.momentum;
    }
    
    console.log('New portfolio metrics calculated:');
    console.log(`- Performance: ${newPerformance}`);
    console.log(`- Stability: ${newStability}`);
    console.log(`- Value: ${newValue}`);
    console.log(`- Momentum: ${newMomentum}`);
    
    const newMetrics = {
      performance: newPerformance,
      stability: newStability,
      value: newValue,
      momentum: newMomentum
    };
    
    // Calculate industry allocation (current and new)
    const currentTotal = Math.max(portfolioValue, 0.01); // Avoid division by zero
    const newTotal = currentTotal + amount;
    
    console.log(`Portfolio value: Current $${currentTotal} → New $${newTotal}`);
    
    const industries = new Set<string>();
    holdings.forEach(h => industries.add(h.stock.industry));
    industries.add(stock.industry);
    
    console.log('Industries in portfolio:', Array.from(industries));
    
    const industryAllocation: Record<string, {current: number, new: number}> = {};
    
    // Initialize with zeros
    Array.from(industries).forEach(industry => {
      industryAllocation[industry] = { current: 0, new: 0 };
    });
    
    // For first investment, set 100% allocation to new stock's industry
    if (!hasExistingHoldings) {
      console.log(`First investment: Setting 100% allocation to ${stock.industry}`);
      industryAllocation[stock.industry].new = 100;
    } else {
      console.log('Calculating industry allocations:');
      
      // Calculate current allocation
      holdings.forEach(holding => {
        const industry = holding.stock.industry;
        const allocation = (holding.value / currentTotal) * 100;
        industryAllocation[industry].current += allocation;
        console.log(`Current: ${industry} = $${holding.value.toFixed(2)} (${allocation.toFixed(1)}%)`);
      });
      
      // Calculate new allocation
      simulatedHoldings.forEach(holding => {
        const industry = holding.stock.industry;
        const allocation = (holding.value / newTotal) * 100;
        industryAllocation[industry].new += allocation;
        console.log(`New: ${industry} = $${holding.value.toFixed(2)} (${allocation.toFixed(1)}%)`);
      });
    }
    
    // Calculate impact - ensure small changes for first investment
    const performanceImpact = parseFloat((newMetrics.performance - currentMetrics.performance).toFixed(1));
    const stabilityImpact = parseFloat((newMetrics.stability - currentMetrics.stability).toFixed(1));
    const valueImpact = parseFloat((newMetrics.value - currentMetrics.value).toFixed(1));
    const momentumImpact = parseFloat((newMetrics.momentum - currentMetrics.momentum).toFixed(1));
    
    console.log('Impact on metrics:');
    console.log(`- Performance: ${currentMetrics.performance} → ${newMetrics.performance} (${performanceImpact > 0 ? '+' : ''}${performanceImpact})`);
    console.log(`- Stability: ${currentMetrics.stability} → ${newMetrics.stability} (${stabilityImpact > 0 ? '+' : ''}${stabilityImpact})`);
    console.log(`- Value: ${currentMetrics.value} → ${newMetrics.value} (${valueImpact > 0 ? '+' : ''}${valueImpact})`);
    console.log(`- Momentum: ${currentMetrics.momentum} → ${newMetrics.momentum} (${momentumImpact > 0 ? '+' : ''}${momentumImpact})`);
    
    const impact = {
      performance: performanceImpact,
      stability: stabilityImpact,
      value: valueImpact,
      momentum: momentumImpact
    };
    
    console.log('Final industry allocation:', industryAllocation);
    console.log('---- END CALCULATION ----');
    
    return {
      currentMetrics,
      newMetrics,
      impact,
      industryAllocation
    };
  };
  
  function calculateNewMetricScore(
    metricName: "performance" | "stability" | "value" | "momentum",
    simulatedHoldings: PortfolioHolding[],
    newStock: StockData
  ): number {
    console.log(`\nCalculating weighted ${metricName} score for portfolio with ${simulatedHoldings.length} holdings:`);
    
    // Use the advanced scoring system for combined portfolio scores
    const score = calculatePortfolioScore(simulatedHoldings, metricName);
    
    console.log(`Advanced portfolio ${metricName} score: ${score}`);
    
    return score;
  }
  
  // Context value
  const contextValue: PortfolioContextProps = {
    cash,
    holdings,
    portfolioValue,
    totalValue,
    version, // Include version counter in context
    lastUpdated, // Include timestamp
    portfolioMetrics,
    buyStock,
    sellStock,
    calculateImpact,
    isLoading
  };
  
  return (
    <PortfolioContext.Provider value={contextValue}>
      {children}
    </PortfolioContext.Provider>
  );
}

// Custom hook for using the context
export function usePortfolio() {
  const context = useContext(PortfolioContext);
  
  if (!context) {
    throw new Error('usePortfolio must be used within a PortfolioProvider');
  }
  
  return context;
}

================
File: client/src/contexts/user-progress-context.tsx
================
import { createContext, useContext, useState, ReactNode } from "react";
import { useAuth } from "@/hooks/use-auth";
import { useQuery, useMutation } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

interface UserProgressContextProps {
  getUserProgress: (stackId: number) => any;
  updateProgress: (stackId: number, currentCardIndex: number, completed: boolean, earnedXp: number) => void;
  isLoading: boolean;
  updateUserXp: (xpToAdd: number) => void;
}

const UserProgressContext = createContext<UserProgressContextProps | undefined>(undefined);

export function UserProgressProvider({ children }: { children: ReactNode }) {
  const { user } = useAuth();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  
  // Get all user progress
  const { data: userProgress, isLoading: isLoadingProgress } = useQuery({
    queryKey: ["/api/user-progress"],
    enabled: !!user,
  });
  
  // Update user progress mutation
  const updateProgressMutation = useMutation({
    mutationFn: async ({ stackId, data }: { stackId: number, data: any }) => {
      const res = await apiRequest("PATCH", `/api/user-progress/${stackId}`, data);
      return res.json();
    },
    onSuccess: (data, variables) => {
      queryClient.invalidateQueries({ queryKey: [`/api/user-progress/${variables.stackId}`] });
      queryClient.invalidateQueries({ queryKey: ["/api/user-progress"] });
      queryClient.invalidateQueries({ queryKey: ["/api/user-daily-progress"] });
      
      if (variables.data.completed) {
        toast({
          title: "Stack Completed",
          description: `You've earned ${variables.data.earnedXp} XP!`,
        });
      }
    },
    onError: (error) => {
      toast({
        title: "Error updating progress",
        description: "Please try again later",
        variant: "destructive",
      });
    }
  });
  
  const getUserProgress = (stackId: number) => {
    if (!userProgress) return null;
    return userProgress.find((progress: any) => progress.stackId === stackId);
  };
  
  const updateProgress = (stackId: number, currentCardIndex: number, completed: boolean, earnedXp: number) => {
    updateProgressMutation.mutate({
      stackId,
      data: {
        currentCardIndex,
        completed,
        earnedXp
      }
    });
  };
  
  const updateUserXp = (xpToAdd: number) => {
    // This is just for the UI state since the server will update the actual user XP
    queryClient.setQueryData(["/api/user"], (oldData: any) => {
      if (!oldData) return oldData;
      return {
        ...oldData,
        xp: oldData.xp + xpToAdd
      };
    });
  };
  
  return (
    <UserProgressContext.Provider value={{ 
      getUserProgress,
      updateProgress,
      isLoading: isLoadingProgress || isLoading || updateProgressMutation.isPending,
      updateUserXp
    }}>
      {children}
    </UserProgressContext.Provider>
  );
}

export function useUserProgress() {
  const context = useContext(UserProgressContext);
  if (context === undefined) {
    throw new Error("useUserProgress must be used within a UserProgressProvider");
  }
  return context;
}

================
File: client/src/hooks/use-auth.tsx
================
import { createContext, ReactNode, useContext } from "react";
import {
  useQuery,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { insertUserSchema, User as SelectUser, InsertUser } from "@shared/schema";
import { getQueryFn, apiRequest, queryClient } from "../lib/queryClient";
import { useToast } from "@/hooks/use-toast";

type AuthContextType = {
  user: SelectUser | null;
  isLoading: boolean;
  error: Error | null;
  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;
  logoutMutation: UseMutationResult<void, Error, void>;
  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;
  updateOnboardingMutation: UseMutationResult<SelectUser, Error, OnboardingData>;
};

type LoginData = Pick<InsertUser, "username" | "password">;

type OnboardingData = {
  experienceLevel: string;
  interests: string[];
  dailyGoal: number;
};

export const AuthContext = createContext<AuthContextType | null>(null);

export function AuthProvider({ children }: { children: ReactNode }) {
  const { toast } = useToast();
  
  // Mock user for testing purposes
  const mockUser: SelectUser = {
    id: 1,
    username: "investorpro",
    password: "",
    displayName: "Alex Investor",
    xp: 750,
    streakCount: 5,
    lastActive: new Date(),
    level: 3,
    dailyGoal: 5,
    interests: ["Tech", "Crypto", "ETFs"],
    experienceLevel: "intermediate",
    onboarded: true
  };
  
  // Use mock user instead of API call
  const {
    data: user,
    error,
    isLoading,
  } = useQuery<SelectUser | null, Error>({
    queryKey: ["/api/user"],
    queryFn: () => Promise.resolve(mockUser),
    // queryFn: getQueryFn({ on401: "returnNull" }), // Original API call
  });

  const loginMutation = useMutation({
    mutationFn: async (credentials: LoginData) => {
      const res = await apiRequest("POST", "/api/login", credentials);
      return await res.json();
    },
    onSuccess: (user: SelectUser) => {
      queryClient.setQueryData(["/api/user"], user);
      toast({
        title: "Login successful",
        description: `Welcome back, ${user.displayName}!`,
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Login failed",
        description: "Invalid username or password",
        variant: "destructive",
      });
    },
  });

  const registerMutation = useMutation({
    mutationFn: async (credentials: InsertUser) => {
      const res = await apiRequest("POST", "/api/register", credentials);
      return await res.json();
    },
    onSuccess: (user: SelectUser) => {
      queryClient.setQueryData(["/api/user"], user);
      toast({
        title: "Registration successful",
        description: `Welcome to Swipefolio, ${user.displayName}!`,
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Registration failed",
        description: error.message || "Username already exists",
        variant: "destructive",
      });
    },
  });

  const logoutMutation = useMutation({
    mutationFn: async () => {
      await apiRequest("POST", "/api/logout");
    },
    onSuccess: () => {
      queryClient.setQueryData(["/api/user"], null);
      toast({
        title: "Logged out",
        description: "You have been successfully logged out",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Logout failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });
  
  const updateOnboardingMutation = useMutation({
    mutationFn: async (data: OnboardingData) => {
      const res = await apiRequest("PATCH", "/api/user/onboarding", data);
      return await res.json();
    },
    onSuccess: (user: SelectUser) => {
      queryClient.setQueryData(["/api/user"], user);
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to update preferences",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  return (
    <AuthContext.Provider
      value={{
        user: user ?? null,
        isLoading,
        error,
        loginMutation,
        logoutMutation,
        registerMutation,
        updateOnboardingMutation,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}

================
File: client/src/hooks/use-game-state.ts
================
import { useState, useEffect } from 'react';
import type { GameState } from '@/types/game';

export function useGameState(initialState: Partial<GameState> = {}) {
  const [gameState, setGameState] = useState<GameState>({
    score: 0,
    level: 1,
    xp: 0,
    tickets: 0,
    lastSaved: Date.now(),
    ...initialState
  });

  // Auto-save functionality
  useEffect(() => {
    const saveInterval = setInterval(() => {
      setGameState(prev => ({
        ...prev,
        lastSaved: Date.now()
      }));
      localStorage.setItem('gameState', JSON.stringify(gameState));
    }, 60000);

    return () => clearInterval(saveInterval);
  }, [gameState]);

  // Load saved state on mount
  useEffect(() => {
    const savedState = localStorage.getItem('gameState');
    if (savedState) {
      setGameState(JSON.parse(savedState));
    }
  }, []);

  const addXP = (amount: number) => {
    setGameState(prev => {
      const newXP = prev.xp + amount;
      const newLevel = Math.floor(newXP / 100) + 1;
      return {
        ...prev,
        xp: newXP,
        level: newLevel
      };
    });
  };

  const addTickets = (amount: number) => {
    setGameState(prev => ({
      ...prev,
      tickets: prev.tickets + amount
    }));
  };

  const updateScore = (amount: number) => {
    setGameState(prev => ({
      ...prev,
      score: prev.score + amount
    }));
  };

  const resetGame = () => {
    setGameState({
      score: 0,
      level: 1,
      xp: 0,
      tickets: 0,
      lastSaved: Date.now()
    });
  };

  return {
    gameState,
    setGameState,
    addXP,
    addTickets,
    updateScore,
    resetGame
  };
}

================
File: client/src/hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: client/src/hooks/use-stock-data.tsx
================
import { useQuery } from "@tanstack/react-query";
import { getQueryFn } from "@/lib/queryClient";

// Interface for the real-time quote data
export interface RealTimeQuote {
  "01. symbol": string;
  "02. open": string;
  "03. high": string;
  "04. low": string;
  "05. price": string;
  "06. volume": string;
  "07. latest trading day": string;
  "08. previous close": string;
  "09. change": string;
  "10. change percent": string;
}

// Interface for a single intraday data point
export interface IntradayDataPoint {
  timestamp: string;
  open: number;
  high: number;
  low: number;
  close: number;
  volume: number;
}

// Interface for company overview data
export interface CompanyOverview {
  Symbol: string;
  AssetType: string;
  Name: string;
  Description: string;
  Exchange: string;
  Currency: string;
  Country: string;
  Sector: string;
  Industry: string;
  MarketCapitalization: string;
  PERatio: string;
  PEGRatio: string;
  BookValue: string;
  DividendPerShare: string;
  DividendYield: string;
  EPS: string;
  ProfitMargin: string;
  OperatingMarginTTM: string;
  ReturnOnAssetsTTM: string;
  ReturnOnEquityTTM: string;
  RevenueTTM: string;
  GrossProfitTTM: string;
  Beta: string;
  [key: string]: string | number; // Allow for additional properties from the API
}

/**
 * Hook to fetch real-time stock quote data
 * @param symbol Stock ticker symbol
 */
export function useStockQuote(symbol: string | null) {
  return useQuery<RealTimeQuote, Error>({
    queryKey: ['/api/stocks/quote', symbol],
    queryFn: getQueryFn({ on401: "throw" }),
    enabled: !!symbol,
    staleTime: 60000, // 1 minute
  });
}

/**
 * Hook to fetch intraday stock data
 * @param symbol Stock ticker symbol
 * @param interval Time interval between data points
 */
export function useIntradayData(symbol: string | null, interval: string = '5min') {
  return useQuery<IntradayDataPoint[], Error>({
    queryKey: ['/api/stocks/intraday', symbol, interval],
    queryFn: getQueryFn({ on401: "throw" }),
    enabled: !!symbol,
    staleTime: 60000, // 1 minute
  });
}

/**
 * Hook to fetch company overview data
 * @param symbol Stock ticker symbol
 */
export function useCompanyOverview(symbol: string | null) {
  return useQuery<CompanyOverview, Error>({
    queryKey: ['/api/stocks/overview', symbol],
    queryFn: getQueryFn({ on401: "throw" }),
    enabled: !!symbol,
    staleTime: 24 * 60 * 60 * 1000, // 24 hours - company info doesn't change frequently
  });
}

/**
 * Hook to search for stocks
 * @param keywords Search keywords
 */
export function useStockSearch(keywords: string) {
  return useQuery<any[], Error>({
    queryKey: ['/api/stocks/search', keywords],
    queryFn: getQueryFn({ on401: "throw" }),
    enabled: keywords.length > 0,
    staleTime: 24 * 60 * 60 * 1000, // 24 hours
  });
}

================
File: client/src/hooks/use-toast.ts
================
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: client/src/lib/advanced-metric-scoring.ts
================
import { 
  PerformanceDetails, 
  StabilityDetails, 
  ValueDetails, 
  MomentumDetails,
  StockData
} from './stock-data';
import { getIndustryAverages } from './industry-data';
import { marketAverages, getDividendConsistencyScore } from './market-averages';

// Normalize a value to be between 0 and 1
export const normalizeValue = (value: number): number => {
  return Math.min(1, Math.max(0, value));
};

// Calculate performance score (revenue growth, profit margin, return on capital)
export const calculatePerformanceScore = (
  stockMetrics: PerformanceDetails,
  industry: string
): number => {
  const industryAvgs = getIndustryAverages(industry).performance;

  // For debugging - log raw values
  console.log(`Performance calculation for stock in ${industry} industry:`);
  console.log(`- Revenue Growth: Stock ${stockMetrics.revenueGrowth}%, Industry ${industryAvgs.revenueGrowth}%, Market ${marketAverages.performance.revenueGrowth}%`);
  console.log(`- Profit Margin: Stock ${stockMetrics.profitMargin}%, Industry ${industryAvgs.profitMargin}%, Market ${marketAverages.performance.profitMargin}%`);
  console.log(`- Return on Capital: Stock ${stockMetrics.returnOnCapital}%, Industry ${industryAvgs.returnOnCapital}%, Market ${marketAverages.performance.returnOnCapital}%`);

  // Step 1: Calculate Stock/Industry ratios (normalized between 0-1)
  // For all performance metrics, higher is better
  const revGrowthSI = stockMetrics.revenueGrowth / industryAvgs.revenueGrowth;
  const profitMarginSI = stockMetrics.profitMargin / industryAvgs.profitMargin;
  const rocSI = stockMetrics.returnOnCapital / industryAvgs.returnOnCapital;

  // Normalize values between 0-1
  const revGrowthSINorm = normalizeValue(revGrowthSI);
  const profitMarginSINorm = normalizeValue(profitMarginSI);
  const rocSINorm = normalizeValue(rocSI);

  console.log(`- Rev Growth S/I: ${revGrowthSI.toFixed(2)}, normalized: ${revGrowthSINorm.toFixed(2)}`);
  console.log(`- Profit Margin S/I: ${profitMarginSI.toFixed(2)}, normalized: ${profitMarginSINorm.toFixed(2)}`);
  console.log(`- ROC S/I: ${rocSI.toFixed(2)}, normalized: ${rocSINorm.toFixed(2)}`);

  // Step 2: Calculate Industry/Market weightings (normalized between 0-1)
  // For all metrics in performance, use Industry/Market (higher is better)
  const revGrowthIM = industryAvgs.revenueGrowth / marketAverages.performance.revenueGrowth;
  const profitMarginIM = industryAvgs.profitMargin / marketAverages.performance.profitMargin;
  const rocIM = industryAvgs.returnOnCapital / marketAverages.performance.returnOnCapital;

  // Normalize values between 0-1
  const revGrowthIMNorm = normalizeValue(revGrowthIM);
  const profitMarginIMNorm = normalizeValue(profitMarginIM);
  const rocIMNorm = normalizeValue(rocIM);

  console.log(`- Rev Growth I/M: ${revGrowthIM.toFixed(2)}, normalized: ${revGrowthIMNorm.toFixed(2)}`);
  console.log(`- Profit Margin I/M: ${profitMarginIM.toFixed(2)}, normalized: ${profitMarginIMNorm.toFixed(2)}`);
  console.log(`- ROC I/M: ${rocIM.toFixed(2)}, normalized: ${rocIMNorm.toFixed(2)}`);

  // Step 3: Apply the weighted formula exactly as specified
  // Performance = 40% * (Rev Growth S/I norm) * (Rev Growth I/M norm) + 
  //               30% * (Profit Margin S/I norm) * (Profit Margin I/M norm) + 
  //               30% * (ROC S/I norm) * (ROC I/M norm)

  const revGrowthContribution = 0.4 * revGrowthSINorm * revGrowthIMNorm;
  const profitMarginContribution = 0.3 * profitMarginSINorm * profitMarginIMNorm;
  const rocContribution = 0.3 * rocSINorm * rocIMNorm;

  console.log(`- Rev Growth contribution: ${revGrowthContribution.toFixed(4)}`);
  console.log(`- Profit Margin contribution: ${profitMarginContribution.toFixed(4)}`);
  console.log(`- ROC contribution: ${rocContribution.toFixed(4)}`);

  const weightedScore = revGrowthContribution + profitMarginContribution + rocContribution;

  // Return final score on a 0-100 scale
  const finalScore = Math.min(100, Math.round(weightedScore * 100));
  console.log(`- Final performance score: ${finalScore}`);

  return finalScore;
};

// Calculate stability score (volatility, beta, dividend consistency)
export const calculateStabilityScore = (
  stockMetrics: StabilityDetails,
  industry: string
): number => {
  const industryAvgs = getIndustryAverages(industry).stability;

  // For debugging - log raw values
  console.log(`Stability calculation for stock in ${industry} industry:`);
  console.log(`- Volatility: Stock ${stockMetrics.volatility}%, Industry ${industryAvgs.volatility}%, Market ${marketAverages.stability.volatility}%`);
  console.log(`- Beta: Stock ${stockMetrics.beta}, Industry ${industryAvgs.beta}, Market ${marketAverages.stability.beta}`);
  console.log(`- Dividend Consistency: Stock ${stockMetrics.dividendConsistency}, Industry ${industryAvgs.dividendConsistency}`);

  // Step 1: Calculate Stock/Industry ratios with appropriate handling

  // For volatility, lower is better, so invert the ratio
  const volatilitySI = industryAvgs.volatility / stockMetrics.volatility;

  // For beta, closer to 1 is better - using the formula: (100 - (abs(1 - beta) * 50)) / 100
  const betaScore = (100 - (Math.abs(1 - stockMetrics.beta) * 50)) / 100;
  // No need to compare to industry - we directly use this normalized score

  // For dividend consistency, convert strings to numeric values
  const stockDivScore = getDividendConsistencyScore(stockMetrics.dividendConsistency);
  const industryDivScore = getDividendConsistencyScore(industryAvgs.dividendConsistency);
  const divConsistencySI = stockDivScore / industryDivScore;

  // Normalize all S/I ratios to 0-1
  const volatilitySINorm = normalizeValue(volatilitySI);
  const betaScoreNorm = normalizeValue(betaScore);
  const divConsistencySINorm = normalizeValue(divConsistencySI);

  console.log(`- Volatility S/I: ${volatilitySI.toFixed(2)}, normalized: ${volatilitySINorm.toFixed(2)}`);
  console.log(`- Beta Score: ${betaScore.toFixed(2)}, normalized: ${betaScoreNorm.toFixed(2)}`);
  console.log(`- Div Consistency S/I: ${divConsistencySI.toFixed(2)}, normalized: ${divConsistencySINorm.toFixed(2)}`);

  // Step 2: Calculate Industry/Market weightings
  // For volatility, lower is better, so invert the I/M ratio
  const volatilityIM = marketAverages.stability.volatility / industryAvgs.volatility;

  // For beta, use simple I/M ratio
  const betaIM = industryAvgs.beta / marketAverages.stability.beta;

  // For dividend consistency, use I/M ratio
  const divConsistencyIM = industryDivScore / marketAverages.stability.dividendConsistency;

  // Normalize all I/M ratios to 0-1
  const volatilityIMNorm = normalizeValue(volatilityIM);
  const betaIMNorm = normalizeValue(betaIM);
  const divConsistencyIMNorm = normalizeValue(divConsistencyIM);

  console.log(`- Volatility I/M: ${volatilityIM.toFixed(2)}, normalized: ${volatilityIMNorm.toFixed(2)}`);
  console.log(`- Beta I/M: ${betaIM.toFixed(2)}, normalized: ${betaIMNorm.toFixed(2)}`);
  console.log(`- Div Consistency I/M: ${divConsistencyIM.toFixed(2)}, normalized: ${divConsistencyIMNorm.toFixed(2)}`);

  // Step 3: Apply the weighted formula
  // Stability = 55% * (Volatility S/I norm) * (Volatility I/M norm) + 
  //             25% * (Beta score norm) * (Beta I/M norm) + 
  //             20% * (Div Consistency S/I norm) * (Div Consistency I/M norm)

  const volatilityContribution = 0.55 * volatilitySINorm * volatilityIMNorm;
  const betaContribution = 0.25 * betaScoreNorm * betaIMNorm;
  const divConsistencyContribution = 0.20 * divConsistencySINorm * divConsistencyIMNorm;

  console.log(`- Volatility contribution: ${volatilityContribution.toFixed(4)}`);
  console.log(`- Beta contribution: ${betaContribution.toFixed(4)}`);
  console.log(`- Div Consistency contribution: ${divConsistencyContribution.toFixed(4)}`);

  const weightedScore = volatilityContribution + betaContribution + divConsistencyContribution;

  // Return final score on a 0-100 scale
  const finalScore = Math.min(100, Math.round(weightedScore * 100));
  console.log(`- Final stability score: ${finalScore}`);

  return finalScore;
};

// Calculate value score (P/E ratio, P/B ratio, dividend yield)
export const calculateValueScore = (
  stockMetrics: ValueDetails,
  industry: string
): number => {
  const industryAvgs = getIndustryAverages(industry).value;

  // For debugging - log raw values
  console.log(`Value calculation for stock in ${industry} industry:`);
  console.log(`- P/E Ratio: Stock ${stockMetrics.peRatio}, Industry ${industryAvgs.peRatio}, Market ${marketAverages.value.peRatio}`);
  console.log(`- P/B Ratio: Stock ${stockMetrics.pbRatio}, Industry ${industryAvgs.pbRatio}, Market ${marketAverages.value.pbRatio}`);
  console.log(`- Dividend Yield: Stock ${stockMetrics.dividendYield}%, Industry ${industryAvgs.dividendYield}%, Market ${marketAverages.value.dividendYield}%`);

  // Step 1: Calculate Stock/Industry ratios

  // For P/E and P/B, lower is better, so invert the ratio
  const peRatioSI = industryAvgs.peRatio / stockMetrics.peRatio;
  const pbRatioSI = industryAvgs.pbRatio / stockMetrics.pbRatio;

  // For dividend yield, higher is better
  // Handle string dividend yield
  let divYield = stockMetrics.dividendYield;
  if (typeof divYield === 'string') {
    divYield = parseFloat(divYield.replace('%', ''));
  }

  const divYieldSI = !isNaN(divYield as number) 
    ? (divYield as number) / industryAvgs.dividendYield
    : 0;

  // Normalize all S/I ratios to 0-1
  const peRatioSINorm = normalizeValue(peRatioSI);
  const pbRatioSINorm = normalizeValue(pbRatioSI);
  const divYieldSINorm = normalizeValue(divYieldSI);

  console.log(`- P/E S/I: ${peRatioSI.toFixed(2)}, normalized: ${peRatioSINorm.toFixed(2)}`);
  console.log(`- P/B S/I: ${pbRatioSI.toFixed(2)}, normalized: ${pbRatioSINorm.toFixed(2)}`);
  console.log(`- Div Yield S/I: ${divYieldSI.toFixed(2)}, normalized: ${divYieldSINorm.toFixed(2)}`);

  // Step 2: Calculate Industry/Market weightings
  // For P/E and P/B, lower is better, so invert the I/M ratio
  const peRatioIM = marketAverages.value.peRatio / industryAvgs.peRatio;
  const pbRatioIM = marketAverages.value.pbRatio / industryAvgs.pbRatio;

  // For dividend yield, higher is better
  const divYieldIM = industryAvgs.dividendYield / marketAverages.value.dividendYield;

  // Normalize all I/M ratios to 0-1
  const peRatioIMNorm = normalizeValue(peRatioIM);
  const pbRatioIMNorm = normalizeValue(pbRatioIM);
  const divYieldIMNorm = normalizeValue(divYieldIM);

  console.log(`- P/E I/M: ${peRatioIM.toFixed(2)}, normalized: ${peRatioIMNorm.toFixed(2)}`);
  console.log(`- P/B I/M: ${pbRatioIM.toFixed(2)}, normalized: ${pbRatioIMNorm.toFixed(2)}`);
  console.log(`- Div Yield I/M: ${divYieldIM.toFixed(2)}, normalized: ${divYieldIMNorm.toFixed(2)}`);

  // Step 3: Apply the weighted formula
  // Value = 50% * (P/E S/I norm) * (P/E I/M norm) + 
  //         30% * (P/B S/I norm) * (P/B I/M norm) + 
  //         20% * (Div Yield S/I norm) * (Div Yield I/M norm)

  const peContribution = 0.5 * peRatioSINorm * peRatioIMNorm;
  const pbContribution = 0.3 * pbRatioSINorm * pbRatioIMNorm;
  const divYieldContribution = 0.2 * divYieldSINorm * divYieldIMNorm;

  console.log(`- P/E contribution: ${peContribution.toFixed(4)}`);
  console.log(`- P/B contribution: ${pbContribution.toFixed(4)}`);
  console.log(`- Div Yield contribution: ${divYieldContribution.toFixed(4)}`);

  const weightedScore = peContribution + pbContribution + divYieldContribution;

  // Return final score on a 0-100 scale
  const finalScore = Math.min(100, Math.round(weightedScore * 100));
  console.log(`- Final value score: ${finalScore}`);

  return finalScore;
};

// Calculate momentum score (3-month return, RSI)
export const calculateMomentumScore = (
  stockMetrics: MomentumDetails,
  industry: string
): number => {
  const industryAvgs = getIndustryAverages(industry).momentum;

  // For debugging - log raw values
  console.log(`Momentum calculation for stock in ${industry} industry:`);
  console.log(`- 3-Month Return: Stock ${stockMetrics.threeMonthReturn}%, Industry ${industryAvgs.threeMonthReturn}%, Market ${marketAverages.momentum.threeMonthReturn}%`);
  console.log(`- RSI: Stock ${stockMetrics.rsi}, Industry ${industryAvgs.rsi}, Market ${marketAverages.momentum.rsi}`);

  // Step 1: Calculate Stock/Industry ratios

  // For 3-month return, higher is better
  const threeMonthSI = stockMetrics.threeMonthReturn / industryAvgs.threeMonthReturn;

  // For RSI, using formula: (100 - (|industry RSI - Stock RSI| * 2)) / 100
  const rsiScore = (100 - (Math.abs(industryAvgs.rsi - stockMetrics.rsi) * 2)) / 100;

  // Normalize all S/I ratios to 0-1
  const threeMonthSINorm = normalizeValue(threeMonthSI);
  const rsiScoreNorm = normalizeValue(rsiScore);

  console.log(`- 3-Month S/I: ${threeMonthSI.toFixed(2)}, normalized: ${threeMonthSINorm.toFixed(2)}`);
  console.log(`- RSI Score: ${rsiScore.toFixed(2)}, normalized: ${rsiScoreNorm.toFixed(2)}`);

  // Step 2: Calculate Industry/Market weightings
  // For 3-month return, use Industry/Market
  const threeMonthIM = industryAvgs.threeMonthReturn / marketAverages.momentum.threeMonthReturn;

  // For RSI, use Industry/Market
  const rsiIM = industryAvgs.rsi / marketAverages.momentum.rsi;

  // Normalize all I/M ratios to 0-1
  const threeMonthIMNorm = normalizeValue(threeMonthIM);
  const rsiIMNorm = normalizeValue(rsiIM);

  console.log(`- 3-Month I/M: ${threeMonthIM.toFixed(2)}, normalized: ${threeMonthIMNorm.toFixed(2)}`);
  console.log(`- RSI I/M: ${rsiIM.toFixed(2)}, normalized: ${rsiIMNorm.toFixed(2)}`);

  // Step 3: Apply the weighted formula
  // Momentum = 50% * (3-Month S/I norm) * (3-Month I/M norm) + 
  //            50% * (RSI score norm) * (RSI I/M norm)

  const threeMonthContribution = 0.5 * threeMonthSINorm * threeMonthIMNorm;
  const rsiContribution = 0.5 * rsiScoreNorm * rsiIMNorm;

  console.log(`- 3-Month contribution: ${threeMonthContribution.toFixed(4)}`);
  console.log(`- RSI contribution: ${rsiContribution.toFixed(4)}`);

  const weightedScore = threeMonthContribution + rsiContribution;

  // Return final score on a 0-100 scale
  const finalScore = Math.min(100, Math.round(weightedScore * 100));
  console.log(`- Final momentum score: ${finalScore}`);

  return finalScore;
};

// Main function to get a metric score from a stock on a 0-100 scale
export const getAdvancedMetricScore = (
  stock: StockData,
  metricName: "performance" | "stability" | "value" | "momentum"
): number => {
  // Get detailed metrics for the specific category
  const metricDetails = stock.metrics[metricName].details;

  // Calculate score based on metric type
  switch (metricName) {
    case 'performance':
      return calculatePerformanceScore(metricDetails as PerformanceDetails, stock.industry);
    case 'stability':
      return calculateStabilityScore(metricDetails as StabilityDetails, stock.industry);
    case 'value':
      return calculateValueScore(metricDetails as ValueDetails, stock.industry);
    case 'momentum':
      return calculateMomentumScore(metricDetails as MomentumDetails, stock.industry);
    default:
      return 50; // Default score if unknown metric type
  }
};

// Calculate portfolio scores using weighted average based on holdings value
export const calculatePortfolioScore = (
  holdings: Array<{ stock: StockData, value: number }>,
  metricName: "performance" | "stability" | "value" | "momentum"
): number => {
  if (holdings.length === 0) return 0;

  let weightedScore = 0;
  let totalWeight = 0;

  holdings.forEach(holding => {
    const score = getAdvancedMetricScore(holding.stock, metricName);
    const weight = holding.value;

    weightedScore += score * weight;
    totalWeight += weight;
  });

  return totalWeight > 0 ? Math.round(weightedScore / totalWeight) : 0;
};

================
File: client/src/lib/industry-data.ts
================
// Industry average constants based on provided real estate data
export const industryAverages: Record<string, {
  performance: {
    revenueGrowth: number;
    profitMargin: number;
    returnOnCapital: number;
  };
  stability: {
    volatility: number;
    beta: number;
    dividendConsistency: "High" | "Medium" | "Low" | "N/A";
  };
  value: {
    peRatio: number;
    pbRatio: number;
    dividendYield: number;
  };
  momentum: {
    threeMonthReturn: number;
    relativePerformance: number;
    rsi: number;
  };
}> = {
  "Tech": {
    performance: {
      revenueGrowth: 12,
      profitMargin: 22,
      returnOnCapital: 14
    },
    stability: {
      volatility: 1.0,
      beta: 1.1,
      dividendConsistency: "Medium"
    },
    value: {
      peRatio: 22.0,
      pbRatio: 3.5,
      dividendYield: 0.9
    },
    momentum: {
      threeMonthReturn: 4.5,
      relativePerformance: 1.8,
      rsi: 55
    }
  },
  "ESG": {
    performance: {
      revenueGrowth: 8,
      profitMargin: 18,
      returnOnCapital: 12
    },
    stability: {
      volatility: 0.9,
      beta: 0.9,
      dividendConsistency: "Medium"
    },
    value: {
      peRatio: 18.0,
      pbRatio: 2.8,
      dividendYield: 1.5
    },
    momentum: {
      threeMonthReturn: 3.8,
      relativePerformance: 1.2,
      rsi: 53
    }
  },
  "Healthcare": {
    performance: {
      revenueGrowth: 15,
      profitMargin: 20,
      returnOnCapital: 13
    },
    stability: {
      volatility: 1.2,
      beta: 1.15,
      dividendConsistency: "Low"
    },
    value: {
      peRatio: 25.0,
      pbRatio: 4.0,
      dividendYield: 0.6
    },
    momentum: {
      threeMonthReturn: 5.0,
      relativePerformance: 2.0,
      rsi: 58
    }
  },
  "Financial Planning": {
    performance: {
      revenueGrowth: 7,
      profitMargin: 16,
      returnOnCapital: 15
    },
    stability: {
      volatility: 1.1,
      beta: 1.05,
      dividendConsistency: "High"
    },
    value: {
      peRatio: 17.0,
      pbRatio: 2.5,
      dividendYield: 2.2
    },
    momentum: {
      threeMonthReturn: 3.5,
      relativePerformance: 1.0,
      rsi: 51
    }
  },
  "Consumer": {
    performance: {
      revenueGrowth: 5,
      profitMargin: 12,
      returnOnCapital: 11
    },
    stability: {
      volatility: 0.95,
      beta: 0.9,
      dividendConsistency: "Medium"
    },
    value: {
      peRatio: 19.0,
      pbRatio: 2.5,
      dividendYield: 1.8
    },
    momentum: {
      threeMonthReturn: 3.0,
      relativePerformance: 1.0,
      rsi: 54
    }
  },
  "Real Estate": {
    performance: {
      revenueGrowth: 5.0,
      profitMargin: 25.0,
      returnOnCapital: 4.5
    },
    stability: {
      volatility: 8.6,
      beta: 0.8,
      dividendConsistency: "Medium"
    },
    value: {
      peRatio: 36.0,
      pbRatio: 2.5,
      dividendYield: 4.0
    },
    momentum: {
      threeMonthReturn: 2.0,
      relativePerformance: -5,
      rsi: 49
    }
  },
  // Default values for other categories
  "Default": {
    performance: {
      revenueGrowth: 7,
      profitMargin: 15,
      returnOnCapital: 12
    },
    stability: {
      volatility: 1.0,
      beta: 1.0,
      dividendConsistency: "Medium"
    },
    value: {
      peRatio: 18.0,
      pbRatio: 2.5,
      dividendYield: 1.5
    },
    momentum: {
      threeMonthReturn: 3.5,
      relativePerformance: 1.2,
      rsi: 52
    }
  }
};

// Helper to get industry averages for a specific industry or default if not found
export const getIndustryAverages = (industry: string) => {
  return industryAverages[industry] || industryAverages["Real Estate"];
};

// Helper functions to return ratings based on industry averages
import { PerformanceDetails, StabilityDetails, ValueDetails, MomentumDetails } from './stock-data';

// Define the functions locally for now
// These functions are responsible for calculating the scores and comparison indicators for metrics
function calculateCategoryScore(metricName: string, metrics: any, industryAvgs: any): {
  score: number;  // Average score between 0-2
  rating: string; // "Good", "Average", "Poor"
  color: string;  // "green", "yellow", "red"
} {
  let metricScores: number[] = [];
  
  switch (metricName) {
    case 'performance': {
      // Revenue Growth Score
      if (metrics.revenueGrowth > industryAvgs.revenueGrowth * 1.1) {
        metricScores.push(2); // Good
      } else if (metrics.revenueGrowth < industryAvgs.revenueGrowth * 0.9) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // Profit Margin Score
      if (metrics.profitMargin > industryAvgs.profitMargin * 1.1) {
        metricScores.push(2); // Good
      } else if (metrics.profitMargin < industryAvgs.profitMargin * 0.9) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // Return on Capital Score
      if (metrics.returnOnCapital > industryAvgs.returnOnCapital * 1.1) {
        metricScores.push(2); // Good
      } else if (metrics.returnOnCapital < industryAvgs.returnOnCapital * 0.9) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      break;
    }
    
    case 'stability': {
      // Volatility Score (lower is better)
      if (metrics.volatility < industryAvgs.volatility * 0.9) {
        metricScores.push(2); // Good
      } else if (metrics.volatility > industryAvgs.volatility * 1.1) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // Beta Score (closer to 1 is better)
      const betaDiff = Math.abs(metrics.beta - 1);
      const avgBetaDiff = Math.abs(industryAvgs.beta - 1);
      if (betaDiff < avgBetaDiff * 0.9) {
        metricScores.push(2); // Good
      } else if (betaDiff > avgBetaDiff * 1.1) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // Dividend Consistency Score
      if (metrics.dividendConsistency === "Good") {
        metricScores.push(2); // Good
      } else if (metrics.dividendConsistency === "Medium") {
        metricScores.push(1); // Average
      } else {
        metricScores.push(0); // Poor (Low or N/A)
      }
      break;
    }
    
    case 'value': {
      // PE Ratio Score (lower is better)
      if (metrics.peRatio < industryAvgs.peRatio * 0.9) {
        metricScores.push(2); // Good
      } else if (metrics.peRatio > industryAvgs.peRatio * 1.1) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // PB Ratio Score (lower is better)
      if (metrics.pbRatio < industryAvgs.pbRatio * 0.9) {
        metricScores.push(2); // Good
      } else if (metrics.pbRatio > industryAvgs.pbRatio * 1.1) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // Dividend Yield Score (higher is better)
      const divYield = typeof metrics.dividendYield === 'string' 
        ? parseFloat(metrics.dividendYield.replace('%', '')) 
        : metrics.dividendYield;
      
      if (divYield > industryAvgs.dividendYield * 1.1) {
        metricScores.push(2); // Good
      } else if (divYield < industryAvgs.dividendYield * 0.9) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      break;
    }
    
    case 'momentum': {
      // Three Month Return Score
      if (metrics.threeMonthReturn > industryAvgs.threeMonthReturn * 1.1) {
        metricScores.push(2); // Good
      } else if (metrics.threeMonthReturn < industryAvgs.threeMonthReturn * 0.9) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // Relative Performance Score
      if (metrics.relativePerformance > industryAvgs.relativePerformance * 1.1) {
        metricScores.push(2); // Good
      } else if (metrics.relativePerformance < industryAvgs.relativePerformance * 0.9) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // RSI Score (optimal range 50-70)
      if (metrics.rsi >= 50 && metrics.rsi <= 70) {
        metricScores.push(2); // Good
      } else if (metrics.rsi < 40 || metrics.rsi > 75) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      break;
    }
    
    default:
      // Default to all average if unknown metric type
      metricScores = [1, 1, 1];
  }
  
  // Calculate average score
  const avgScore = metricScores.reduce((sum, score) => sum + score, 0) / metricScores.length;
  
  // Determine rating based on average score
  let rating: string;
  let color: string;
  
  if (avgScore >= 1.6) {
    rating = "Good";
    color = "green";
  } else if (avgScore >= 0.8) {
    rating = "Average";
    color = "yellow";
  } else {
    rating = "Poor";
    color = "red";
  }
  
  return {
    score: avgScore,
    rating,
    color
  };
}

// Get comparison status (better, similar, worse)
function getComparisonStatus(value: number | string, industry: number | string, 
                                isLowerBetter: boolean = false): "green" | "yellow" | "red" {
  // Handle string values
  if (typeof value === 'string' || typeof industry === 'string') {
    return "yellow"; // Default to neutral for string comparisons
  }
  
  // Handle numeric values
  if (isLowerBetter) {
    // For metrics where lower is better (like volatility, PE ratio)
    if (value < industry * 0.9) return "green";
    if (value > industry * 1.1) return "red";
    return "yellow";
  } else {
    // For metrics where higher is better (like revenue growth)
    if (value > industry * 1.1) return "green";
    if (value < industry * 0.9) return "red";
    return "yellow";
  }
}

// Get comparison symbol
function getComparisonSymbol(value: number | string, industry: number | string, 
                            isLowerBetter: boolean = false): "<" | "=" | ">" {
  // Handle string values
  if (typeof value === 'string' || typeof industry === 'string') {
    return "="; // Default for string comparisons
  }
  
  // Handle numeric values with 5% threshold for equality
  const ratio = value / industry;
  
  if (isLowerBetter) {
    // For metrics where lower is better
    if (ratio < 0.95) return "<"; // Value is less than industry (good)
    if (ratio > 1.05) return ">"; // Value is greater than industry (bad)
    return "="; // Approximately equal
  } else {
    // For metrics where higher is better
    if (ratio > 1.05) return ">"; // Value is greater than industry (good)
    if (ratio < 0.95) return "<"; // Value is less than industry (bad)
    return "="; // Approximately equal
  }
}

// Helper to generate metric ratings based on values compared to industry averages
export const getMetricRating = (
  metricName: 'performance' | 'stability' | 'value' | 'momentum',
  metrics: PerformanceDetails | StabilityDetails | ValueDetails | MomentumDetails,
  industryAvgs: any
): { value: string; color: string; explanation: string } => {
  // Use the new scoring system to calculate category score
  const categoryScore = calculateCategoryScore(metricName, metrics, industryAvgs);
  
  let explanation = "";
  
  switch (metricName) {
    case 'performance': {
      const perfMetrics = metrics as PerformanceDetails;
      const perfAvgs = industryAvgs as typeof industryAverages["Default"]["performance"];
      
      if (categoryScore.rating === "Good") {
        explanation = `Based on revenue growth of ${perfMetrics.revenueGrowth}% (Industry: ${perfAvgs.revenueGrowth}%), profit margins of ${perfMetrics.profitMargin}% (Industry: ${perfAvgs.profitMargin}%), and return on invested capital of ${perfMetrics.returnOnCapital}% (Industry: ${perfAvgs.returnOnCapital}%) over the past 3 years. This company's performance metrics rank in the top quartile of its industry peers, showing exceptional operational execution. Strong performance indicates the company is effectively growing revenue while maintaining healthy margins and efficient capital use.`;
      } else if (categoryScore.rating === "Poor") {
        explanation = `Based on revenue growth of ${perfMetrics.revenueGrowth}% (Industry: ${perfAvgs.revenueGrowth}%), profit margins of ${perfMetrics.profitMargin}% (Industry: ${perfAvgs.profitMargin}%), and return on invested capital of ${perfMetrics.returnOnCapital}% (Industry: ${perfAvgs.returnOnCapital}%) over the past 3 years. This company's performance metrics fall below industry benchmarks, indicating challenges in execution. Low performance suggests the company is facing headwinds in growing revenue or maintaining profitability compared to peers.`;
      } else {
        explanation = `Based on revenue growth of ${perfMetrics.revenueGrowth}% (Industry: ${perfAvgs.revenueGrowth}%), profit margins of ${perfMetrics.profitMargin}% (Industry: ${perfAvgs.profitMargin}%), and return on invested capital of ${perfMetrics.returnOnCapital}% (Industry: ${perfAvgs.returnOnCapital}%) over the past 3 years. This company's performance metrics are in line with industry averages, showing competent operational execution. Fair performance suggests the company is growing steadily but may have opportunities to improve efficiency or scale.`;
      }
      break;
    }
      
    case 'stability': {
      const stabMetrics = metrics as StabilityDetails;
      const stabAvgs = industryAvgs as typeof industryAverages["Default"]["stability"];
      
      if (categoryScore.rating === "Good") {
        explanation = `With volatility of ${stabMetrics.volatility} (Industry: ${stabAvgs.volatility}), beta of ${stabMetrics.beta} (Industry: ${stabAvgs.beta}), and ${stabMetrics.dividendConsistency} dividend consistency, this stock shows strong stability characteristics. Low volatility suggests the stock experiences less dramatic price swings than peers during market fluctuations. A beta near 1.0 indicates price movements that are well-aligned with broader market trends but not excessively reactive.`;
      } else if (categoryScore.rating === "Poor") {
        explanation = `With volatility of ${stabMetrics.volatility} (Industry: ${stabAvgs.volatility}), beta of ${stabMetrics.beta} (Industry: ${stabAvgs.beta}), and ${stabMetrics.dividendConsistency} dividend consistency, this stock shows concerning stability characteristics. Higher volatility means sharper price movements during market fluctuations. The beta value indicates the stock has a tendency to make exaggerated moves compared to the broader market, potentially exposing investors to higher risk during downturns.`;
      } else {
        explanation = `With volatility of ${stabMetrics.volatility} (Industry: ${stabAvgs.volatility}), beta of ${stabMetrics.beta} (Industry: ${stabAvgs.beta}), and ${stabMetrics.dividendConsistency} dividend consistency, this stock shows average stability characteristics. Its price movements generally follow market patterns with moderate predictability. The stock typically doesn't experience extreme swings beyond what would be expected given market conditions, making it relatively manageable for most investment strategies.`;
      }
      break;
    }
      
    case 'value': {
      const valMetrics = metrics as ValueDetails;
      const valAvgs = industryAvgs as typeof industryAverages["Default"]["value"];
      
      if (categoryScore.rating === "Good") {
        explanation = `With a P/E ratio of ${valMetrics.peRatio} (Industry: ${valAvgs.peRatio}), P/B ratio of ${valMetrics.pbRatio} (Industry: ${valAvgs.pbRatio}), and dividend yield of ${valMetrics.dividendYield === "N/A" ? "N/A" : valMetrics.dividendYield + "%"} (Industry: ${valAvgs.dividendYield}%), this stock appears undervalued compared to industry peers. The lower P/E and P/B ratios suggest you're paying less for each dollar of earnings and book value than for similar companies. This could indicate a potential buying opportunity if the company's fundamentals remain sound.`;
      } else if (categoryScore.rating === "Poor") {
        explanation = `With a P/E ratio of ${valMetrics.peRatio} (Industry: ${valAvgs.peRatio}), P/B ratio of ${valMetrics.pbRatio} (Industry: ${valAvgs.pbRatio}), and dividend yield of ${valMetrics.dividendYield === "N/A" ? "N/A" : valMetrics.dividendYield + "%"} (Industry: ${valAvgs.dividendYield}%), this stock appears relatively expensive compared to industry peers. The higher P/E and P/B ratios indicate you're paying a premium for each dollar of earnings and book value relative to similar companies. This valuation likely reflects high growth expectations or other positive factors, but it also increases the risk of disappointment.`;
      } else {
        explanation = `With a P/E ratio of ${valMetrics.peRatio} (Industry: ${valAvgs.peRatio}), P/B ratio of ${valMetrics.pbRatio} (Industry: ${valAvgs.pbRatio}), and dividend yield of ${valMetrics.dividendYield === "N/A" ? "N/A" : valMetrics.dividendYield + "%"} (Industry: ${valAvgs.dividendYield}%), this stock is fairly valued compared to industry peers. The valuation metrics suggest the market is pricing this company in line with similar businesses, reflecting a reasonable balance between risk and potential return. This typically represents a sensible entry point for investors who believe in the company's prospects.`;
      }
      break;
    }
      
    case 'momentum': {
      const momMetrics = metrics as MomentumDetails;
      const momAvgs = industryAvgs as typeof industryAverages["Default"]["momentum"];
      
      if (categoryScore.rating === "Good") {
        explanation = `With a 3-month return of ${momMetrics.threeMonthReturn}% (Industry: ${momAvgs.threeMonthReturn}%), relative performance of ${momMetrics.relativePerformance}% vs. market, and RSI of ${momMetrics.rsi}, this stock is demonstrating strong positive momentum. The price trend shows accelerating strength compared to both industry peers and the broader market. This suggests growing investor confidence and potential continuation of the upward trend in the near term.`;
      } else if (categoryScore.rating === "Poor") {
        explanation = `With a 3-month return of ${momMetrics.threeMonthReturn}% (Industry: ${momAvgs.threeMonthReturn}%), relative performance of ${momMetrics.relativePerformance}% vs. market, and RSI of ${momMetrics.rsi}, this stock is showing weak momentum. The price action is trailing behind both industry peers and broader market benchmarks. This may indicate diminishing investor interest or confidence in the company's near-term prospects. An RSI ${momMetrics.rsi < 45 ? "below 45 suggests the stock may be oversold" : "above 70 suggests the stock may be overbought"}.`;
      } else {
        explanation = `With a 3-month return of ${momMetrics.threeMonthReturn}% (Industry: ${momAvgs.threeMonthReturn}%), relative performance of ${momMetrics.relativePerformance}% vs. market, and RSI of ${momMetrics.rsi}, this stock is showing moderate momentum. The price movement is generally in line with industry peers and broader market trends. The balanced RSI suggests the stock is neither significantly overbought nor oversold, indicating a relatively stable price trajectory in the recent period.`;
      }
      break;
    }
      
    default:
      explanation = "Insufficient data to provide a detailed analysis.";
  }
  
  // Map ratings from our new scoring system to traditional rating values
  let ratingValue = "";
  switch(metricName) {
    case 'performance':
      ratingValue = categoryScore.rating === "Good" ? "High" : 
                    categoryScore.rating === "Poor" ? "Low" : "Fair";
      break;
    case 'stability':
      ratingValue = categoryScore.rating === "Good" ? "High" : 
                    categoryScore.rating === "Poor" ? "Unstable" : "Fair";
      break;
    case 'value':
      ratingValue = categoryScore.rating === "Good" ? "Good" : 
                    categoryScore.rating === "Poor" ? "Poor" : "Fair";
      break;
    case 'momentum':
      ratingValue = categoryScore.rating === "Good" ? "Strong" : 
                    categoryScore.rating === "Poor" ? "Weak" : "Fair";
      break;
    default:
      ratingValue = "Fair";
  }
  
  return { 
    value: ratingValue, 
    color: categoryScore.color, 
    explanation 
  };
};

// Export helper functions for use in other components
export { getComparisonStatus, getComparisonSymbol };

================
File: client/src/lib/market-averages.ts
================
// Market average constants to normalize industry data
export const marketAverages = {
  performance: {
    revenueGrowth: 7, // 7%
    profitMargin: 12, // 12%
    returnOnCapital: 12 // 12%
  },
  stability: {
    volatility: 15, // 15%
    beta: 1, // Beta of 1 (market average by definition)
    dividendConsistency: 75 // 75 (normalized, where 100 is "High", 75 is "Good", 50 is "Medium", 25 is "Poor")
  },
  value: {
    peRatio: 16, // P/E of 16x
    pbRatio: 3, // P/B of 3x
    dividendYield: 2.5 // 2.50%
  },
  momentum: {
    threeMonthReturn: 3, // 3%
    relativePerformance: 0, // 0 (market average by definition)
    rsi: 50 // RSI of 50 (neutral by definition)
  }
};

// Helper to convert string dividend consistency to numeric value
export const getDividendConsistencyScore = (consistency: string): number => {
  switch (consistency.toLowerCase()) {
    case 'high':
      return 100;
    case 'good':
      return 75;
    case 'medium':
      return 50;
    case 'low':
    case 'poor':
      return 25;
    default:
      return 0; // N/A or undefined
  }
};

================
File: client/src/lib/protected-route.tsx
================
import { useAuth } from "@/hooks/use-auth";
import { Loader2 } from "lucide-react";
import { Redirect, Route } from "wouter";

export function ProtectedRoute({
  path,
  component: Component,
}: {
  path: string;
  component: () => React.JSX.Element;
}) {
  const { user, isLoading } = useAuth();

  if (isLoading) {
    return (
      <Route path={path}>
        <div className="flex items-center justify-center min-h-screen">
          <Loader2 className="h-8 w-8 animate-spin text-primary" />
        </div>
      </Route>
    );
  }

  if (!user) {
    return (
      <Route path={path}>
        <Redirect to="/auth" />
      </Route>
    );
  }
  
  // Check if user has completed onboarding
  if (path !== "/onboarding" && !user.onboarded) {
    return (
      <Route path={path}>
        <Redirect to="/onboarding" />
      </Route>
    );
  }

  return <Route path={path} component={Component} />;
}

================
File: client/src/lib/queryClient.ts
================
import { QueryClient, QueryFunction } from "@tanstack/react-query";

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    throw new Error(`${res.status}: ${text}`);
  }
}

export async function apiRequest(
  method: string,
  url: string,
  data?: unknown | undefined,
): Promise<Response> {
  const res = await fetch(url, {
    method,
    headers: data ? { "Content-Type": "application/json" } : {},
    body: data ? JSON.stringify(data) : undefined,
    credentials: "include",
  });

  await throwIfResNotOk(res);
  return res;
}

type UnauthorizedBehavior = "returnNull" | "throw";
export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    // Extract base URL (first element) and parameters (remaining elements)
    const baseUrl = queryKey[0] as string;
    const params = queryKey.slice(1);
    
    // Construct URL with query parameters if needed
    let url = baseUrl;
    if (params.length > 0 && params[0] !== undefined && params[0] !== null) {
      // If baseUrl contains path parameters, assume first param is for path
      if (baseUrl.includes('/:')) {
        url = baseUrl.replace(/\/:[^/]+/, `/${params[0]}`);
        
        // Add remaining params as query parameters if any
        if (params.length > 1) {
          const searchParams = new URLSearchParams();
          for (let i = 1; i < params.length; i++) {
            if (params[i] !== undefined && params[i] !== null) {
              searchParams.append(`param${i}`, params[i] as string);
            }
          }
          if ([...searchParams].length > 0) {
            url += `?${searchParams.toString()}`;
          }
        }
      } else {
        // No path parameters, use query string format for all params
        const searchParams = new URLSearchParams();
        searchParams.append('symbol', params[0] as string);
        
        // Add additional parameters if any
        for (let i = 1; i < params.length; i++) {
          if (params[i] !== undefined && params[i] !== null) {
            if (i === 1 && baseUrl.includes('/intraday')) {
              // For intraday endpoint, second param is interval
              searchParams.append('interval', params[i] as string);
            } else {
              searchParams.append(`param${i}`, params[i] as string);
            }
          }
        }
        url += `?${searchParams.toString()}`;
      }
    }
    
    const res = await fetch(url, {
      credentials: "include",
    });

    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      return null;
    }

    await throwIfResNotOk(res);
    return await res.json();
  };

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});

================
File: client/src/lib/stock-analysis-data.ts
================
// This file contains hardcoded overall analysis data for stocks

const realEstateAnalysis: Record<string, string> = {
  "PLD": "Prologis is well-positioned in the logistics real estate sector, benefiting from e-commerce growth and supply chain modernization. Their high-quality portfolio in key markets provides stable income and growth potential.",
};

const healthcareAnalysis: Record<string, string> = {
};

export const getStockAnalysis = (ticker: string, industry: string): string => {
  if (industry === "Real Estate") {
    return realEstateAnalysis[ticker] || "";
  }

  if (industry === "Healthcare") {
    return healthcareAnalysis[ticker] || "";
  }

  return "";
};

================
File: client/src/lib/stock-data.ts
================
// Define the detail types for each metric category
export interface PerformanceDetails {
  revenueGrowth: number;
  profitMargin: number;
  returnOnCapital: number;
  // Individual metric 1-liners
  revenueGrowthExplanation?: string;
  profitMarginExplanation?: string;
  returnOnCapitalExplanation?: string;
}

export interface StabilityDetails {
  volatility: number;
  beta: number;
  dividendConsistency: string;
  // Individual metric 1-liners
  volatilityExplanation?: string;
  betaExplanation?: string;
  dividendConsistencyExplanation?: string;
}

export interface ValueDetails {
  peRatio: number;
  pbRatio: number;
  dividendYield: number | string;
  // Individual metric 1-liners
  peRatioExplanation?: string;
  pbRatioExplanation?: string;
  dividendYieldExplanation?: string;
}

export interface MomentumDetails {
  threeMonthReturn: number;
  relativePerformance: number;
  rsi: number;
  // Individual metric 1-liners
  threeMonthReturnExplanation?: string;
  relativePerformanceExplanation?: string;
  rsiExplanation?: string;
}

export interface StockData {
  name: string;
  ticker: string;
  price: number;
  change: number;
  rating: number;
  smartScore?: string;
  description: string;
  oneYearReturn?: string; // 1-year return percentage (e.g., "13.27%")
  predictedPrice?: string; // Predicted future price (e.g., "$128.79")
  metrics: {
    performance: {
      value: string;
      color: string;
      details: PerformanceDetails;
      explanation: string;
    };
    stability: {
      value: string;
      color: string;
      details: StabilityDetails;
      explanation: string;
    };
    value: {
      value: string;
      color: string;
      details: ValueDetails;
      explanation: string;
    };
    momentum: {
      value: string;
      color: string;
      details: MomentumDetails;
      explanation: string;
    };
  };
  synopsis: {
    price: string;
    company: string;
    role: string;
  };
  overallAnalysis: string;
  chartData: number[];
  industry: string;
}

const hardcodedStocks: Record<string, StockData[]> = {
  "Healthcare": [
    {
      name: "Stryker Corporation",
      ticker: "SYK",
      price: 345.68,
      change: 1.85,
      rating: 4.5,
      smartScore: "High",
      description: "Leading manufacturer of medical technologies including orthopaedic implants, surgical equipment, and neurotechnology products.",
      metrics: {
        performance: { 
          value: "Strong", 
          color: "green",
          details: {
            revenueGrowth: 13.5,
            profitMargin: 21.2,
            returnOnCapital: 14.8
          },
          explanation: "Stryker shows exceptional performance with 13.5% revenue growth, nearly matching the healthcare sector average of 15%. Its profit margin of 21.2% slightly exceeds the industry benchmark of 20%, while its outstanding 14.8% return on capital surpasses the 13% industry standard, demonstrating efficient capital deployment in high-value medical technology."
        },
        stability: { 
          value: "High", 
          color: "green",
          details: {
            volatility: 0.95,
            beta: 1.0,
            dividendConsistency: "High"
          },
          explanation: "Stryker offers strong stability with lower volatility (0.95) than the healthcare industry average (1.2). Its beta of 1.0 indicates market-neutral sensitivity, while high dividend consistency provides reliable income. This stability stems from diversified product lines and recurring revenue from consumables and service contracts."
        },
        value: { 
          value: "Fair", 
          color: "yellow",
          details: {
            peRatio: 24.2,
            pbRatio: 3.8,
            dividendYield: 0.8
          },
          explanation: "Stryker trades at a slight discount with a PE ratio of 24.2 versus the healthcare industry average of 25.0, offering reasonable value. The price-to-book ratio of 3.8 is slightly below the industry's 4.0. Its dividend yield of 0.8% exceeds the sector's 0.6%, providing a small income advantage while still prioritizing growth reinvestment."
        },
        momentum: { 
          value: "Strong", 
          color: "green",
          details: {
            threeMonthReturn: 7.2,
            relativePerformance: 2.2,
            rsi: 60
          },
          explanation: "Stryker shows strong price momentum with a three-month return of 7.2%, significantly outperforming the healthcare sector average of 5.0%. Its relative performance of 2.2 indicates substantial outperformance versus peers. With an RSI of 60, the stock shows solid buying interest while maintaining room for continued appreciation."
        }
      },
      synopsis: {
        price: "Showing steady appreciation amid positive market sentiment and sector rotation",
        company: "Stryker's surgical robotics platform gaining market share in orthopedic procedures",
        role: "Core medical technology holding with balanced growth and stability characteristics"
      },
      overallAnalysis: "A high-quality medical device company benefiting from technological advancements and strong market positioning. Offers a balanced opportunity with above-average growth, defensive characteristics, and reliable income.",
      chartData: [340.2, 341.5, 342.3, 341.8, 342.5, 343.2, 343.8, 344.2, 344.7, 345.1, 345.4, 345.68],
      industry: "Healthcare"
    },
    {
      name: "ResMed Inc.",
      ticker: "RMD",
      price: 194.25,
      change: -0.75,
      rating: 3.9,
      smartScore: "Above Average",
      description: "Global leader in cloud-connected medical devices for sleep apnea, COPD, and other chronic respiratory conditions.",
      metrics: {
        performance: { 
          value: "Good", 
          color: "green",
          details: {
            revenueGrowth: 12.8,
            profitMargin: 23.5,
            returnOnCapital: 15.5
          },
          explanation: "ResMed demonstrates strong performance with 12.8% revenue growth, approaching the healthcare sector average of 15%. Its excellent profit margin of 23.5% exceeds the industry benchmark of 20%, while its outstanding 15.5% return on capital surpasses the 13% industry standard, reflecting efficiency in its specialized respiratory care business."
        },
        stability: { 
          value: "Fair", 
          color: "yellow",
          details: {
            volatility: 1.1,
            beta: 1.05,
            dividendConsistency: "Medium"
          },
          explanation: "ResMed offers moderate stability with slightly lower volatility (1.1) than the healthcare industry average (1.2). Its beta of 1.05 indicates near-market-neutral sensitivity. Medium dividend consistency reflects a balanced approach to shareholder returns while maintaining investment in growth initiatives."
        },
        value: { 
          value: "Fair", 
          color: "yellow",
          details: {
            peRatio: 23.5,
            pbRatio: 3.6,
            dividendYield: 0.9
          },
          explanation: "ResMed trades at a modest discount with a PE ratio of 23.5 versus the healthcare industry average of 25.0. The price-to-book ratio of 3.6 is below the industry's 4.0, suggesting good value. Its dividend yield of 0.9% exceeds the sector's 0.6%, providing slightly better income while still prioritizing growth initiatives."
        },
        momentum: { 
          value: "Fair", 
          color: "yellow",
          details: {
            threeMonthReturn: 2.8,
            relativePerformance: -2.2,
            rsi: 49
          },
          explanation: "ResMed shows moderate momentum with a three-month return of 2.8%, underperforming the healthcare sector average of 5.0%. Its relative performance of -2.2 indicates recent underperformance versus peers. With an RSI of 49, the stock is in neutral territory, neither overbought nor oversold, suggesting potential stabilization after recent pressure."
        }
      },
      synopsis: {
        price: "Experiencing mild pressure from profit-taking after recent outperformance",
        company: "ResMed's connected care platform showing strong subscription revenue growth",
        role: "Growth opportunity in sleep and respiratory care with recurring revenue model"
      },
      overallAnalysis: "A leading medical device company focused on respiratory care with strong growth prospects. Offers a balanced opportunity with above-average growth, moderate stability, and reasonable income potential.",
      chartData: [195.8, 195.4, 195.1, 194.8, 194.5, 194.2, 194.6, 194.9, 194.5, 194.3, 194.1, 194.25],
      industry: "Healthcare"
    },
    {
      name: "Align Technology",
      ticker: "ALGN",
      price: 307.85,
      change: 2.45,
      rating: 4.2,
      smartScore: "High",
      description: "Global medical device company with industry-leading clear aligner and intraoral scanner technologies.",
      metrics: {
        performance: { 
          value: "Strong", 
          color: "green",
          details: {
            revenueGrowth: 17.5,
            profitMargin: 19.8,
            returnOnCapital: 15.2
          },
          explanation: "Align Technology demonstrates exceptional performance with 17.5% revenue growth, exceeding the healthcare sector average of 15%. While its profit margin of 19.8% is slightly below the industry benchmark of 20%, its outstanding 15.2% return on capital surpasses the 13% industry standard, reflecting its innovation-driven business model."
        },
        stability: { 
          value: "Unstable", 
          color: "red",
          details: {
            volatility: 1.35,
            beta: 1.4,
            dividendConsistency: "N/A"
          },
          explanation: "Align Technology shows elevated volatility (1.35) compared to the healthcare industry average (1.2). Its beta of 1.4 indicates significant market sensitivity, amplifying both upside and downside movements. The company does not pay dividends, focusing instead on growth reinvestment, which may not suit income-focused investors."
        },
        value: { 
          value: "Fair", 
          color: "yellow",
          details: {
            peRatio: 28.2,
            pbRatio: 4.2,
            dividendYield: 0
          },
          explanation: "Align Technology trades at a premium with a PE ratio of 28.2 versus the healthcare industry average of 25.0, reflecting growth expectations. The price-to-book ratio of 4.2 slightly exceeds the industry's 4.0. The company pays no dividend, prioritizing reinvestment for growth, which aligns with its innovation-focused business model."
        },
        momentum: { 
          value: "Strong", 
          color: "green",
          details: {
            threeMonthReturn: 9.5,
            relativePerformance: 4.5,
            rsi: 65
          },
          explanation: "Align Technology shows exceptional momentum with a three-month return of 9.5%, nearly double the healthcare sector average of 5.0%. Its relative performance of 4.5 indicates substantial outperformance versus peers. The RSI of 65 approaches but has not reached overbought territory, reflecting strong investor interest and positive sentiment."
        }
      },
      synopsis: {
        price: "Breaking out to new highs with institutional accumulation and heightened options activity",
        company: "Align Technology's international expansion showing stronger-than-expected case growth",
        role: "High-growth opportunity in dental clear aligners with strong brand recognition"
      },
      overallAnalysis: "A high-growth medical device company leading in clear aligner technology. Offers significant upside potential driven by innovation and global expansion, but comes with higher volatility.",
      chartData: [301.2, 302.5, 303.1, 302.8, 303.6, 304.5, 305.2, 305.8, 306.3, 307.0, 307.4, 307.85],
      industry: "Healthcare"
    },
    {
      name: "Illumina Inc.",
      ticker: "ILMN",
      price: 124.85,
      change: -1.25,
      rating: 3.4,
      smartScore: "Average",
      description: "Global leader in DNA sequencing and array-based technologies for genetic analysis.",
      metrics: {
        performance: { 
          value: "Fair", 
          color: "yellow",
          details: {
            revenueGrowth: 7.5,
            profitMargin: 16.2,
            returnOnCapital: 10.5
          },
          explanation: "Illumina shows moderate performance with 7.5% revenue growth, trailing the healthcare sector average of 15%. Its profit margin of 16.2% falls below the industry benchmark of 20%, while its 10.5% return on capital is also below the 13% industry standard. These metrics reflect ongoing challenges in commercialization and margin pressure."
        },
        stability: { 
          value: "Unstable", 
          color: "red",
          details: {
            volatility: 1.45,
            beta: 1.5,
            dividendConsistency: "N/A"
          },
          explanation: "Illumina exhibits high volatility (1.45) compared to the healthcare industry average (1.2). Its beta of 1.5 indicates significant market sensitivity with amplified price swings. The company does not pay dividends, and its price action is frequently driven by clinical developments, regulatory announcements, and shifting competitive dynamics."
        },
        value: { 
          value: "Fair", 
          color: "yellow",
          details: {
            peRatio: 24.5,
            pbRatio: 3.8,
            dividendYield: 0
          },
          explanation: "Illumina trades at a slight discount with a PE ratio of 24.5 versus the healthcare industry average of 25.0. The price-to-book ratio of 3.8 is below the industry's 4.0, reflecting valuation concerns after recent challenges. The company pays no dividend, focusing investments on R&D and strategic initiatives to maintain technological leadership."
        },
        momentum: { 
          value: "Weak", 
          color: "red",
          details: {
            threeMonthReturn: -3.8,
            relativePerformance: -8.8,
            rsi: 41
          },
          explanation: "Illumina shows negative momentum with a three-month return of -3.8%, significantly underperforming the healthcare sector average of 5.0%. Its relative performance of -8.8 indicates substantial underperformance versus peers. With an RSI of 41, the stock is approaching but has not reached oversold territory, reflecting continued selling pressure."
        }
      },
      synopsis: {
        price: "Facing significant selling pressure after disappointing quarterly results",
        company: "Illumina's new leadership team signals shift in corporate strategy",
        role: "Speculative opportunity in genomics technology with turnaround potential"
      },
      overallAnalysis: "A genomics technology leader facing challenges in commercialization and margin pressure. Offers a speculative opportunity for investors willing to bet on a turnaround.",
      chartData: [127.8, 126.9, 126.4, 125.8, 125.3, 124.7, 124.3, 125.0, 125.4, 124.9, 125.2, 124.85],
      industry: "Healthcare"
    },
    {
      name: "Insulet Corporation",
      ticker: "PODD",
      price: 189.65,
      change: 1.35,
      rating: 3.8,
      smartScore: "Above Average",
      description: "Medical device company specializing in tubeless insulin pump technology for diabetes management.",
      metrics: {
        performance: { 
          value: "Strong", 
          color: "green",
          details: {
            revenueGrowth: 20.5,
            profitMargin: 18.5,
            returnOnCapital: 13.8
          },
          explanation: "Insulet demonstrates exceptional performance with 20.5% revenue growth, significantly exceeding the healthcare sector average of 15%. While its profit margin of 18.5% is slightly below the industry benchmark of 20%, its strong 13.8% return on capital exceeds the 13% industry standard, reflecting successful commercialization of innovative diabetes management technology."
        },
        stability: { 
          value: "Unstable", 
          color: "red",
          details: {
            volatility: 1.4,
            beta: 1.35,
            dividendConsistency: "N/A"
          },
          explanation: "Insulet exhibits elevated volatility (1.4) compared to the healthcare industry average (1.2). Its beta of 1.35 indicates significant market sensitivity, with more amplified price swings than the broader market. The company does not pay dividends, focusing instead on growth reinvestment and market expansion opportunities."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 32.5,
            pbRatio: 4.8,
            dividendYield: 0
          },
          explanation: "Insulet trades at a significant premium with a PE ratio of 32.5 versus the healthcare industry average of 25.0, reflecting high growth expectations. The price-to-book ratio of 4.8 exceeds the industry's 4.0, indicating investors are paying up for innovation. The company pays no dividend, prioritizing reinvestment in its rapid-growth business model."
        },
        momentum: { 
          value: "Fair", 
          color: "yellow",
          details: {
            threeMonthReturn: 5.5,
            relativePerformance: 0.5,
            rsi: 55
          },
          explanation: "Insulet shows solid momentum with a three-month return of 5.5%, slightly outperforming the healthcare sector average of 5.0%. Its relative performance of 0.5 indicates modest outperformance versus peers. With an RSI of 55, the stock is in balanced territory, showing steady buying interest without excessive enthusiasm."
        }
      },
      synopsis: {
        price: "Moving upward as new product adoption exceeds initial expectations",
        company: "Insulet's automated insulin delivery system gaining significant market share",
        role: "Growth opportunity in diabetes technology with innovative product offerings"
      },
      overallAnalysis: "A high-growth medical device company specializing in diabetes management. Offers significant upside potential driven by innovation and market expansion, but also carries high volatility.",
      chartData: [187.2, 188.1, 187.9, 187.6, 188.2, 188.7, 189.0, 189.3, 189.1, 189.4, 189.7, 189.65],
      industry: "Healthcare"
    }
  ],
  "Real Estate": [
    {
      name: "Prologis",
      ticker: "PLD",
      price: 110.26,
      change: 0.8,
      rating: 3.6,
      oneYearReturn: "-13.27%",
      predictedPrice: "$128.79",
      metrics: {
        performance: {
          value: "Average",
          color: "yellow",
          details: {
            revenueGrowth: 2.2,
            profitMargin: 45.4,
            returnOnCapital: 4.3,
            revenueGrowthExplanation: "Prologis isn't making much more money than last year (2.2% growth is sluggish).",
            profitMarginExplanation: "Prologis keeps $45 of every $100 it makes - very profitable for real estate.",
            returnOnCapitalExplanation: "Average return on investment - getting $4.30 for every $100 invested."
          },
          explanation: "Prologis isn't making much more money than last year (growth is OK, not great)."
        },
        stability: {
          value: "Poor",
          color: "red",
          details: {
            volatility: 8.6,
            beta: 1.24,
            dividendConsistency: "Medium",
            volatilityExplanation: "Price moves are moderate - not too wild but not super steady either.",
            betaExplanation: "When the market drops 10%, Prologis often falls a bit more (about 12%).",
            dividendConsistencyExplanation: "Prologis reliably pays dividends but sometimes changes the amount."
          },
          explanation: "Prologis is one of the steadier REITs with consistent payouts. It doesn't swing wildly."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 28.0,
            pbRatio: 1.9,
            dividendYield: 3.7,
            peRatioExplanation: "You pay $28 for every $1 of yearly earnings - slightly expensive.",
            pbRatioExplanation: "The stock costs less than twice the value of the company's assets.",
            dividendYieldExplanation: "Prologis pays you $3.70 per year for every $100 invested."
          },
          explanation: "Prologis is fairly priced for what you get - a solid company with decent income."
        },
        momentum: {
          value: "Average",
          color: "yellow",
          details: {
            threeMonthReturn: 6.1,
            relativePerformance: -2.0,
            rsi: 37.4,
            threeMonthReturnExplanation: "Prologis has grown 6.1% over the last three months - better than most REITs.",
            relativePerformanceExplanation: "It's falling slightly behind the wider market by about 2%.",
            rsiExplanation: "Buying interest is a bit weak right now - could be ready for a comeback."
          },
          explanation: "Prologis isn't making big moves either way lately. It's just coasting."
        }
      },
      description: "A leading global owner, operator and developer of logistics real estate.",
      synopsis: {
        price: "Trading at 110.26, reflecting modest recent gains despite market volatility.",
        company: "Global leader in logistics real estate with significant e-commerce exposure.",
        role: "Core holding for real estate allocation with balance of growth and income."
      },
      overallAnalysis: "Prologis brings in reliable income and holds its value over time. It's a strong option for people who prefer stability and are okay with slower movement.",
      chartData: [96, 101, 97, 104, 108, 96, 98, 103, 107, 109, 110.26],
      industry: "Real Estate"
    },
    {
      name: "Realty Income Corp",
      ticker: "O",
      price: 56.28,
      change: 1.29,
      rating: 4.0,
      oneYearReturn: "7.88%",
      predictedPrice: "$62.04",
      description: "A monthly dividend paying REIT focused on single-tenant commercial properties.",
      metrics: {
        performance: {
          value: "Average",
          color: "yellow",
          details: {
            revenueGrowth: 29.5,
            profitMargin: 16.0,
            returnOnCapital: 1.30,
            revenueGrowthExplanation: "Sales grew nearly 30% - much faster than most REITs due to acquisitions.",
            profitMarginExplanation: "Keeps $16 of every $100 it makes - decent but not stellar for real estate.",
            returnOnCapitalExplanation: "Gets only $1.30 back for every $100 invested - below average efficiency."
          },
          explanation: "Realty Income is expanding and profitable, but not very efficient with its money."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 6.93,
            beta: 0.82,
            dividendConsistency: "Good",
            volatilityExplanation: "Price moves are mild - this stock doesn't jump around much day-to-day.",
            betaExplanation: "When markets fall 10%, Realty Income typically falls only about 8%.",
            dividendConsistencyExplanation: "Famous for monthly dividends that have grown for 25+ consecutive years."
          },
          explanation: "Realty Income doesn't move around much and pays consistently. It's a safe pick for steady hands."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 57.6,
            pbRatio: 1.29,
            dividendYield: 5.7,
            peRatioExplanation: "You pay nearly $58 for every $1 of yearly earnings - expensive by normal standards.",
            pbRatioExplanation: "Trading at only 1.3x its book value - a reasonable price for its physical assets.",
            dividendYieldExplanation: "Pays you $5.70 per year for every $100 invested - that's excellent income."
          },
          explanation: "Realty Income is all about slow, steady income. It won't skyrocket, but it'll keep delivering."
        },
        momentum: {
          value: "Average",
          color: "yellow",
          details: {
            threeMonthReturn: 6.6,
            relativePerformance: -1.5,
            rsi: 49.3,
            threeMonthReturnExplanation: "Gained 6.6% in the last three months - decent but not spectacular.",
            relativePerformanceExplanation: "Performing slightly worse than the broader market by about 1.5%.",
            rsiExplanation: "Buying and selling pressure are balanced - the stock isn't overbought or oversold."
          },
          explanation: "Realty Income hasn't made big moves lately and isn't drawing much investor attention."
        }
      },
      synopsis: {
        price: "Trading at 56.28 with slight recent weakness despite attractive yield.",
        company: "Premier monthly dividend REIT with diverse commercial property portfolio.",
        role: "Income cornerstone for dividend-focused investors seeking reliability."
      },
      overallAnalysis: "Realty Income is a slow-moving stock that focuses on steady, reliable income. It won't deliver fast gains, but it's great for investors who want monthly dividends and long-term stability.",
      chartData: [52, 54, 51, 54, 58, 56, 55, 57, 58, 56, 56.28],
      industry: "Real Estate"
    },
    {
      name: "Simon Property Group",
      ticker: "SPG",
      price: 166.12,
      change: 0.55,
      rating: 3.2,
      oneYearReturn: "9.97%",
      predictedPrice: "$180.33",
      description: "The largest owner and operator of shopping malls and premium outlets in the US.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 5.4,
            profitMargin: 41.9,
            returnOnCapital: 9.97
          },
          explanation: "Simon Property Group is profitable and efficient, even if growth is a bit slow."
        },
        stability: {
          value: "Poor",
          color: "red",
          details: {
            volatility: 9.01,
            beta: 1.49,
            dividendConsistency: "Poor"
          },
          explanation: "Simon Property Group moves around a lot and doesn't always pay on time. It's not the safest option."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 22,
            pbRatio: 18.68,
            dividendYield: 5.1
          },
          explanation: "Simon Property Group may look pricey on paper, but its dividend helps justify the value."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -3.1,
            relativePerformance: -11,
            rsi: 41.9
          },
          explanation: "Simon Property Group hasn't had much recent action and is underperforming."
        }
      },
      synopsis: {
        price: "Trading at 166.12 with some recent strength despite longer-term underperformance.",
        company: "Dominant mall operator with premium locations and evolving business model.",
        role: "Value opportunity in retail real estate with above-average income potential."
      },
      overallAnalysis: "Simon Property Group owns top-tier malls and shopping centers. While retail has challenges, their premium locations give them staying power and a solid income stream.",
      chartData: [158, 162, 155, 159, 163, 155, 157, 162, 167, 164, 166.12],
      industry: "Real Estate"
    },
    {
      name: "AvalonBay Communities",
      ticker: "AVB",
      price: 214.36,
      change: 0.82,
      rating: 4.1,
      oneYearReturn: "17.77%",
      predictedPrice: "$238.64",
      description: "A leading apartment REIT focused on high-quality properties in premium coastal markets.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 4.9,
            profitMargin: 36.5,
            returnOnCapital: 5.6
          },
          explanation: "AvalonBay is making good money from the high rents in its luxury apartments."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 6.93,
            beta: 0.89,
            dividendConsistency: "Good"
          },
          explanation: "AvalonBay moves at its own pace and not by market swings too much. Its dividend is reliable."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 28.2,
            pbRatio: 2.55,
            dividendYield: 3.3
          },
          explanation: "AvalonBay has a modest price tag and pays a fair dividend."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -2.4,
            relativePerformance: -10,
            rsi: 47.8
          },
          explanation: "AvalonBay has been lagging behind other stocks lately."
        }
      },
      synopsis: {
        price: "Trading at 214.36 with modest recent gains despite quarter-to-date weakness.",
        company: "Premium apartment owner/operator in supply-constrained coastal markets.",
        role: "Quality residential real estate exposure with inflation protection features."
      },
      overallAnalysis: "AvalonBay owns luxury apartments in places where it's expensive to buy a home. They do well when housing prices are high because more people need to rent instead of buy.",
      chartData: [205, 210, 202, 208, 215, 204, 207, 211, 219, 213, 214.36],
      industry: "Real Estate"
    },
    {
      name: "Public Storage",
      ticker: "PSA",
      price: 294.93,
      change: -0.3,
      rating: 6.9,
      oneYearReturn: "6.94%",
      predictedPrice: "$338",
      description: "The world's largest owner and operator of self-storage facilities.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 3.9,
            profitMargin: 39.9,
            returnOnCapital: 10.2
          },
          explanation: "Public Storage makes good money with little effort - their business basically runs itself."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 9.01,
            beta: 0.8,
            dividendConsistency: "Good"
          },
          explanation: "Public Storage isn't too worried about what the market does - it follows its own path and pays steady dividends."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 27.7,
            pbRatio: 9.65,
            dividendYield: "4.2%"
          },
          explanation: "Public Storage is expensive compared to what it owns, but the 4.2% dividend helps make up for that."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -1.7,
            relativePerformance: -9.7,
            rsi: 43.5
          },
          explanation: "Public Storage isn't attracting much attention lately and has slipped a bit compared to similar stocks."
        }
      },
      synopsis: {
        price: "Trading at 294.93 with slight recent weakness following longer downtrend.",
        company: "Dominant self-storage operator with recession-resistant business model.",
        role: "Defensive real estate holding with steady income and inflation protection."
      },
      overallAnalysis: "Public Storage runs a simple business renting storage units, which keeps making money in good times and bad. It's a boring but reliable stock with good income.",
      chartData: [285, 290, 283, 288, 296, 287, 290, 295, 301, 296, 294.93],
      industry: "Real Estate"
    },
    {
      name: "Digital Realty Trust",
      ticker: "DLR",
      price: 155.49,
      change: 0.88,
      rating: 5.8,
      oneYearReturn: "12.81%",
      predictedPrice: "$179.95",
      description: "A leading global provider of data center, colocation and interconnection solutions.",
      metrics: {
        performance: {
          value: "Poor",
          color: "red",
          details: {
            revenueGrowth: 1.4,
            profitMargin: 10.1,
            returnOnCapital: 1.43
          },
          explanation: "Below-average revenue growth with significantly lower profit margins and returns on capital than REIT peers. High capital intensity of data center development creates financial performance challenges."
        },
        stability: {
          value: "Poor",
          color: "red",
          details: {
            volatility: 10.74,
            beta: 0.92,
            dividendConsistency: "Good"
          },
          explanation: "Higher volatility despite moderate beta indicates price instability regardless of market direction. Strong dividend growth history is a positive counterbalance to price volatility."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 95.6,
            pbRatio: 2.54,
            dividendYield: 3.2
          },
          explanation: "Very high P/E ratio and moderate price-to-book suggests premium valuation with growth expectations. Below-average dividend yield for a REIT reflects the market's focus on future growth over current income."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -12.1,
            relativePerformance: -20,
            rsi: 50.1
          },
          explanation: "Significant price weakness both on absolute basis and relative to peers. Neutral RSI despite underperformance suggests selling pressure may be stabilizing."
        }
      },
      synopsis: {
        price: "Trading at 155.49 with recent strength following notable prior weakness.",
        company: "Global data center provider with both colocation and hyperscale offerings.",
        role: "Technology-oriented real estate exposure with growth and income potential."
      },
      overallAnalysis: "Technology-focused REIT providing data center exposure with better growth than traditional real estate while maintaining income characteristics. Benefits from cloud computing, AI workloads, and growing digital infrastructure demands.",
      chartData: [168, 172, 165, 160, 158, 149, 146, 151, 157, 152, 155.49],
      industry: "Real Estate"
    },
    {
      name: "American Tower Corp",
      ticker: "AMT",
      price: 212.8,
      change: 1.5,
      rating: 7.3,
      oneYearReturn: "15.42%",
      predictedPrice: "$245.35",
      description: "The largest global owner and operator of wireless communications infrastructure.",
      metrics: {
        performance: {
          value: "Average",
          color: "yellow",
          details: {
            revenueGrowth: -3.0,
            profitMargin: 20.9,
            returnOnCapital: 5.24
          },
          explanation: "Revenue contraction is a concern, partially offset by decent profit margins and return on capital. Recent financial performance reflects temporary integration challenges with acquisitions."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 9.01,
            beta: 0.89,
            dividendConsistency: "Good"
          },
          explanation: "Slightly higher volatility but below-average beta indicates less correlation with broader market movements. Consistent dividend growth history demonstrates financial stability."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 44.2,
            pbRatio: 29.41,
            dividendYield: 3.2
          },
          explanation: "High P/E ratio and extremely high price-to-book value indicate significant premium to asset value. Below-average dividend yield for a REIT suggests investors are paying for expected future growth."
        },
        momentum: {
          value: "Good",
          color: "green",
          details: {
            threeMonthReturn: 15.1,
            relativePerformance: 7.1,
            rsi: 61.1
          },
          explanation: "Strong recent price performance both on absolute basis and compared to peers. Moderately high RSI indicates positive momentum without reaching extreme overbought levels."
        }
      },
      synopsis: {
        price: "Trading at 212.80 with solid momentum after extended period of weakness.",
        company: "Global leader in wireless tower infrastructure essential for mobile networks.",
        role: "Technology-adjacent real estate with combination of growth and income."
      },
      overallAnalysis: "Essential wireless infrastructure provider with defensive characteristics and consistent income from long-term leases. Benefits from increasing data consumption and 5G expansion for continued stable growth.",
      chartData: [185, 190, 182, 195, 200, 189, 196, 204, 208, 210, 212.8],
      industry: "Real Estate"
    },
    {
      name: "Welltower Inc",
      ticker: "WELL",
      price: 149.84,
      change: 1.8,
      rating: 6.4,
      oneYearReturn: "19.65%",
      predictedPrice: "$167.30",
      description: "A healthcare REIT specializing in senior housing, post-acute care, and outpatient medical properties.",
      metrics: {
        performance: {
          value: "Poor",
          color: "red",
          details: {
            revenueGrowth: 20.4,
            profitMargin: 6.3,
            returnOnCapital: 1.06
          },
          explanation: "Exceptional revenue growth but significantly below-average profit margins and return on capital. Growth-focused strategy currently prioritizes scale over operational efficiency."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 7.62,
            beta: 0.94,
            dividendConsistency: "Poor"
          },
          explanation: "Moderate volatility and beta indicate average price stability. Historic dividend cuts during pandemic reflect vulnerability of healthcare properties to certain crisis scenarios."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 182.2,
            pbRatio: 2.98,
            dividendYield: 1.9
          },
          explanation: "Extremely high P/E ratio and average price-to-book value indicate significant premium valuation. Very low dividend yield for a REIT reflects both valuation and lower payout ratio focused on growth."
        },
        momentum: {
          value: "Good",
          color: "green",
          details: {
            threeMonthReturn: 19.3,
            relativePerformance: 11.3,
            rsi: 54.7
          },
          explanation: "Exceptional recent price performance both on absolute basis and relative to peers. Moderate RSI suggests strong buying interest without reaching extreme levels."
        }
      },
      synopsis: {
        price: "Trading at 149.84 with strong recent momentum reflecting sector recovery.",
        company: "Leading senior housing and healthcare property owner with demographic tailwinds.",
        role: "Growth-oriented healthcare real estate exposure with aging population thesis."
      },
      overallAnalysis: "Healthcare REIT with strong demographic tailwinds from an aging population. Combines defensive characteristics and recession resistance with above-average growth potential in senior housing and medical facilities.",
      chartData: [125, 130, 127, 132, 138, 128, 135, 140, 145, 147, 149.84],
      industry: "Real Estate"
    },
    {
      name: "Boston Properties",
      ticker: "BXP",
      price: 69.48,
      change: -1.2,
      rating: 5.5,
      oneYearReturn: "-5.32%",
      predictedPrice: "$74.90",
      description: "The largest publicly-traded developer, owner and manager of Class A office properties.",
      metrics: {
        performance: {
          value: "Poor",
          color: "red",
          details: {
            revenueGrowth: 4.1,
            profitMargin: 0.4,
            returnOnCapital: 0.06
          },
          explanation: "Modest revenue growth but extremely poor profit margins and negligible return on capital. Office property challenges have severely impacted financial performance metrics."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 10.39,
            beta: 1.08,
            dividendConsistency: "Poor"
          },
          explanation: "Higher volatility and above-average beta indicate more price instability and market correlation. Past dividend cuts reflect vulnerability to office sector challenges."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 785,
            pbRatio: 2.03,
            dividendYield: 5.7
          },
          explanation: "Extremely high P/E ratio due to depressed earnings, but reasonable price-to-book value suggests potential value. Very attractive dividend yield offers compelling income if sustainable."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -6.4,
            relativePerformance: -14.4,
            rsi: 52.5
          },
          explanation: "Significant price weakness both on absolute basis and compared to peers. Neutral RSI suggests balanced buying and selling despite underperformance."
        }
      },
      synopsis: {
        price: "Trading at 69.48 with recent weakness indicating ongoing sector concerns.",
        company: "Premium office property owner facing work-from-home and oversupply challenges.",
        role: "Deep value opportunity in office real estate with significant income yield."
      },
      overallAnalysis: "Premium office REIT trading at historical discount due to work-from-home trends and financing concerns. Offers exceptional value for contrarian investors willing to accept higher risk for potential recovery upside.",
      chartData: [75, 78, 72, 74, 76, 71, 73, 75, 70, 70.5, 69.48],
      industry: "Real Estate"
    },
    {
      name: "Equity Residential",
      ticker: "EQR",
      price: 71.36,
      change: 0.4,
      rating: 6.7,
      oneYearReturn: "4.25%",
      predictedPrice: "$77.50",
      description: "A leading multifamily residential REIT focused on urban and high-density suburban communities.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 3.8,
            profitMargin: 34.9,
            returnOnCapital: 5.59
          },
          explanation: "Moderate revenue growth with strong profit margins and solid return on capital. Effective property management and operational efficiency support financial performance."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 7.97,
            beta: 0.88,
            dividendConsistency: "Medium"
          },
          explanation: "Moderate volatility with below-average beta indicates reasonable price stability. Mixed dividend history with some variability but general upward trend over time."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 26.8,
            pbRatio: 2.46,
            dividendYield: 3.9
          },
          explanation: "Trades at a reasonable P/E multiple with typical price-to-book value for apartment REITs. Slightly below-average dividend yield is balanced by superior property quality and locations."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: 1.7,
            relativePerformance: -6.3,
            rsi: 52.8
          },
          explanation: "Modest absolute price gains but underperformance compared to broader real estate sector. Neutral RSI suggests balanced market sentiment currently."
        }
      },
      synopsis: {
        price: "Trading at 71.36 with modest recent gains despite sector rotation headwinds.",
        company: "Premier apartment owner focusing on urban and transit-oriented communities.",
        role: "Quality residential real estate exposure with focus on millennial renters."
      },
      overallAnalysis: "High-quality apartment REIT with superior property locations and demographic advantages. Well-positioned for urban rental recovery as return-to-office trends increase demand for convenient housing in employment centers.",
      chartData: [69, 72, 68, 71, 73, 68, 70, 72, 74, 71, 71.36],
      industry: "Real Estate"
    }
  ]
};

Object.keys(hardcodedStocks).forEach(industry => {
  hardcodedStocks[industry].forEach(stock => {
    if (!stock.chartData) {
      // Generate random chart data if not present
      const basePrice = stock.price * 0.99;
      stock.chartData = Array(12).fill(0).map((_, i) => {
        return +(basePrice + (Math.random() * stock.price * 0.03)).toFixed(2);
      });
      // Make the last data point match the current price
      stock.chartData[stock.chartData.length - 1] = stock.price;
    }
  });
});

export const getIndustryStocks = (industry: string): StockData[] => {
  // Return hardcoded stocks if available for the industry
  return hardcodedStocks[industry] || [];
};

================
File: client/src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: client/src/pages/learn/investor-simulator.txt
================
This is the raw story data for the Investor Simulator game. This can be used for creating flowcharts and improving the game's narrative structure.

=Raw Data Starts Here=
<nowiki>::</nowiki> Start
<<silently>>
<<set $playerName = "">
<<set $initialCapital = 100000>>
<<set $currentCapital = $initialCapital>>
<<set $portfolio = {}>>
<<set $dayCount = 1>>
<<set $marketSentiment = "neutral">>
<<set $riskTolerance = "moderate">>
<<set $investmentStrategy = "none">>
<<set $learnedBasics = false>>
<<set $firstTrade = false>>
<<set $marketKnowledge = 0>>
<<set $tradingExperience = 0>>
<<set $currentSector = "none">>
<<set $lastTradeResult = "none">>
<<set $tutorialCompleted = false>>
<<endsilently>>

[Welcome to Investor Simulator]
<nowiki>[[begin_tutorial]]</nowiki>

<nowiki>::</nowiki> begin_tutorial
Welcome to Investor Simulator! This interactive experience will help you learn about investing in the stock market through hands-on practice.

You have $100,000 in initial capital to start your investment journey. Before you begin trading, let's go through some basics.

Would you like to:
<nowiki>[[Learn about market basics|market_basics]]</nowiki>
<nowiki>[[Skip tutorial and start trading|first_trade]]</nowiki>

<nowiki>::</nowiki> market_basics
Let's start with the fundamentals of stock market investing:

1. Stocks represent ownership in a company
2. Stock prices fluctuate based on:
   - Company performance
   - Market sentiment
   - Economic conditions
   - Industry trends

3. Key concepts to remember:
   - Buy low, sell high
   - Diversification reduces risk
   - Research before investing
   - Don't invest more than you can afford to lose

Would you like to:
<nowiki>[[Learn about different investment strategies|investment_strategies]]</nowiki>
<nowiki>[[Start your first trade|first_trade]]</nowiki>

<nowiki>::</nowiki> investment_strategies
Here are the main investment strategies you can follow:

1. Growth Investing
   - Focus on companies with high growth potential
   - Often higher risk, higher reward
   - Example: Tech companies

2. Value Investing
   - Look for undervalued companies
   - Often more stable, lower risk
   - Example: Established companies with strong fundamentals

3. Dividend Investing
   - Focus on companies that pay regular dividends
   - Provides steady income
   - Example: Utility companies

4. Index Investing
   - Invest in market indices
   - Diversified, lower risk
   - Example: S&P 500 ETFs

Which strategy interests you the most?
<nowiki>[[Growth Investing|set_growth_strategy]]</nowiki>
<nowiki>[[Value Investing|set_value_strategy]]</nowiki>
<nowiki>[[Dividend Investing|set_dividend_strategy]]</nowiki>
<nowiki>[[Index Investing|set_index_strategy]]</nowiki>

<nowiki>::</nowiki> set_growth_strategy
<<set $investmentStrategy = "growth">>
You've chosen Growth Investing! This strategy focuses on companies with high growth potential.

Let's start with your first trade. You have $100,000 to invest. The tech sector is showing strong growth potential.

Would you like to:
<nowiki>[[Research tech companies|research_tech]]</nowiki>
<nowiki>[[Invest in a tech ETF|invest_tech_etf]]</nowiki>

<nowiki>::</nowiki> research_tech
You decide to research individual tech companies. Here are some options:

1. TechCorp (TECH)
   - Fast-growing cloud computing company
   - Recent earnings beat expectations
   - P/E ratio: 45
   - Risk: High

2. DataFlow (DATA)
   - AI and data analytics leader
   - Strong revenue growth
   - P/E ratio: 38
   - Risk: High

3. CloudNet (CLD)
   - Established cloud infrastructure provider
   - Steady growth
   - P/E ratio: 32
   - Risk: Moderate

Which company would you like to invest in?
<nowiki>[[Invest in TechCorp|invest_techcorp]]</nowiki>
<nowiki>[[Invest in DataFlow|invest_dataflow]]</nowiki>
<nowiki>[[Invest in CloudNet|invest_cloudnet]]</nowiki>

<nowiki>::</nowiki> invest_techcorp
<<set $firstTrade = true>>
<<set $currentSector = "tech">>
You decide to invest in TechCorp. How much would you like to invest?

<nowiki>[[Invest $25,000|invest_amount_25k]]</nowiki>
<nowiki>[[Invest $50,000|invest_amount_50k]]</nowiki>
<nowiki>[[Invest $75,000|invest_amount_75k]]</nowiki>

<nowiki>::</nowiki> invest_amount_25k
<<set $currentCapital = $currentCapital - 25000>>
<<set $portfolio["TECH"] = 25000>>
You've invested $25,000 in TechCorp.

A week later, the company announces strong earnings and the stock price increases by 15%!

Your investment is now worth $28,750.

Would you like to:
<nowiki>[[Hold the position|hold_position]]</nowiki>
<nowiki>[[Take profits|take_profits]]</nowiki>

<nowiki>::</nowiki> hold_position
You decide to hold your position in TechCorp.

The following week, market sentiment shifts and tech stocks face some pressure. TechCorp's stock price drops by 8%.

Your investment is now worth $26,450.

Would you like to:
<nowiki>[[Continue holding|continue_holding]]</nowiki>
<nowiki>[[Cut losses|cut_losses]]</nowiki>

<nowiki>::</nowiki> continue_holding
You maintain your position in TechCorp, believing in the company's long-term growth potential.

A month later, the company announces a major partnership and the stock price surges by 25%!

Your investment is now worth $33,062.50.

This demonstrates an important lesson: Sometimes holding through short-term volatility can lead to better long-term results.

Would you like to:
<nowiki>[[Start a new trade|first_trade]]</nowiki>
<nowiki>[[Review your strategy|review_strategy]]</nowiki>

<nowiki>::</nowiki> review_strategy
Let's review your investment strategy:

1. Initial Investment: $25,000 in TechCorp
2. Strategy Used: Growth Investing
3. Risk Level: High
4. Final Result: +32.25% return

Key Lessons Learned:
- Growth stocks can be volatile
- Patience can be rewarding
- Research pays off
- Diversification is important

Would you like to:
<nowiki>[[Try a different strategy|investment_strategies]]</nowiki>
<nowiki>[[Start a new trade|first_trade]]</nowiki>

================
File: client/src/pages/auth-page.tsx
================
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useAuth } from "@/hooks/use-auth";
import { useLocation } from "wouter";
import { insertUserSchema } from "@shared/schema";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";

const loginSchema = z.object({
  username: z.string().min(1, "Username is required"),
  password: z.string().min(1, "Password is required"),
});

const registerSchema = insertUserSchema.extend({
  password: z.string().min(6, "Password must be at least 6 characters"),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords do not match",
  path: ["confirmPassword"],
});

type LoginFormValues = z.infer<typeof loginSchema>;
type RegisterFormValues = z.infer<typeof registerSchema>;

export default function AuthPage() {
  const [activeTab, setActiveTab] = useState<string>("login");
  const { user, loginMutation, registerMutation } = useAuth();
  const [_, setLocation] = useLocation();

  // Redirect if user is already logged in
  if (user) {
    setLocation("/");
    return null;
  }

  const loginForm = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      username: "",
      password: "",
    },
  });

  const registerForm = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      username: "",
      displayName: "",
      password: "",
      confirmPassword: "",
    },
  });

  const onLoginSubmit = (data: LoginFormValues) => {
    loginMutation.mutate(data);
  };

  const onRegisterSubmit = (data: RegisterFormValues) => {
    const { confirmPassword, ...registerData } = data;
    registerMutation.mutate(registerData);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-primary-50 to-white flex items-center justify-center p-4">
      <div className="w-full max-w-6xl grid md:grid-cols-2 gap-8 items-center">
        <div className="bg-white rounded-xl shadow-xl p-6 md:p-8 order-2 md:order-1">
          <Tabs defaultValue={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid grid-cols-2 mb-6">
              <TabsTrigger value="login">Login</TabsTrigger>
              <TabsTrigger value="register">Create Account</TabsTrigger>
            </TabsList>
            
            <TabsContent value="login">
              <Card>
                <CardHeader>
                  <CardTitle>Welcome back</CardTitle>
                  <CardDescription>
                    Log in to continue your financial learning journey
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Form {...loginForm}>
                    <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className="space-y-4">
                      <FormField
                        control={loginForm.control}
                        name="username"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Username</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter your username" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={loginForm.control}
                        name="password"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Password</FormLabel>
                            <FormControl>
                              <Input type="password" placeholder="Enter your password" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <Button 
                        type="submit" 
                        className="w-full"
                        disabled={loginMutation.isPending}
                      >
                        {loginMutation.isPending ? "Logging in..." : "Login"}
                      </Button>
                    </form>
                  </Form>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="register">
              <Card>
                <CardHeader>
                  <CardTitle>Create an account</CardTitle>
                  <CardDescription>
                    Start your financial learning journey with Swipefolio
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Form {...registerForm}>
                    <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className="space-y-4">
                      <FormField
                        control={registerForm.control}
                        name="username"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Username</FormLabel>
                            <FormControl>
                              <Input placeholder="Choose a username" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={registerForm.control}
                        name="displayName"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Display Name</FormLabel>
                            <FormControl>
                              <Input placeholder="How we should call you" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={registerForm.control}
                        name="password"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Password</FormLabel>
                            <FormControl>
                              <Input type="password" placeholder="Create a password" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={registerForm.control}
                        name="confirmPassword"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Confirm Password</FormLabel>
                            <FormControl>
                              <Input type="password" placeholder="Confirm your password" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <Button 
                        type="submit" 
                        className="w-full"
                        disabled={registerMutation.isPending}
                      >
                        {registerMutation.isPending ? "Creating account..." : "Create Account"}
                      </Button>
                    </form>
                  </Form>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
        
        <div className="text-center md:text-left order-1 md:order-2">
          <div className="mb-6 inline-block p-4 bg-primary-100 rounded-full">
            <svg className="w-12 h-12 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
            </svg>
          </div>
          <h1 className="text-3xl md:text-4xl font-bold mb-4 font-poppins text-gray-800">Swipefolio</h1>
          <p className="text-xl md:text-2xl font-medium mb-6 text-primary-600">Finance Learning Made Fun</p>
          <p className="text-gray-600 mb-8 max-w-md mx-auto md:mx-0">
            Learn finance through bite-sized, interactive lessons. Stack up knowledge with engaging quizzes and visuals on topics like tech, stocks, and crypto.
          </p>
          <div className="flex flex-wrap gap-3 justify-center md:justify-start">
            <div className="bg-white p-3 rounded-lg shadow-sm flex items-center">
              <div className="bg-primary-100 p-2 rounded-full mr-3">
                <svg className="w-5 h-5 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
                </svg>
              </div>
              <span className="text-sm font-medium">Fun Gamified Learning</span>
            </div>
            <div className="bg-white p-3 rounded-lg shadow-sm flex items-center">
              <div className="bg-green-100 p-2 rounded-full mr-3">
                <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                </svg>
              </div>
              <span className="text-sm font-medium">Track Your Progress</span>
            </div>
            <div className="bg-white p-3 rounded-lg shadow-sm flex items-center">
              <div className="bg-amber-100 p-2 rounded-full mr-3">
                <svg className="w-5 h-5 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <span className="text-sm font-medium">Bite-sized Lessons</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: client/src/pages/home-page.tsx
================
import { useQuery } from "@tanstack/react-query";
import { motion } from "framer-motion";
import { Loader2 } from "lucide-react";
import { Stack } from "@shared/schema";
import AppHeader from "@/components/app-header";
import AppNavigation from "@/components/app-navigation";
import CategoryChips from "@/components/category-chips";
import SectionHeader from "@/components/section-header";
import StacksExplorer from "@/components/stacks-explorer";

import { useAuth } from "@/hooks/use-auth";
import { useState, useContext } from "react";
import HeroSection from "@/components/hero-section";
import ModernUserWelcome from "@/components/modern-user-welcome";
import PortfolioDashboard from "@/components/portfolio-dashboard";
import CompetitionTracker from "@/components/competition-tracker";
import { PortfolioContext, usePortfolio } from "@/contexts/portfolio-context";

// Container for applying animations to child elements
const AnimatedContainer = ({ children, delay = 0 }: { children: React.ReactNode, delay?: number }) => (
  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.4, delay }}
  >
    {children}
  </motion.div>
);

export default function HomePage() {
  const { user } = useAuth();
  const [selectedCategory, setSelectedCategory] = useState("Trending");
  
  const { data: stacks, isLoading: isLoadingStacks } = useQuery<Stack[]>({
    queryKey: ["/api/stacks"],
  });
  
  const filterStacksByCategory = (stacks: Stack[], category: string) => {
    if (category === "Trending") {
      return stacks;
    }
    return stacks.filter(stack => stack.industry.includes(category));
  };
  
  return (
    <>
      <AppHeader />
      
      <main className="main-content pb-24 pt-20 px-4 bg-gradient-to-b from-slate-50 to-white">
        <AnimatedContainer>
          <HeroSection />
          <ModernUserWelcome name="Belford&Co" rank={10} />
        </AnimatedContainer>
        
        <AnimatedContainer delay={0.2}>
          <div className="md:grid md:grid-cols-2 md:gap-4">
            <PortfolioDashboard />
            <CompetitionTracker />
          </div>
        </AnimatedContainer>
        

        
        <AnimatedContainer delay={0.3}>
          <CategoryChips 
            onCategoryChange={setSelectedCategory}
          />
        </AnimatedContainer>
        
        <AnimatedContainer delay={0.4}>
          <SectionHeader 
            title="Popular Picks" 
          />
          
          {isLoadingStacks ? (
            <div className="flex justify-center items-center py-12">
              <Loader2 className="h-8 w-8 animate-spin text-indigo-500" />
            </div>
          ) : stacks ? (
            <StacksExplorer 
              stacks={filterStacksByCategory(stacks, selectedCategory)}
            />
          ) : (
            <div className="text-center py-12 text-gray-400">
              No stacks available
            </div>
          )}
        </AnimatedContainer>
      </main>
      
      <AppNavigation />
    </>
  );
}

================
File: client/src/pages/investor-simulator.tsx
================
import { useState } from "react";
import { useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowLeft } from "lucide-react";
import AppNavigation from "@/components/app-navigation";
import { motion } from "framer-motion";

interface GameState {
  playerName: string;
  initialCapital: number;
  currentCapital: number;
  portfolio: Record<string, number>;
  dayCount: number;
  marketSentiment: string;
  riskTolerance: string;
  investmentStrategy: string;
  learnedBasics: boolean;
  firstTrade: boolean;
  marketKnowledge: number;
  tradingExperience: number;
  currentSector: string;
  lastTradeResult: string;
  tutorialCompleted: boolean;
}

export default function InvestorSimulator() {
  const [_, setLocation] = useLocation();
  const [gameState, setGameState] = useState<GameState>({
    playerName: "",
    initialCapital: 100000,
    currentCapital: 100000,
    portfolio: {},
    dayCount: 1,
    marketSentiment: "neutral",
    riskTolerance: "moderate",
    investmentStrategy: "none",
    learnedBasics: false,
    firstTrade: false,
    marketKnowledge: 0,
    tradingExperience: 0,
    currentSector: "none",
    lastTradeResult: "none",
    tutorialCompleted: false
  });

  const [currentScene, setCurrentScene] = useState("start");

  const renderScene = () => {
    switch (currentScene) {
      case "start":
        return (
          <motion.div 
            className="text-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <motion.h1 
              className="text-3xl font-bold mb-4"
              initial={{ scale: 0.9 }}
              animate={{ scale: 1 }}
              transition={{ delay: 0.2, type: "spring" }}
            >
              Welcome to Investor Simulator
            </motion.h1>
            <motion.p 
              className="text-gray-600 mb-6"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.4 }}
            >
              This interactive experience will help you learn about investing in the stock market through hands-on practice.
            </motion.p>
            <motion.p 
              className="text-gray-600 mb-8"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.6 }}
            >
              You have ${gameState.initialCapital.toLocaleString()} in initial capital to start your investment journey.
            </motion.p>
            <motion.div 
              className="space-y-4"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.8 }}
            >
              <motion.div
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                <Button 
                  className="w-full bg-blue-600 hover:bg-blue-700"
                  onClick={() => setCurrentScene("market_basics")}
                >
                  Learn Market Basics
                </Button>
              </motion.div>
              <motion.div
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                <Button 
                  className="w-full bg-green-600 hover:bg-green-700"
                  onClick={() => setCurrentScene("first_trade")}
                >
                  Skip Tutorial & Start Trading
                </Button>
              </motion.div>
            </motion.div>
          </motion.div>
        );

      case "market_basics":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Market Basics</h2>
            <div className="space-y-4 mb-6">
              <p className="text-gray-700">Let's start with the fundamentals of stock market investing:</p>
              <ul className="list-disc pl-5 space-y-2">
                <li>Stocks represent ownership in a company</li>
                <li>Stock prices fluctuate based on:
                  <ul className="list-disc pl-5 mt-2">
                    <li>Company performance</li>
                    <li>Market sentiment</li>
                    <li>Economic conditions</li>
                    <li>Industry trends</li>
                  </ul>
                </li>
                <li>Key concepts to remember:
                  <ul className="list-disc pl-5 mt-2">
                    <li>Buy low, sell high</li>
                    <li>Diversification reduces risk</li>
                    <li>Research before investing</li>
                    <li>Don't invest more than you can afford to lose</li>
                  </ul>
                </li>
              </ul>
            </div>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("investment_strategies")}
              >
                Learn Investment Strategies
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => setCurrentScene("first_trade")}
              >
                Start Trading
              </Button>
            </div>
          </div>
        );

      case "investment_strategies":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Investment Strategies</h2>
            <div className="space-y-6 mb-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Growth Investing</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>Focus on companies with high growth potential</li>
                    <li>Often higher risk, higher reward</li>
                    <li>Example: Tech companies</li>
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Value Investing</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>Look for undervalued companies</li>
                    <li>Often more stable, lower risk</li>
                    <li>Example: Established companies with strong fundamentals</li>
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Dividend Investing</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>Focus on companies that pay regular dividends</li>
                    <li>Provides steady income</li>
                    <li>Example: Utility companies</li>
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Index Investing</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>Invest in market indices</li>
                    <li>Diversified, lower risk</li>
                    <li>Example: S&P 500 ETFs</li>
                  </ul>
                </CardContent>
              </Card>
            </div>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("first_trade")}
              >
                Start Trading
              </Button>
            </div>
          </div>
        );

      case "first_trade":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Your First Trade</h2>
            <p className="text-gray-600 mb-6">
              You have ${gameState.currentCapital.toLocaleString()} to invest. The tech sector is showing strong growth potential.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("research_tech")}
              >
                Research Tech Companies
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => setCurrentScene("invest_tech_etf")}
              >
                Invest in Tech ETF
              </Button>
            </div>
          </div>
        );

      case "research_tech":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Research Tech Companies</h2>
            <div className="space-y-6 mb-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">TechCorp (TECH)</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>Fast-growing cloud computing company</li>
                    <li>Recent earnings beat expectations</li>
                    <li>P/E ratio: 45</li>
                    <li>Risk: High</li>
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">DataFlow (DATA)</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>AI and data analytics leader</li>
                    <li>Strong revenue growth</li>
                    <li>P/E ratio: 38</li>
                    <li>Risk: High</li>
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">CloudNet (CLD)</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>Established cloud infrastructure provider</li>
                    <li>Steady growth</li>
                    <li>P/E ratio: 32</li>
                    <li>Risk: Moderate</li>
                  </ul>
                </CardContent>
              </Card>
            </div>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("invest_techcorp")}
              >
                Invest in TechCorp
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => setCurrentScene("invest_dataflow")}
              >
                Invest in DataFlow
              </Button>
              <Button 
                className="w-full bg-purple-600 hover:bg-purple-700"
                onClick={() => setCurrentScene("invest_cloudnet")}
              >
                Invest in CloudNet
              </Button>
            </div>
          </div>
        );

      case "invest_techcorp":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Invest in TechCorp</h2>
            <p className="text-gray-600 mb-6">
              How much would you like to invest in TechCorp?
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital - 25000,
                    portfolio: { ...prev.portfolio, TECH: 25000 },
                    firstTrade: true,
                    currentSector: "tech"
                  }));
                  setCurrentScene("invest_amount_25k");
                }}
              >
                Invest $25,000
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital - 50000,
                    portfolio: { ...prev.portfolio, TECH: 50000 },
                    firstTrade: true,
                    currentSector: "tech"
                  }));
                  setCurrentScene("invest_amount_50k");
                }}
              >
                Invest $50,000
              </Button>
              <Button 
                className="w-full bg-purple-600 hover:bg-purple-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital - 75000,
                    portfolio: { ...prev.portfolio, TECH: 75000 },
                    firstTrade: true,
                    currentSector: "tech"
                  }));
                  setCurrentScene("invest_amount_75k");
                }}
              >
                Invest $75,000
              </Button>
            </div>
          </div>
        );

      case "invest_amount_25k":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Investment Results</h2>
            <p className="text-gray-600 mb-6">
              You've invested $25,000 in TechCorp.
            </p>
            <p className="text-gray-600 mb-6">
              A week later, the company announces strong earnings and the stock price increases by 15%!
            </p>
            <p className="text-gray-600 mb-6">
              Your investment is now worth ${(25000 * 1.15).toLocaleString()}.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("hold_position")}
              >
                Hold the Position
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital + (25000 * 1.15),
                    portfolio: { ...prev.portfolio },
                    lastTradeResult: "profit",
                    tradingExperience: prev.tradingExperience + 1
                  }));
                  delete gameState.portfolio.TECH;
                  setCurrentScene("take_profits");
                }}
              >
                Take Profits
              </Button>
            </div>
          </div>
        );

      case "take_profits":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Profit Taking</h2>
            <p className="text-gray-600 mb-6">
              You've successfully taken profits from your TechCorp investment!
            </p>
            <p className="text-gray-600 mb-6">
              Your current capital is now ${gameState.currentCapital.toLocaleString()}.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("next_investment_decision")}
              >
                Make Your Next Investment Decision
              </Button>
            </div>
          </div>
        );

      case "next_investment_decision":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Next Investment Decision</h2>
            <p className="text-gray-600 mb-6">
              With your current capital of ${gameState.currentCapital.toLocaleString()}, what would you like to do next?
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("research_tech")}
              >
                Research More Tech Companies
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => setCurrentScene("choose_next_strategy")}
              >
                Try a Different Investment Strategy
              </Button>
              <Button 
                className="w-full bg-purple-600 hover:bg-purple-700"
                onClick={() => setCurrentScene("market_analysis")}
              >
                Analyze Market Conditions
              </Button>
            </div>
          </div>
        );

      case "market_analysis":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Market Analysis</h2>
            <div className="space-y-6 mb-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Current Market Conditions</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>Tech Sector: Showing signs of overvaluation</li>
                    <li>Healthcare Sector: Stable with growth potential</li>
                    <li>Financial Sector: Undervalued with strong fundamentals</li>
                    <li>Overall Market: Moderate volatility</li>
                  </ul>
                </CardContent>
              </Card>
            </div>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("healthcare_opportunity")}
              >
                Explore Healthcare Opportunities
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => setCurrentScene("financial_opportunity")}
              >
                Explore Financial Sector Opportunities
              </Button>
              <Button 
                className="w-full bg-purple-600 hover:bg-purple-700"
                onClick={() => setCurrentScene("choose_next_strategy")}
              >
                Choose a Different Strategy
              </Button>
            </div>
          </div>
        );

      case "healthcare_opportunity":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Healthcare Investment Opportunity</h2>
            <div className="space-y-6 mb-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">HealthTech (HEAL)</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>Innovative medical technology company</li>
                    <li>Strong R&D pipeline</li>
                    <li>Recent FDA approval</li>
                    <li>Risk: Moderate to High</li>
                  </ul>
                </CardContent>
              </Card>
            </div>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("healthcare_success")}
              >
                Invest in HealthTech
              </Button>
              <Button 
                className="w-full bg-red-600 hover:bg-red-700"
                onClick={() => setCurrentScene("healthcare_missed")}
              >
                Pass on Investment
              </Button>
            </div>
          </div>
        );

      case "healthcare_success":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Healthcare Investment Success</h2>
            <p className="text-gray-600 mb-6">
              You invest $30,000 in HealthTech.
            </p>
            <p className="text-gray-600 mb-6">
              Three months later, the company announces a breakthrough in their R&D pipeline, and the stock price increases by 40%.
            </p>
            <p className="text-gray-600 mb-6">
              Your investment is now worth ${(30000 * 1.40).toLocaleString()}.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("ending_successful")}
              >
                Continue Your Investment Journey
              </Button>
            </div>
          </div>
        );

      case "healthcare_missed":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Missed Healthcare Opportunity</h2>
            <p className="text-gray-600 mb-6">
              You decide to pass on investing in HealthTech.
            </p>
            <p className="text-gray-600 mb-6">
              Three months later, the company announces a breakthrough in their R&D pipeline, and the stock price increases by 40%.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("ending_learning")}
              >
                Learn from This Experience
              </Button>
            </div>
          </div>
        );

      case "financial_opportunity":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Financial Sector Opportunity</h2>
            <div className="space-y-6 mb-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">FinBank (FNBK)</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>Well-established regional bank</li>
                    <li>Strong balance sheet</li>
                    <li>3.2% dividend yield</li>
                    <li>Risk: Low to Moderate</li>
                  </ul>
                </CardContent>
              </Card>
            </div>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("financial_success")}
              >
                Invest in FinBank
              </Button>
              <Button 
                className="w-full bg-red-600 hover:bg-red-700"
                onClick={() => setCurrentScene("financial_missed")}
              >
                Pass on Investment
              </Button>
            </div>
          </div>
        );

      case "financial_success":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Financial Investment Success</h2>
            <p className="text-gray-600 mb-6">
              You invest $30,000 in FinBank.
            </p>
            <p className="text-gray-600 mb-6">
              Over the next six months, you receive $960 in dividends (3.2% yield), and the stock price increases by 12%.
            </p>
            <p className="text-gray-600 mb-6">
              Your total return is 15.2%: 12% capital appreciation + 3.2% dividend yield.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("ending_balanced")}
              >
                Continue Your Investment Journey
              </Button>
            </div>
          </div>
        );

      case "financial_missed":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Missed Financial Opportunity</h2>
            <p className="text-gray-600 mb-6">
              You decide to pass on investing in FinBank.
            </p>
            <p className="text-gray-600 mb-6">
              Over the next six months, the stock provides a total return of 15.2% through dividends and price appreciation.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("ending_learning")}
              >
                Learn from This Experience
              </Button>
            </div>
          </div>
        );

      case "ending_successful":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">🎉 Successful Investment Journey 🎉</h2>
            <div className="space-y-4 mb-6">
              <p className="text-gray-700">Congratulations! You've achieved the "Successful Investor" ending!</p>
              <p className="text-gray-700">Your final portfolio value: ${gameState.currentCapital.toLocaleString()}</p>
              <p className="text-gray-700">Key achievements:</p>
              <ul className="list-disc pl-5 space-y-2">
                <li>Successfully identified and acted on investment opportunities</li>
                <li>Demonstrated understanding of different investment strategies</li>
                <li>Managed risk effectively</li>
                <li>Built a diversified portfolio</li>
              </ul>
              <p className="text-gray-700 mt-4">You've proven yourself as a skilled investor who can identify and capitalize on market opportunities!</p>
            </div>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setLocation("/learn")}
              >
                Return to Learning Center
              </Button>
            </div>
          </div>
        );

      case "ending_balanced":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">⚖️ Balanced Investment Journey ⚖️</h2>
            <div className="space-y-4 mb-6">
              <p className="text-gray-700">Congratulations! You've achieved the "Balanced Investor" ending!</p>
              <p className="text-gray-700">Your final portfolio value: ${gameState.currentCapital.toLocaleString()}</p>
              <p className="text-gray-700">Key takeaways:</p>
              <ul className="list-disc pl-5 space-y-2">
                <li>Successfully combined different investment strategies</li>
                <li>Maintained a balanced risk profile</li>
                <li>Generated both capital gains and income</li>
                <li>Learned the importance of portfolio diversification</li>
              </ul>
              <p className="text-gray-700 mt-4">You've shown great skill in maintaining a balanced approach to investing!</p>
            </div>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setLocation("/learn")}
              >
                Return to Learning Center
              </Button>
            </div>
          </div>
        );

      case "ending_learning":
        return (
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.5 }}
          >
            <motion.h2 
              className="text-2xl font-bold mb-4"
              initial={{ y: -20 }}
              animate={{ y: 0 }}
              transition={{ delay: 0.2, type: "spring" }}
            >
              📚 Learning Experience 📚
            </motion.h2>
            <motion.div 
              className="space-y-4 mb-6"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.4 }}
            >
              <p className="text-gray-700">You've achieved the "Learning Investor" ending!</p>
              <p className="text-gray-700">Your final portfolio value: ${gameState.currentCapital.toLocaleString()}</p>
              <p className="text-gray-700">Key lessons learned:</p>
              <motion.ul 
                className="list-disc pl-5 space-y-2"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.6 }}
              >
                <motion.li 
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.7 }}
                >
                  Importance of thorough research before investing
                </motion.li>
                <motion.li 
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.8 }}
                >
                  Value of diversification across different strategies
                </motion.li>
                <motion.li 
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.9 }}
                >
                  Understanding risk management
                </motion.li>
                <motion.li 
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 1.0 }}
                >
                  Patience and long-term thinking
                </motion.li>
              </motion.ul>
              <motion.p 
                className="text-gray-700 mt-4"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 1.2 }}
              >
                Remember: Every investment decision, whether successful or not, is an opportunity to learn and improve!
              </motion.p>
            </motion.div>
            <motion.div 
              className="space-y-4"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 1.4 }}
            >
              <motion.div
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                <Button 
                  className="w-full bg-blue-600 hover:bg-blue-700"
                  onClick={() => setLocation("/learn")}
                >
                  Return to Learning Center
                </Button>
              </motion.div>
            </motion.div>
          </motion.div>
        );

      case "invest_tech_etf":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Tech ETF Investment</h2>
            <div className="space-y-6 mb-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Tech Sector ETF (TECH)</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>Diversified exposure to tech sector</li>
                    <li>Low expense ratio (0.1%)</li>
                    <li>Includes major tech companies</li>
                    <li>Risk: Moderate</li>
                  </ul>
                </CardContent>
              </Card>
            </div>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital - 40000,
                    portfolio: { ...prev.portfolio, TECH_ETF: 40000 },
                    firstTrade: true,
                    currentSector: "tech",
                    investmentStrategy: "index"
                  }));
                  setCurrentScene("tech_etf_results");
                }}
              >
                Invest $40,000
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital - 60000,
                    portfolio: { ...prev.portfolio, TECH_ETF: 60000 },
                    firstTrade: true,
                    currentSector: "tech",
                    investmentStrategy: "index"
                  }));
                  setCurrentScene("tech_etf_results");
                }}
              >
                Invest $60,000
              </Button>
            </div>
          </div>
        );

      case "tech_etf_results":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Tech ETF Investment Results</h2>
            <p className="text-gray-600 mb-6">
              You've invested in the Tech Sector ETF.
            </p>
            <p className="text-gray-600 mb-6">
              Over the next three months, the tech sector experiences steady growth, and your investment increases by 12%.
            </p>
            <p className="text-gray-600 mb-6">
              Your investment is now worth ${(gameState.portfolio.TECH_ETF * 1.12).toLocaleString()}.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital + (prev.portfolio.TECH_ETF * 1.12),
                    portfolio: { ...prev.portfolio },
                    lastTradeResult: "profit",
                    tradingExperience: prev.tradingExperience + 1
                  }));
                  delete gameState.portfolio.TECH_ETF;
                  setCurrentScene("next_investment_decision");
                }}
              >
                Take Profits and Continue
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => setCurrentScene("next_investment_decision")}
              >
                Hold Position and Continue
              </Button>
            </div>
          </div>
        );

      case "invest_dataflow":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Invest in DataFlow</h2>
            <p className="text-gray-600 mb-6">
              How much would you like to invest in DataFlow?
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital - 30000,
                    portfolio: { ...prev.portfolio, DATA: 30000 },
                    firstTrade: true,
                    currentSector: "tech"
                  }));
                  setCurrentScene("dataflow_results");
                }}
              >
                Invest $30,000
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital - 50000,
                    portfolio: { ...prev.portfolio, DATA: 50000 },
                    firstTrade: true,
                    currentSector: "tech"
                  }));
                  setCurrentScene("dataflow_results");
                }}
              >
                Invest $50,000
              </Button>
            </div>
          </div>
        );

      case "dataflow_results":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">DataFlow Investment Results</h2>
            <p className="text-gray-600 mb-6">
              You've invested in DataFlow.
            </p>
            <p className="text-gray-600 mb-6">
              Two weeks later, the company announces a major AI breakthrough, and the stock price surges by 25%!
            </p>
            <p className="text-gray-600 mb-6">
              Your investment is now worth ${(gameState.portfolio.DATA * 1.25).toLocaleString()}.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital + (prev.portfolio.DATA * 1.25),
                    portfolio: { ...prev.portfolio },
                    lastTradeResult: "profit",
                    tradingExperience: prev.tradingExperience + 1
                  }));
                  delete gameState.portfolio.DATA;
                  setCurrentScene("next_investment_decision");
                }}
              >
                Take Profits and Continue
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => setCurrentScene("hold_dataflow")}
              >
                Hold Position
              </Button>
            </div>
          </div>
        );

      case "hold_dataflow":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Holding DataFlow</h2>
            <p className="text-gray-600 mb-6">
              You decide to hold your position in DataFlow.
            </p>
            <p className="text-gray-600 mb-6">
              A month later, market sentiment shifts and tech stocks face pressure. DataFlow's stock price drops by 10%.
            </p>
            <p className="text-gray-600 mb-6">
              Your investment is now worth ${(gameState.portfolio.DATA * 1.25 * 0.90).toLocaleString()}.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("continue_holding_dataflow")}
              >
                Continue Holding
              </Button>
              <Button 
                className="w-full bg-red-600 hover:bg-red-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital + (prev.portfolio.DATA * 1.25 * 0.90),
                    portfolio: { ...prev.portfolio },
                    lastTradeResult: "profit",
                    tradingExperience: prev.tradingExperience + 1
                  }));
                  delete gameState.portfolio.DATA;
                  setCurrentScene("next_investment_decision");
                }}
              >
                Sell and Take Profits
              </Button>
            </div>
          </div>
        );

      case "continue_holding_dataflow":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Long-term Results</h2>
            <p className="text-gray-600 mb-6">
              You maintain your position in DataFlow, believing in the company's long-term potential.
            </p>
            <p className="text-gray-600 mb-6">
              Three months later, the company announces a major partnership and the stock price increases by 35%!
            </p>
            <p className="text-gray-600 mb-6">
              Your investment is now worth ${(gameState.portfolio.DATA * 1.25 * 0.90 * 1.35).toLocaleString()}.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital + (prev.portfolio.DATA * 1.25 * 0.90 * 1.35),
                    portfolio: { ...prev.portfolio },
                    lastTradeResult: "profit",
                    tradingExperience: prev.tradingExperience + 1
                  }));
                  delete gameState.portfolio.DATA;
                  setCurrentScene("ending_successful");
                }}
              >
                Take Profits and End Journey
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => setCurrentScene("next_investment_decision")}
              >
                Continue Investing
              </Button>
            </div>
          </div>
        );

      case "invest_cloudnet":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Invest in CloudNet</h2>
            <p className="text-gray-600 mb-6">
              How much would you like to invest in CloudNet?
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital - 35000,
                    portfolio: { ...prev.portfolio, CLD: 35000 },
                    firstTrade: true,
                    currentSector: "tech"
                  }));
                  setCurrentScene("cloudnet_results");
                }}
              >
                Invest $35,000
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital - 55000,
                    portfolio: { ...prev.portfolio, CLD: 55000 },
                    firstTrade: true,
                    currentSector: "tech"
                  }));
                  setCurrentScene("cloudnet_results");
                }}
              >
                Invest $55,000
              </Button>
            </div>
          </div>
        );

      case "cloudnet_results":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">CloudNet Investment Results</h2>
            <p className="text-gray-600 mb-6">
              You've invested in CloudNet.
            </p>
            <p className="text-gray-600 mb-6">
              Over the next month, the company reports strong earnings and the stock price increases by 18%.
            </p>
            <p className="text-gray-600 mb-6">
              Your investment is now worth ${(gameState.portfolio.CLD * 1.18).toLocaleString()}.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital + (prev.portfolio.CLD * 1.18),
                    portfolio: { ...prev.portfolio },
                    lastTradeResult: "profit",
                    tradingExperience: prev.tradingExperience + 1
                  }));
                  delete gameState.portfolio.CLD;
                  setCurrentScene("next_investment_decision");
                }}
              >
                Take Profits and Continue
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => setCurrentScene("next_investment_decision")}
              >
                Hold Position and Continue
              </Button>
            </div>
          </div>
        );

      case "hold_position":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Holding TechCorp</h2>
            <p className="text-gray-600 mb-6">
              You decide to hold your position in TechCorp.
            </p>
            <p className="text-gray-600 mb-6">
              A month later, market sentiment shifts and tech stocks face pressure. TechCorp's stock price drops by 8%.
            </p>
            <p className="text-gray-600 mb-6">
              Your investment is now worth ${(25000 * 1.15 * 0.92).toLocaleString()}.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("continue_holding")}
              >
                Continue Holding
              </Button>
              <Button 
                className="w-full bg-red-600 hover:bg-red-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital + (25000 * 1.15 * 0.92),
                    portfolio: { ...prev.portfolio },
                    lastTradeResult: "profit",
                    tradingExperience: prev.tradingExperience + 1
                  }));
                  delete gameState.portfolio.TECH;
                  setCurrentScene("next_investment_decision");
                }}
              >
                Sell and Take Profits
              </Button>
            </div>
          </div>
        );

      case "continue_holding":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Long-term Results</h2>
            <p className="text-gray-600 mb-6">
              You maintain your position in TechCorp, believing in the company's long-term potential.
            </p>
            <p className="text-gray-600 mb-6">
              Three months later, the company announces a major partnership and the stock price increases by 25%!
            </p>
            <p className="text-gray-600 mb-6">
              Your investment is now worth ${(25000 * 1.15 * 0.92 * 1.25).toLocaleString()}.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital + (25000 * 1.15 * 0.92 * 1.25),
                    portfolio: { ...prev.portfolio },
                    lastTradeResult: "profit",
                    tradingExperience: prev.tradingExperience + 1
                  }));
                  delete gameState.portfolio.TECH;
                  setCurrentScene("ending_successful");
                }}
              >
                Take Profits and End Journey
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => setCurrentScene("next_investment_decision")}
              >
                Continue Investing
              </Button>
            </div>
          </div>
        );

      case "choose_next_strategy":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Choose Your Next Strategy</h2>
            <p className="text-gray-600 mb-6">
              With your current capital of ${gameState.currentCapital.toLocaleString()}, which investment strategy would you like to try next?
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("value_investing_path")}
              >
                Value Investing Path
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => setCurrentScene("dividend_investing_path")}
              >
                Dividend Investing Path
              </Button>
              <Button 
                className="w-full bg-purple-600 hover:bg-purple-700"
                onClick={() => setCurrentScene("index_investing_path")}
              >
                Index Investing Path
              </Button>
            </div>
          </div>
        );

      case "value_investing_path":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Value Investing Opportunity</h2>
            <div className="space-y-6 mb-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">SteadyCorp (STDY)</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>Undervalued manufacturing company</li>
                    <li>Strong cash flow</li>
                    <li>P/E ratio: 12 (below industry average)</li>
                    <li>Risk: Low to Moderate</li>
                  </ul>
                </CardContent>
              </Card>
            </div>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital - 40000,
                    portfolio: { ...prev.portfolio, STDY: 40000 },
                    investmentStrategy: "value"
                  }));
                  setCurrentScene("value_investing_success");
                }}
              >
                Invest in SteadyCorp
              </Button>
              <Button 
                className="w-full bg-red-600 hover:bg-red-700"
                onClick={() => setCurrentScene("value_investing_missed")}
              >
                Pass on Investment
              </Button>
            </div>
          </div>
        );

      case "value_investing_success":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Value Investment Success</h2>
            <p className="text-gray-600 mb-6">
              You invest $40,000 in SteadyCorp.
            </p>
            <p className="text-gray-600 mb-6">
              Over the next six months, the market recognizes the company's true value, and the stock price increases by 35%.
            </p>
            <p className="text-gray-600 mb-6">
              Your investment is now worth ${(40000 * 1.35).toLocaleString()}.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital + (40000 * 1.35),
                    portfolio: { ...prev.portfolio },
                    lastTradeResult: "profit",
                    tradingExperience: prev.tradingExperience + 1
                  }));
                  delete gameState.portfolio.STDY;
                  setCurrentScene("ending_successful");
                }}
              >
                Take Profits and End Journey
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => setCurrentScene("next_investment_decision")}
              >
                Continue Investing
              </Button>
            </div>
          </div>
        );

      case "value_investing_missed":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Missed Value Opportunity</h2>
            <p className="text-gray-600 mb-6">
              You decide to pass on investing in SteadyCorp.
            </p>
            <p className="text-gray-600 mb-6">
              Over the next six months, the market recognizes the company's true value, and the stock price increases by 35%.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("ending_learning")}
              >
                Learn from This Experience
              </Button>
            </div>
          </div>
        );

      case "dividend_investing_path":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Dividend Investing Opportunity</h2>
            <div className="space-y-6 mb-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">UtilityCo (UTIL)</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>Stable utility company</li>
                    <li>4.5% dividend yield</li>
                    <li>Consistent earnings</li>
                    <li>Risk: Low</li>
                  </ul>
                </CardContent>
              </Card>
            </div>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital - 45000,
                    portfolio: { ...prev.portfolio, UTIL: 45000 },
                    investmentStrategy: "dividend"
                  }));
                  setCurrentScene("dividend_investing_success");
                }}
              >
                Invest in UtilityCo
              </Button>
              <Button 
                className="w-full bg-red-600 hover:bg-red-700"
                onClick={() => setCurrentScene("dividend_investing_missed")}
              >
                Pass on Investment
              </Button>
            </div>
          </div>
        );

      case "dividend_investing_success":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Dividend Investment Success</h2>
            <p className="text-gray-600 mb-6">
              You invest $45,000 in UtilityCo.
            </p>
            <p className="text-gray-600 mb-6">
              Over the next year, you receive $2,025 in dividends (4.5% yield), and the stock price increases by 8%.
            </p>
            <p className="text-gray-600 mb-6">
              Your total return is 12.5%: 8% capital appreciation + 4.5% dividend yield.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital + (45000 * 1.125),
                    portfolio: { ...prev.portfolio },
                    lastTradeResult: "profit",
                    tradingExperience: prev.tradingExperience + 1
                  }));
                  delete gameState.portfolio.UTIL;
                  setCurrentScene("ending_balanced");
                }}
              >
                Take Profits and End Journey
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => setCurrentScene("next_investment_decision")}
              >
                Continue Investing
              </Button>
            </div>
          </div>
        );

      case "dividend_investing_missed":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Missed Dividend Opportunity</h2>
            <p className="text-gray-600 mb-6">
              You decide to pass on investing in UtilityCo.
            </p>
            <p className="text-gray-600 mb-6">
              Over the next year, the stock provides a total return of 12.5% through dividends and price appreciation.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("ending_learning")}
              >
                Learn from This Experience
              </Button>
            </div>
          </div>
        );

      case "index_investing_path":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Index Investing Opportunity</h2>
            <div className="space-y-6 mb-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Market Index Fund (MKT)</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>Broad market exposure</li>
                    <li>Low expense ratio (0.05%)</li>
                    <li>Diversified portfolio</li>
                    <li>Risk: Low</li>
                  </ul>
                </CardContent>
              </Card>
            </div>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital - 50000,
                    portfolio: { ...prev.portfolio, MKT: 50000 },
                    investmentStrategy: "index"
                  }));
                  setCurrentScene("index_investing_success");
                }}
              >
                Invest in Market Index Fund
              </Button>
              <Button 
                className="w-full bg-red-600 hover:bg-red-700"
                onClick={() => setCurrentScene("index_investing_missed")}
              >
                Pass on Investment
              </Button>
            </div>
          </div>
        );

      case "index_investing_success":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Index Investment Success</h2>
            <p className="text-gray-600 mb-6">
              You invest $50,000 in the Market Index Fund.
            </p>
            <p className="text-gray-600 mb-6">
              Over the next year, the market experiences steady growth, and your investment increases by 15%.
            </p>
            <p className="text-gray-600 mb-6">
              Your investment is now worth ${(50000 * 1.15).toLocaleString()}.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setGameState(prev => ({
                    ...prev,
                    currentCapital: prev.currentCapital + (50000 * 1.15),
                    portfolio: { ...prev.portfolio },
                    lastTradeResult: "profit",
                    tradingExperience: prev.tradingExperience + 1
                  }));
                  delete gameState.portfolio.MKT;
                  setCurrentScene("ending_balanced");
                }}
              >
                Take Profits and End Journey
              </Button>
              <Button 
                className="w-full bg-green-600 hover:bg-green-700"
                onClick={() => setCurrentScene("next_investment_decision")}
              >
                Continue Investing
              </Button>
            </div>
          </div>
        );

      case "index_investing_missed":
        return (
          <div>
            <h2 className="text-2xl font-bold mb-4">Missed Index Opportunity</h2>
            <p className="text-gray-600 mb-6">
              You decide to pass on investing in the Market Index Fund.
            </p>
            <p className="text-gray-600 mb-6">
              Over the next year, the market experiences steady growth, and the fund increases by 15%.
            </p>
            <div className="space-y-4">
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => setCurrentScene("ending_learning")}
              >
                Learn from This Experience
              </Button>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 pb-20">
      <div className="container mx-auto px-4 py-8">
        <div className="mb-6">
          <Button
            onClick={() => setLocation("/learn")}
            variant="outline"
            className="flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            Back to Games
          </Button>
        </div>

        <Card className="max-w-2xl mx-auto">
          <CardContent className="pt-6">
            {renderScene()}
          </CardContent>
        </Card>
      </div>
      <AppNavigation />
    </div>
  );
}

================
File: client/src/pages/learn.tsx
================
import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import AppNavigation from "@/components/app-navigation";
import { motion, AnimatePresence, useSpring } from "framer-motion";
import {
  Brain,
  Trophy,
  History,
  Briefcase,
  LineChart,
  Gamepad2,
  Building2,
  Users,
  TrendingUp,
  Star,
  Heart,
  Save,
  ArrowLeft,
  DollarSign,
  Lightbulb,
  AlertTriangle
} from "lucide-react";
import { useLocation } from "wouter";
import { NORMAL_DECISIONS, BOARDROOM_DECISIONS } from '@/constants/ceo-decisions';

interface Company {
  name: string;
  value: number;
  employees: number;
  revenue: number;
  happiness: number;
  innovation: number;
  reputation: number;
}

interface Decision {
  id: number;
  title: string;
  description: string;
  options: {
    text: string;
    effects: {
      value?: number;
      employees?: number;
      revenue?: number;
      happiness?: number;
      innovation?: number;
      reputation?: number;
    };
  }[];
  icon: JSX.Element;
  iconColor: string;
}

const INITIAL_COMPANY: Company = {
  name: "Startup Inc.",
  value: 100000,
  employees: 5,
  revenue: 10000,
  happiness: 80,
  innovation: 70,
  reputation: 60
};

const DECISIONS: Decision[] = [
  {
    id: 1,
    title: "Basic Financial Planning",
    description: "Your CFO suggests implementing basic financial planning tools. (Level 1 Finance Tip: Budgeting is the foundation of financial success)",
    options: [
      {
        text: "Implement budgeting software",
        effects: { 
          value: -5000,
          revenue: 2000,
          innovation: 8,
          happiness: -5  // Employees dislike strict budget tracking
        }
      },
      {
        text: "Hire financial analysts",
        effects: { 
          value: -15000,
          revenue: 3000,
          employees: 2,
          reputation: 10,
          happiness: -8  // Team feels monitored
        }
      },
      {
        text: "Continue with spreadsheets",
        effects: { 
          value: 2000,  // Saves money
          innovation: -10,
          reputation: -5
        }
      }
    ],
    icon: <Brain className="w-6 h-6 text-purple-500" />,
    iconColor: "text-purple-500"
  },
  {
    id: 2,
    title: "Employee Wellness",
    description: "Employees are requesting a wellness program. (Happy employees are productive employees!)",
    options: [
      {
        text: "Full program (gym, counseling, health insurance)",
        effects: { 
          value: -20000,
          happiness: 25,
          reputation: 15,
          revenue: -1000  // Short term cost
        }
      },
      {
        text: "Basic health insurance only",
        effects: { 
          value: -10000,
          happiness: 10,
          reputation: 5,
          innovation: -5  // Less creative environment
        }
      },
      {
        text: "Wellness workshops only",
        effects: { 
          value: -2000,
          happiness: 5,
          reputation: -5,  // Seen as minimal effort
          innovation: -2
        }
      }
    ],
    icon: <Heart className="w-6 h-6 text-red-500" />,
    iconColor: "text-red-500"
  },
  {
    id: 3,
    title: "Office Pet Policy",
    description: "The team suggests allowing pets in the office! 🐕",
    options: [
      {
        text: "Allow all pets",
        effects: { 
          happiness: 20,
          innovation: 5,
          reputation: -10,  // Some clients may dislike it
          revenue: -500    // Additional cleaning costs
        }
      },
      {
        text: "Designated pet days only",
        effects: { 
          happiness: 10,
          reputation: -2,
          innovation: 2
        }
      },
      {
        text: "Keep pet-free policy",
        effects: { 
          happiness: -10,
          reputation: 5,   // Professional image
          revenue: 200     // No additional maintenance
        }
      }
    ],
    icon: <Heart className="w-6 h-6 text-yellow-500" />,
    iconColor: "text-yellow-500"
  },
  {
    id: 4,
    title: "Innovation Challenge",
    description: "Your R&D team has some wild ideas! (Level 5+ Tip: Innovation drives long-term growth)",
    options: [
      {
        text: "Fund experimental projects",
        effects: { 
          value: -30000,
          innovation: 25,
          reputation: 15,
          revenue: -2000,
          happiness: 15
        }
      },
      {
        text: "Focus on practical improvements",
        effects: { 
          innovation: 10,
          value: -10000,
          revenue: 1000,
          happiness: -5    // Less exciting work
        }
      },
      {
        text: "Maintain current projects",
        effects: { 
          innovation: -10,
          happiness: -8,
          reputation: -5,
          revenue: 500     // Short-term savings
        }
      }
    ],
    icon: <Brain className="w-6 h-6 text-blue-500" />,
    iconColor: "text-blue-500"
  },
  {
    id: 5,
    title: "Work Environment",
    description: "Time to decide on the office work policy!",
    options: [
      {
        text: "Full remote work",
        effects: { 
          value: 20000,    // Save on office costs
          happiness: 15,
          innovation: -10,  // Less in-person collaboration
          reputation: -5    // Some clients prefer office presence
        }
      },
      {
        text: "Hybrid model",
        effects: { 
          value: 5000,
          happiness: 10,
          innovation: 5,
          revenue: -500    // Maintaining both setups
        }
      },
      {
        text: "Full office return",
        effects: { 
          value: -10000,   // Office costs
          happiness: -15,   // Some prefer remote
          innovation: 15,   // Better collaboration
          reputation: 10    // Traditional business image
        }
      }
    ],
    icon: <Building2 className="w-6 h-6 text-green-500" />,
    iconColor: "text-green-500"
  },
  {
    id: 6,
    title: "Marketing Strategy",
    description: "Choose your company's marketing approach:",
    options: [
      {
        text: "Social Media Focus",
        effects: { 
          value: -5000,
          reputation: 15,
          innovation: 10,
          revenue: -1000,
          happiness: -5    // Social media pressure
        }
      },
      {
        text: "Traditional Marketing",
        effects: { 
          value: -15000,
          reputation: 5,
          revenue: 2000,
          innovation: -10  // Less modern approach
        }
      },
      {
        text: "Word of Mouth Only",
        effects: { 
          value: 5000,     // Save money
          reputation: -10,  // Limited reach
          revenue: -2000,
          innovation: -5
        }
      }
    ],
    icon: <TrendingUp className="w-6 h-6 text-purple-500" />,
    iconColor: "text-purple-500"
  },
  {
    id: 7,
    title: "Team Building",
    description: "How will you strengthen team bonds?",
    options: [
      {
        text: "Extreme Sports Retreat",
        effects: { 
          value: -20000,
          happiness: 25,
          innovation: 15,
          reputation: -5,   // Seen as risky
          employees: -1     // Someone quit in protest
        }
      },
      {
        text: "Volunteer Project",
        effects: { 
          value: -5000,
          happiness: 15,
          reputation: 20,
          revenue: -500,
          innovation: 5
        }
      },
      {
        text: "Online Game Tournament",
        effects: { 
          value: -1000,
          happiness: 10,
          innovation: 5,
          reputation: -10,  // Less professional image
          revenue: 200     // Minimal costs
        }
      }
    ],
    icon: <Users className="w-6 h-6 text-pink-500" />,
    iconColor: "text-pink-500"
  }
];

const StatCard = ({ title, value, icon, format, previousValue }) => {
  const change = value - (previousValue || value);
  const changeColor = change > 0 ? 'text-green-500' : change < 0 ? 'text-red-500' : 'text-blue-500';
  const changeIcon = change > 0 ? '↑' : change < 0 ? '↓' : '→';

  return (
    <Card>
      <CardContent className="pt-4">
        <div className="flex items-center justify-between mb-1">
          <span className="text-xs text-gray-500">{title}</span>
          {icon}
        </div>
        <div className="flex items-center justify-between">
          <span className="text-lg font-bold">{format ? format(value) : value}</span>
          {previousValue !== undefined && (
            <span className={`text-xs font-medium ${changeColor}`}>
              {changeIcon} {Math.abs(change).toLocaleString()}
            </span>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

const MetricBar = ({ title, value, icon, previousValue }) => {
  const change = value - (previousValue || value);
  const color = change > 0 ? 'bg-green-500' : change < 0 ? 'bg-red-500' : 'bg-blue-500';
  const changeColor = change > 0 ? 'text-green-500' : change < 0 ? 'text-red-500' : 'text-blue-500';
  const changeIcon = change > 0 ? '↑' : change < 0 ? '↓' : '→';

  return (
    <div className="flex flex-col gap-2">
      <div className="flex items-center justify-between">
        <span className="text-sm text-gray-500">{title}</span>
        {icon}
      </div>
      <div className="relative h-2 bg-gray-100 rounded-full overflow-hidden">
        <motion.div 
          className={`absolute top-0 left-0 h-full ${color} rounded-full`}
          animate={{ width: `${value}%` }}
          transition={{ type: "spring", stiffness: 100, damping: 30 }}
        />
      </div>
      <div className="flex items-center justify-between">
        <span className="text-sm font-medium">{value}%</span>
        {previousValue !== undefined && (
          <span className={`text-sm font-medium ${changeColor}`}>
            {changeIcon} {Math.abs(change)}%
          </span>
        )}
      </div>
    </div>
  );
};

export default function LearnPage() {
  const [, setLocation] = useLocation();
  const [showCEOGame, setShowCEOGame] = useState(false);
  const [isBoardRoomMode, setIsBoardRoomMode] = useState(false);
  const [showResetConfirmation, setShowResetConfirmation] = useState(false);
  const [gameState, setGameState] = useState({
    company: INITIAL_COMPANY,
    previousCompany: null as Company | null,
    level: 1,
    xp: 0,
    decisions: 0,
    currentDecision: null as Decision | null,
    decisionHistory: [] as {
      decision: Decision;
      effect: any;
      timestamp: string;
    }[]
  });

  // Add ref to track scroll position
  const scrollRef = useRef<HTMLDivElement>(null);

  // Add effect to track state changes
  useEffect(() => {
    console.log('Game state changed:', {
      showCEOGame,
      gameState,
      timestamp: new Date().toISOString()
    });
  }, [gameState, showCEOGame]);

  const xpProgress = (gameState.xp % 100) / 100 * 100;

  const handleDecision = (effects: any) => {
    // Save current scroll position
    const currentScroll = scrollRef.current?.scrollTop || 0;
    
    // Store previous values for comparison
    const previousCompany = { ...gameState.company };
    
    const newCompany = { ...gameState.company };
    
    // Apply effects to company metrics
    Object.entries(effects).forEach(([key, value]) => {
      if (key in newCompany) {
        // @ts-ignore
        newCompany[key] += value as number;
        
        // Clamp percentage values between 0 and 100
        if (key === 'happiness' || key === 'innovation' || key === 'reputation') {
          newCompany[key] = Math.max(0, Math.min(100, newCompany[key]));
        }
        // Ensure minimum values for numerical metrics
        if (key === 'value') {
          newCompany[key] = Math.max(1000, newCompany[key]); // Minimum company value
        }
        if (key === 'revenue') {
          newCompany[key] = Math.max(0, newCompany[key]);
        }
        if (key === 'employees') {
          newCompany[key] = Math.max(1, newCompany[key]); // At least 1 employee
        }
      }
    });

    // Calculate new XP and level
    const newXP = gameState.xp + (isBoardRoomMode ? 20 : 10);
    const newLevel = Math.floor(newXP / 100) + 1;

    // Update game state
    setGameState(prev => ({
      ...prev,
      company: newCompany,
      previousCompany, // Store previous values for comparison
      decisions: prev.decisions + 1,
      xp: newXP,
      level: newLevel,
      decisionHistory: [
        {
          decision: prev.currentDecision!,
          effect: effects,
          timestamp: new Date().toISOString()
        },
        ...prev.decisionHistory
      ]
    }));

    // Generate next decision immediately
    generateDecision();

    // Restore scroll position after state updates
    requestAnimationFrame(() => {
      if (scrollRef.current) {
        scrollRef.current.scrollTop = currentScroll;
      }
    });
  };

  const generateDecision = () => {
    const decisions = isBoardRoomMode ? BOARDROOM_DECISIONS : NORMAL_DECISIONS;
    
    // Filter out decisions that have already been made in the current session
    const availableDecisions = decisions.filter(decision => 
      !gameState.decisionHistory.some(historyItem => 
        historyItem.decision.title === decision.title
      )
    );

    // If we've used all decisions, reset the pool
    const decisionsToUse = availableDecisions.length > 0 ? availableDecisions : decisions;
    
    const randomIndex = Math.floor(Math.random() * decisionsToUse.length);
    setGameState(prev => ({
      ...prev,
      currentDecision: decisionsToUse[randomIndex]
    }));
  };

  const resetGame = () => {
    setGameState({
      company: INITIAL_COMPANY,
      level: 1,
      xp: 0,
      decisions: 0,
      currentDecision: null,
      decisionHistory: [],
      previousCompany: null
    });
    setShowResetConfirmation(false);
    setIsBoardRoomMode(false);
  };

  const ResetConfirmationDialog = () => (
    <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center">
      <Card className="w-[90%] max-w-md mx-4">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <AlertTriangle className="w-6 h-6 text-yellow-500" />
            Reset Game?
          </CardTitle>
          <CardDescription>
            Are you sure you want to reset? You will lose all your progress and return to mode selection.
          </CardDescription>
        </CardHeader>
        <CardContent className="flex gap-4">
          <Button
            variant="outline"
            className="flex-1"
            onClick={() => setShowResetConfirmation(false)}
          >
            Cancel
          </Button>
          <Button
            variant="destructive"
            className="flex-1"
            onClick={resetGame}
          >
            Reset Game
          </Button>
        </CardContent>
      </Card>
    </div>
  );

  const CEOGameInterface = () => {
    return (
      <div className="fixed inset-0 bg-white z-50">
        <div 
          ref={scrollRef}
          className="container mx-auto px-4 py-8 h-full overflow-y-auto"
        >
          <div className="mb-6 sticky top-0 bg-white z-10 py-4">
            <div className="flex justify-between items-center">
              <Button
                onClick={() => {
                  setShowCEOGame(false);
                  setIsBoardRoomMode(false);
                }}
                variant="outline"
                className="flex items-center gap-2"
              >
                <ArrowLeft className="w-4 h-4" />
                Back to Games
              </Button>
              <div className="flex items-center gap-4">
                <div className={`flex items-center gap-2 ${isBoardRoomMode ? 'text-red-600' : 'text-blue-600'}`}>
                  {isBoardRoomMode ? (
                    <>
                      <Building2 className="w-5 h-5" />
                      <span className="font-semibold">CEO Simulator - Board Room Mode</span>
                    </>
                  ) : (
                    <>
                      <Briefcase className="w-5 h-5" />
                      <span className="font-semibold">CEO Simulator - Normal Mode</span>
                    </>
                  )}
                </div>
                <Button
                  onClick={() => setShowResetConfirmation(true)}
                  variant="outline"
                  className="flex items-center gap-2"
                >
                  <Save className="w-4 h-4" />
                  Reset Game
                </Button>
              </div>
            </div>
          </div>

          <div className="mb-8">
            <h1 className="text-3xl font-bold mb-2">{gameState.company.name}</h1>
            <p className="text-gray-600">Level {gameState.level} • {gameState.decisions} Decisions Made</p>
          </div>

          {/* Numerical Stats */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
            <StatCard
              title="Company Value"
              value={gameState.company.value}
              icon={<DollarSign className="w-5 h-5 text-green-500" />}
              format={(v) => "$" + v.toLocaleString()}
              previousValue={gameState.previousCompany?.value}
            />
            <StatCard
              title="Monthly Revenue"
              value={gameState.company.revenue}
              icon={<TrendingUp className="w-5 h-5 text-blue-500" />}
              format={(v) => "$" + v.toLocaleString()}
              previousValue={gameState.previousCompany?.revenue}
            />
            <StatCard
              title="Team Size"
              value={gameState.company.employees}
              icon={<Users className="w-5 h-5 text-purple-500" />}
              format={(v) => v + " employees"}
              previousValue={gameState.previousCompany?.employees}
            />
          </div>

          {/* Percentage Metrics */}
          <Card className="mb-8">
            <CardContent className="pt-6">
              <div className="grid gap-6">
                <MetricBar
                  title="Employee Happiness"
                  value={gameState.company.happiness}
                  icon={<Heart className="w-5 h-5 text-red-500" />}
                  previousValue={gameState.previousCompany?.happiness}
                />
                <MetricBar
                  title="Innovation Level"
                  value={gameState.company.innovation}
                  icon={<Lightbulb className="w-5 h-5 text-yellow-500" />}
                  previousValue={gameState.previousCompany?.innovation}
                />
                <MetricBar
                  title="Company Reputation"
                  value={gameState.company.reputation}
                  icon={<Star className="w-5 h-5 text-yellow-500" />}
                  previousValue={gameState.previousCompany?.reputation}
                />
              </div>
            </CardContent>
          </Card>

          {/* Current Decision */}
          <div className="mb-8">
            {gameState.currentDecision ? (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-3">
                    {gameState.currentDecision.icon && (
                      <gameState.currentDecision.icon 
                        className={`w-6 h-6 ${gameState.currentDecision.iconColor}`} 
                      />
                    )}
                    {gameState.currentDecision.title}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-600 mb-4">{gameState.currentDecision.description}</p>
                  <div className="grid gap-3">
                    {gameState.currentDecision.options.map((option, index) => (
                      <Button
                        key={index}
                        onClick={() => handleDecision(option.effects)}
                        variant="outline"
                        className="w-full text-left justify-start h-auto py-3 px-4"
                      >
                        {option.text}
                      </Button>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ) : (
              <div className="flex justify-center">
                <Button 
                  onClick={() => generateDecision()}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  Next Decision
                </Button>
              </div>
            )}
          </div>

          {/* Decision History */}
          {gameState.decisionHistory.length > 0 && (
            <div className="mt-8">
              <h2 className="text-2xl font-bold mb-4">Decision History</h2>
              <div className="space-y-4">
                {gameState.decisionHistory.map((historyItem, index) => (
                  <Card key={index} className="bg-gray-50">
                    <CardHeader>
                      <CardTitle className="flex items-center gap-3 text-lg">
                        {historyItem.decision.icon && (
                          <historyItem.decision.icon 
                            className={`w-6 h-6 ${historyItem.decision.iconColor}`}
                          />
                        )}
                        {historyItem.decision.title}
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm text-gray-600">
                        {new Date(historyItem.timestamp).toLocaleString()}
                      </p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          )}
        </div>
        {showResetConfirmation && <ResetConfirmationDialog />}
      </div>
    );
  };

  const ModeSelection = () => (
    <div className="fixed inset-0 bg-white z-50 overflow-y-auto">
      <div className="container mx-auto px-4 py-8 min-h-screen">
        <div className="mb-6 sticky top-0 bg-white z-10 py-4">
          <Button
            onClick={() => setShowCEOGame(false)}
            variant="outline"
            className="flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            Back to Games
          </Button>
        </div>
        
        <h1 className="text-3xl font-bold mb-2">CEO Simulator</h1>
        <p className="text-gray-600 mb-8">Choose your preferred mode to start making decisions as a CEO</p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 pb-20">
          <Card className="hover:shadow-lg transition-shadow duration-200">
            <CardHeader>
              <div className="flex items-center gap-4">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Briefcase className="w-6 h-6 text-blue-600" />
                </div>
                <div>
                  <CardTitle className="text-xl">Normal Mode</CardTitle>
                  <CardDescription>Day-to-day operational decisions</CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <ul className="list-disc pl-5 space-y-2 mb-6 text-gray-600">
                <li>Manage routine operations</li>
                <li>Lower risk decisions</li>
                <li>Steady progression</li>
                <li>Perfect for learning</li>
              </ul>
              <Button 
                className="w-full bg-blue-600 hover:bg-blue-700"
                onClick={() => {
                  setIsBoardRoomMode(false);
                  generateDecision();
                }}
              >
                Start Normal Mode
              </Button>
            </CardContent>
          </Card>

          <Card className="hover:shadow-lg transition-shadow duration-200">
            <CardHeader>
              <div className="flex items-center gap-4">
                <div className="p-2 bg-red-100 rounded-lg">
                  <Building2 className="w-6 h-6 text-red-600" />
                </div>
                <div>
                  <CardTitle className="text-xl">Board Room Mode</CardTitle>
                  <CardDescription>High-stakes strategic decisions</CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <ul className="list-disc pl-5 space-y-2 mb-6 text-gray-600">
                <li>Strategic company-wide decisions</li>
                <li>High risk, high reward</li>
                <li>Major impact on metrics</li>
                <li>For experienced players</li>
              </ul>
              <Button 
                className="w-full bg-red-600 hover:bg-red-700"
                onClick={() => {
                  setIsBoardRoomMode(true);
                  generateDecision();
                }}
              >
                Start Board Room Mode
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 }
  };

  return (
    <div className="min-h-screen bg-gray-50 pb-20">
      <div className="container mx-auto px-4 py-8">
        <motion.h1 
          className="text-3xl font-bold mb-8 text-gray-900"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          Learning Games
        </motion.h1>
        <motion.div 
          className="grid grid-cols-1 md:grid-cols-2 gap-6"
          variants={container}
          initial="hidden"
          animate="show"
        >
          {/* CEO Simulator Card */}
          <motion.div variants={item}>
            <Card className="hover:shadow-lg transition-shadow duration-200 relative overflow-hidden">
              <motion.div
                className="absolute inset-0 bg-gradient-to-br from-orange-100/50 to-transparent"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.5 }}
              />
              <CardHeader>
                <div className="flex items-center gap-4">
                  <motion.div 
                    className="p-2 bg-orange-100 rounded-lg"
                    whileHover={{ scale: 1.1, rotate: 5 }}
                  >
                    <Briefcase className="w-6 h-6 text-orange-600" />
                  </motion.div>
                  <div>
                    <CardTitle className="text-xl">CEO Simulator</CardTitle>
                    <CardDescription>Make strategic decisions as a CEO in two exciting modes: Board Room (high-stakes) or Normal (day-to-day operations)</CardDescription>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <Button 
                  className="w-full bg-orange-600 hover:bg-orange-700 transform transition-transform hover:scale-102 active:scale-98"
                  onClick={() => setShowCEOGame(true)}
                >
                  Start CEO Simulator
                </Button>
              </CardContent>
            </Card>
          </motion.div>

          {/* Time Attack Quiz */}
          <motion.div variants={item}>
            <Card className="hover:shadow-lg transition-shadow duration-200 relative overflow-hidden">
              <motion.div
                className="absolute inset-0 bg-gradient-to-br from-green-100/50 to-transparent"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.5 }}
              />
              <CardHeader>
                <div className="flex items-center gap-4">
                  <motion.div 
                    className="p-2 bg-green-100 rounded-lg"
                    whileHover={{ scale: 1.1, rotate: -5 }}
                  >
                    <Trophy className="w-6 h-6 text-green-600" />
                  </motion.div>
                  <div>
                    <CardTitle className="text-xl">Ticket Time Attack</CardTitle>
                    <CardDescription>Test your knowledge with quick questions about investing and earn raffle tickets</CardDescription>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <Button 
                  className="w-full bg-green-600 hover:bg-green-700 transform transition-transform hover:scale-102 active:scale-98"
                  onClick={() => setLocation("/time-attack")}
                >
                  Start Game
                </Button>
              </CardContent>
            </Card>
          </motion.div>

          {/* Market Adventure */}
          <motion.div variants={item}>
            <Card className="hover:shadow-lg transition-shadow duration-200 relative overflow-hidden">
              <motion.div
                className="absolute inset-0 bg-gradient-to-br from-yellow-100/50 to-transparent"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.5 }}
              />
              <CardHeader>
                <div className="flex items-center gap-4">
                  <motion.div 
                    className="p-2 bg-yellow-100 rounded-lg"
                    whileHover={{ scale: 1.1, rotate: -5 }}
                  >
                    <Gamepad2 className="w-6 h-6 text-yellow-600" />
                  </motion.div>
                  <div>
                    <CardTitle className="text-xl">Market Adventure</CardTitle>
                    <CardDescription>Simulate market trading and build your virtual portfolio</CardDescription>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <Button 
                  className="w-full bg-yellow-600 hover:bg-yellow-700 transform transition-transform hover:scale-102 active:scale-98"
                  onClick={() => setLocation("/market-adventure")}
                >
                  Start Adventure
                </Button>
              </CardContent>
            </Card>
          </motion.div>

          {/* Historical Simulations */}
          <motion.div variants={item}>
            <Card className="hover:shadow-lg transition-shadow duration-200 relative overflow-hidden">
              <motion.div
                className="absolute inset-0 bg-gradient-to-br from-purple-100/50 to-transparent"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.5 }}
              />
              <CardHeader>
                <div className="flex items-center gap-4">
                  <motion.div 
                    className="p-2 bg-purple-100 rounded-lg"
                    whileHover={{ scale: 1.1, rotate: 5 }}
                  >
                    <History className="w-6 h-6 text-purple-600" />
                  </motion.div>
                  <div>
                    <CardTitle className="text-xl">Historical Investor Journey</CardTitle>
                    <CardDescription>Walk through the career of famous investors and their key decisions</CardDescription>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <Button 
                  className="w-full bg-purple-600 hover:bg-purple-700 transform transition-transform hover:scale-102 active:scale-98"
                  onClick={() => setLocation("/investor-simulator")}
                >
                  Start Journey
                </Button>
              </CardContent>
            </Card>
          </motion.div>
        </motion.div>
      </div>
      <AppNavigation />
      
      <AnimatePresence mode="wait">
        {showCEOGame && !gameState.currentDecision && <ModeSelection />}
        {showCEOGame && gameState.currentDecision && <CEOGameInterface />}
      </AnimatePresence>
    </div>
  );
}

================
File: client/src/pages/lesson-page.tsx
================
import { useState, useEffect } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useLocation, useParams } from "wouter";
import { Card, Stack, UserProgress } from "@shared/schema";
import { useAuth } from "@/hooks/use-auth";
import { useUserProgress } from "@/contexts/user-progress-context";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { X, Info, AlertCircle, Loader2 } from "lucide-react";
import { Progress } from "@/components/ui/progress";
import LessonCard from "@/components/lesson-card";
import QuizCard from "@/components/quiz-card";
import StackCompleteCard from "@/components/stack-complete-card";

export default function LessonPage() {
  const { stackId } = useParams();
  const [_, setLocation] = useLocation();
  const { user } = useAuth();
  const { updateUserXp } = useUserProgress();
  
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [showCompleteCard, setShowCompleteCard] = useState(false);
  const [earnedXp, setEarnedXp] = useState(0);
  
  // Get stack details
  const { data: stack, isLoading: isLoadingStack } = useQuery<Stack>({
    queryKey: [`/api/stacks/${stackId}`],
    enabled: !!stackId,
  });
  
  // Get cards for this stack
  const { data: cards, isLoading: isLoadingCards } = useQuery<Card[]>({
    queryKey: [`/api/stacks/${stackId}/cards`],
    enabled: !!stackId,
  });
  
  // Get user progress for this stack
  const { data: userProgress, isLoading: isLoadingProgress } = useQuery<UserProgress>({
    queryKey: [`/api/user-progress/${stackId}`],
    enabled: !!stackId && !!user,
  });
  
  // Update user progress mutation
  const updateProgressMutation = useMutation({
    mutationFn: async (data: { currentCardIndex: number, completed: boolean, earnedXp: number }) => {
      const res = await apiRequest("PATCH", `/api/user-progress/${stackId}`, data);
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/user-progress/${stackId}`] });
      queryClient.invalidateQueries({ queryKey: ["/api/user-progress"] });
      queryClient.invalidateQueries({ queryKey: ["/api/user-daily-progress"] });
      queryClient.invalidateQueries({ queryKey: ["/api/user"] });
      queryClient.invalidateQueries({ queryKey: ["/api/user-badges"] });
    }
  });
  
  // Initialize with user's saved progress
  useEffect(() => {
    if (userProgress && !isLoadingProgress) {
      setCurrentCardIndex(userProgress.currentCardIndex);
    }
  }, [userProgress, isLoadingProgress]);
  
  // Update progress when moving to next card
  const handleNextCard = (xpToAdd = 5) => {
    if (!cards) return;
    
    setEarnedXp(prev => prev + xpToAdd);
    
    const newIndex = currentCardIndex + 1;
    setCurrentCardIndex(newIndex);
    
    // Check if lesson is complete
    if (newIndex >= cards.length) {
      setShowCompleteCard(true);
      updateProgressMutation.mutate({
        currentCardIndex: newIndex,
        completed: true,
        earnedXp: earnedXp + xpToAdd
      });
      
      // Update user XP context
      updateUserXp(earnedXp + xpToAdd);
    } else {
      updateProgressMutation.mutate({
        currentCardIndex: newIndex,
        completed: false,
        earnedXp: 0 // We only award XP when the stack is completed
      });
    }
  };
  
  const handleReturn = () => {
    setLocation("/");
  };
  
  const isLoading = isLoadingStack || isLoadingCards || isLoadingProgress;
  
  if (isLoading) {
    return (
      <div className="fixed inset-0 bg-gray-50 z-40 flex items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }
  
  if (!stack || !cards) {
    return (
      <div className="fixed inset-0 bg-gray-50 z-40 flex flex-col items-center justify-center p-4">
        <AlertCircle className="h-12 w-12 text-red-500 mb-4" />
        <h2 className="text-xl font-semibold text-gray-800 mb-2">Stack Not Found</h2>
        <p className="text-gray-600 mb-6 text-center">We couldn't find the learning stack you're looking for.</p>
        <button 
          onClick={handleReturn}
          className="bg-primary-500 hover:bg-primary-600 text-white font-medium py-2 px-4 rounded-lg transition duration-200"
        >
          Return to Home
        </button>
      </div>
    );
  }
  
  return (
    <div className="fixed inset-0 bg-gray-50 z-40">
      <div className="relative h-full flex flex-col">
        {/* Lesson Header */}
        <div className="p-4 flex items-center justify-between bg-white shadow-sm">
          <button 
            onClick={handleReturn}
            className="p-2 rounded-full hover:bg-gray-100 transition"
          >
            <X className="text-gray-700" />
          </button>
          <div className="flex items-center">
            <Progress 
              value={(currentCardIndex / cards.length) * 100} 
              className="w-32 h-2"
            />
            <span className="ml-2 text-sm font-medium text-gray-600">
              {currentCardIndex}/{cards.length}
            </span>
          </div>
          <button className="p-2 rounded-full hover:bg-gray-100 transition">
            <Info className="text-gray-700" size={20} />
          </button>
        </div>
        
        {/* Card Stack */}
        <div className="flex-1 relative overflow-hidden">
          <div className="absolute inset-0 flex items-center justify-center">
            {showCompleteCard ? (
              <StackCompleteCard 
                stackName={stack.title}
                xpEarned={earnedXp}
                onReturn={handleReturn}
                industry={stack.industry}
              />
            ) : (
              <>
                {cards[currentCardIndex]?.type === 'quiz' ? (
                  <QuizCard 
                    card={cards[currentCardIndex]} 
                    onNextCard={() => handleNextCard(10)}
                  />
                ) : (
                  <LessonCard 
                    card={cards[currentCardIndex]} 
                    onNextCard={handleNextCard}
                  />
                )}
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: client/src/pages/market-adventure.tsx
================
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { motion, AnimatePresence } from "framer-motion";
import AppNavigation from "@/components/app-navigation";
import { 
  ArrowLeft, ArrowRight, Coins, Trophy, Star, TrendingUp, TrendingDown, Save, Lock,
  Rocket, Leaf, Heart, Database, Zap, Building2, Globe, Cpu, Landmark, Car, Cloud, Brain, Space, Atom, RefreshCcw
} from "lucide-react";

interface Stock {
  id: number;
  name: string;
  symbol: string;
  price: number;
  change: number;
  marketCap: number;
  industry: string;
  description: string;
  tier: number;
  volatility: number;
}

interface MarketEvent {
  type: "positive" | "negative";
  message: string;
  icon: JSX.Element;
  color: string;
}

interface GameState {
  money: number;
  portfolio: { [key: string]: number };
  level: number;
  xp: number;
  unlockedStocks: string[];
  currentEvent: MarketEvent | null;
  lastSaved: number;
  totalTrades: number;
}

const SAVE_KEY = "market_adventure_save";
const AUTO_SAVE_INTERVAL = 60000;
const XP_PER_LEVEL = 100;
const INITIAL_MONEY = 1;

// Define stock tiers
const STOCK_TIERS = [
  { name: "Penny Stocks", minPrice: 0.05, maxPrice: 1, requiredLevel: 1 },
  { name: "Small Caps", minPrice: 1, maxPrice: 10, requiredLevel: 2 },
  { name: "Mid Caps", minPrice: 10, maxPrice: 50, requiredLevel: 3 },
  { name: "Large Caps", minPrice: 50, maxPrice: 200, requiredLevel: 5 },
  { name: "Blue Chips", minPrice: 200, maxPrice: 1000, requiredLevel: 8 },
  { name: "Tech Giants", minPrice: 1000, maxPrice: 10000, requiredLevel: 12 },
  { name: "Alien Tech", minPrice: 10000, maxPrice: 1000000, requiredLevel: 15 }
];

const INITIAL_STOCKS: Stock[] = [
  // Tier 1 - Penny Stocks
  {
    id: 101,
    name: "MicroTech Solutions",
    symbol: "MCRO",
    price: 0.05,
    change: 0,
    marketCap: 100000,
    industry: "Technology",
    description: "Small tech startup with innovative software solutions.",
    tier: 1,
    volatility: 0.05
  },
  {
    id: 102,
    name: "GreenLeaf Farms",
    symbol: "LEAF",
    price: 0.08,
    change: 0,
    marketCap: 150000,
    industry: "Agriculture",
    description: "Sustainable farming and organic produce.",
    tier: 1,
    volatility: 0.04
  },
  {
    id: 103,
    name: "HealthCore Labs",
    symbol: "HLTH",
    price: 0.15,
    change: 0,
    marketCap: 200000,
    industry: "Healthcare",
    description: "Medical research and diagnostics.",
    tier: 1,
    volatility: 0.06
  },
  {
    id: 104,
    name: "MineralX",
    symbol: "MINX",
    price: 0.20,
    change: 0,
    marketCap: 250000,
    industry: "Mining",
    description: "Small-scale mineral exploration.",
    tier: 1,
    volatility: 0.07
  },
  {
    id: 105,
    name: "EduTech",
    symbol: "EDTK",
    price: 0.25,
    change: 0,
    marketCap: 300000,
    industry: "Education",
    description: "Educational technology solutions.",
    tier: 1,
    volatility: 0.04
  },
  {
    id: 106,
    name: "SolarMicro",
    symbol: "SOLM",
    price: 0.30,
    change: 0,
    marketCap: 350000,
    industry: "Energy",
    description: "Small-scale solar energy solutions.",
    tier: 1,
    volatility: 0.05
  },
  {
    id: 107,
    name: "GameStart",
    symbol: "GAME",
    price: 0.35,
    change: 0,
    marketCap: 400000,
    industry: "Gaming",
    description: "Indie game development studio.",
    tier: 1,
    volatility: 0.08
  },
  {
    id: 108,
    name: "LocalMedia",
    symbol: "LMED",
    price: 0.40,
    change: 0,
    marketCap: 450000,
    industry: "Media",
    description: "Local news and content creation.",
    tier: 1,
    volatility: 0.06
  },
  {
    id: 109,
    name: "SmartHome",
    symbol: "SHOM",
    price: 0.45,
    change: 0,
    marketCap: 500000,
    industry: "IoT",
    description: "Smart home automation devices.",
    tier: 1,
    volatility: 0.07
  },
  {
    id: 110,
    name: "FoodTech",
    symbol: "FDTK",
    price: 0.50,
    change: 0,
    marketCap: 550000,
    industry: "Food",
    description: "Food technology and delivery solutions.",
    tier: 1,
    volatility: 0.05
  },

  // Tier 2 - Small Caps
  {
    id: 201,
    name: "DataFlow Analytics",
    symbol: "DATA",
    price: 2.50,
    change: 0,
    marketCap: 5000000,
    industry: "Technology",
    description: "Business analytics solutions.",
    tier: 2,
    volatility: 0.06
  },
  {
    id: 202,
    name: "EcoEnergy Systems",
    symbol: "ECO",
    price: 3.25,
    change: 0,
    marketCap: 6000000,
    industry: "Energy",
    description: "Renewable energy technology.",
    tier: 2,
    volatility: 0.07
  },
  {
    id: 203,
    name: "MedTech Solutions",
    symbol: "MEDS",
    price: 4.00,
    change: 0,
    marketCap: 7000000,
    industry: "Healthcare",
    description: "Medical device manufacturer.",
    tier: 2,
    volatility: 0.05
  },
  {
    id: 204,
    name: "UrbanFarms",
    symbol: "UFARM",
    price: 4.75,
    change: 0,
    marketCap: 8000000,
    industry: "Agriculture",
    description: "Urban farming solutions.",
    tier: 2,
    volatility: 0.04
  },
  {
    id: 205,
    name: "SportsTech",
    symbol: "SPRT",
    price: 5.50,
    change: 0,
    marketCap: 9000000,
    industry: "Sports",
    description: "Sports technology and analytics.",
    tier: 2,
    volatility: 0.08
  },
  {
    id: 206,
    name: "CyberGuard",
    symbol: "CYBG",
    price: 6.25,
    change: 0,
    marketCap: 10000000,
    industry: "Cybersecurity",
    description: "Digital security solutions.",
    tier: 2,
    volatility: 0.09
  },
  {
    id: 207,
    name: "RetailTech",
    symbol: "RETK",
    price: 7.00,
    change: 0,
    marketCap: 11000000,
    industry: "Retail",
    description: "Retail technology solutions.",
    tier: 2,
    volatility: 0.06
  },
  {
    id: 208,
    name: "FinTech Plus",
    symbol: "FNTP",
    price: 7.75,
    change: 0,
    marketCap: 12000000,
    industry: "Finance",
    description: "Financial technology services.",
    tier: 2,
    volatility: 0.07
  },
  {
    id: 209,
    name: "CloudSecure",
    symbol: "CSEC",
    price: 8.50,
    change: 0,
    marketCap: 13000000,
    industry: "Cloud",
    description: "Cloud security solutions.",
    tier: 2,
    volatility: 0.08
  },
  {
    id: 210,
    name: "BioInnovate",
    symbol: "BINV",
    price: 9.25,
    change: 0,
    marketCap: 14000000,
    industry: "Biotech",
    description: "Biotechnology research.",
    tier: 2,
    volatility: 0.09
  },

  // Tier 3 - Mid Caps
  {
    id: 301,
    name: "GlobalTech Solutions",
    symbol: "GTEC",
    price: 25.00,
    change: 0,
    marketCap: 50000000,
    industry: "Technology",
    description: "Global technology solutions provider.",
    tier: 3,
    volatility: 0.08
  },
  {
    id: 302,
    name: "RenewPower",
    symbol: "RNPW",
    price: 30.00,
    change: 0,
    marketCap: 60000000,
    industry: "Energy",
    description: "Renewable energy infrastructure.",
    tier: 3,
    volatility: 0.07
  },
  {
    id: 303,
    name: "HealthNet Global",
    symbol: "HLNG",
    price: 35.00,
    change: 0,
    marketCap: 70000000,
    industry: "Healthcare",
    description: "Global healthcare network.",
    tier: 3,
    volatility: 0.06
  },
  {
    id: 304,
    name: "SmartLogistics",
    symbol: "SLOG",
    price: 40.00,
    change: 0,
    marketCap: 80000000,
    industry: "Transportation",
    description: "AI-powered logistics solutions.",
    tier: 3,
    volatility: 0.08
  },
  {
    id: 305,
    name: "CyberDefense",
    symbol: "CYBD",
    price: 42.50,
    change: 0,
    marketCap: 90000000,
    industry: "Cybersecurity",
    description: "Advanced cybersecurity systems.",
    tier: 3,
    volatility: 0.09
  },
  {
    id: 306,
    name: "BioMed Research",
    symbol: "BMRS",
    price: 44.00,
    change: 0,
    marketCap: 100000000,
    industry: "Biotech",
    description: "Biomedical research and development.",
    tier: 3,
    volatility: 0.10
  },
  {
    id: 307,
    name: "QuantumComputing",
    symbol: "QCOM",
    price: 46.00,
    change: 0,
    marketCap: 110000000,
    industry: "Technology",
    description: "Quantum computing solutions.",
    tier: 3,
    volatility: 0.11
  },
  {
    id: 308,
    name: "AeroSpace Systems",
    symbol: "AERO",
    price: 47.50,
    change: 0,
    marketCap: 120000000,
    industry: "Aerospace",
    description: "Aerospace technology and systems.",
    tier: 3,
    volatility: 0.09
  },
  {
    id: 309,
    name: "RoboTech",
    symbol: "RBTC",
    price: 48.50,
    change: 0,
    marketCap: 130000000,
    industry: "Robotics",
    description: "Robotics and automation solutions.",
    tier: 3,
    volatility: 0.08
  },
  {
    id: 310,
    name: "MetaVerse",
    symbol: "META",
    price: 49.00,
    change: 0,
    marketCap: 140000000,
    industry: "Virtual Reality",
    description: "Virtual reality platforms.",
    tier: 3,
    volatility: 0.10
  },

  // Tier 4 - Large Caps
  {
    id: 401,
    name: "MegaTech Industries",
    symbol: "MEGA",
    price: 150.00,
    change: 0,
    marketCap: 500000000,
    industry: "Technology",
    description: "Diversified technology conglomerate.",
    tier: 4,
    volatility: 0.09
  },
  {
    id: 402,
    name: "FusionEnergy",
    symbol: "FUSN",
    price: 165.00,
    change: 0,
    marketCap: 550000000,
    industry: "Energy",
    description: "Fusion energy research.",
    tier: 4,
    volatility: 0.10
  },
  {
    id: 403,
    name: "BioGenetics",
    symbol: "BGEN",
    price: 175.00,
    change: 0,
    marketCap: 600000000,
    industry: "Biotech",
    description: "Genetic research and therapy.",
    tier: 4,
    volatility: 0.11
  },
  {
    id: 404,
    name: "SpaceX Clone",
    symbol: "SPXC",
    price: 180.00,
    change: 0,
    marketCap: 650000000,
    industry: "Aerospace",
    description: "Space exploration technology.",
    tier: 4,
    volatility: 0.12
  },
  {
    id: 405,
    name: "QuantumBank",
    symbol: "QBNK",
    price: 185.00,
    change: 0,
    marketCap: 700000000,
    industry: "Finance",
    description: "Quantum-secure banking.",
    tier: 4,
    volatility: 0.08
  },
  {
    id: 406,
    name: "NanoTech Labs",
    symbol: "NANO",
    price: 190.00,
    change: 0,
    marketCap: 750000000,
    industry: "Technology",
    description: "Nanotechnology research.",
    tier: 4,
    volatility: 0.11
  },
  {
    id: 407,
    name: "AI Systems",
    symbol: "AISYS",
    price: 192.50,
    change: 0,
    marketCap: 800000000,
    industry: "Technology",
    description: "Advanced AI solutions.",
    tier: 4,
    volatility: 0.10
  },
  {
    id: 408,
    name: "SmartCity",
    symbol: "CITY",
    price: 195.00,
    change: 0,
    marketCap: 850000000,
    industry: "Infrastructure",
    description: "Smart city infrastructure.",
    tier: 4,
    volatility: 0.07
  },
  {
    id: 409,
    name: "CloudMatrix",
    symbol: "CLDM",
    price: 197.50,
    change: 0,
    marketCap: 900000000,
    industry: "Cloud",
    description: "Advanced cloud computing.",
    tier: 4,
    volatility: 0.09
  },
  {
    id: 410,
    name: "CyberSec Pro",
    symbol: "CSEC",
    price: 199.00,
    change: 0,
    marketCap: 950000000,
    industry: "Cybersecurity",
    description: "Professional cybersecurity.",
    tier: 4,
    volatility: 0.10
  },

  // Tier 5 - Blue Chips
  {
    id: 501,
    name: "TechGiant Corp",
    symbol: "TGNT",
    price: 500.00,
    change: 0,
    marketCap: 2000000000,
    industry: "Technology",
    description: "Global tech leader.",
    tier: 5,
    volatility: 0.08
  },
  {
    id: 502,
    name: "MegaHealth",
    symbol: "MHLT",
    price: 600.00,
    change: 0,
    marketCap: 2500000000,
    industry: "Healthcare",
    description: "Global healthcare provider.",
    tier: 5,
    volatility: 0.07
  },
  {
    id: 503,
    name: "GlobalBank",
    symbol: "GBNK",
    price: 700.00,
    change: 0,
    marketCap: 3000000000,
    industry: "Finance",
    description: "International banking.",
    tier: 5,
    volatility: 0.06
  },
  {
    id: 504,
    name: "EnergyFusion",
    symbol: "EFUS",
    price: 750.00,
    change: 0,
    marketCap: 3500000000,
    industry: "Energy",
    description: "Clean energy solutions.",
    tier: 5,
    volatility: 0.09
  },
  {
    id: 505,
    name: "SpaceTech",
    symbol: "SPTC",
    price: 800.00,
    change: 0,
    marketCap: 4000000000,
    industry: "Aerospace",
    description: "Space technology leader.",
    tier: 5,
    volatility: 0.11
  },
  {
    id: 506,
    name: "BioTech Giant",
    symbol: "BTEC",
    price: 850.00,
    change: 0,
    marketCap: 4500000000,
    industry: "Biotech",
    description: "Biotechnology leader.",
    tier: 5,
    volatility: 0.10
  },
  {
    id: 507,
    name: "AI Masters",
    symbol: "AIMS",
    price: 900.00,
    change: 0,
    marketCap: 5000000000,
    industry: "Technology",
    description: "AI technology pioneer.",
    tier: 5,
    volatility: 0.12
  },
  {
    id: 508,
    name: "RoboWorld",
    symbol: "ROBO",
    price: 950.00,
    change: 0,
    marketCap: 5500000000,
    industry: "Robotics",
    description: "Robotics industry leader.",
    tier: 5,
    volatility: 0.09
  },
  {
    id: 509,
    name: "MetaVerse Pro",
    symbol: "MVRS",
    price: 975.00,
    change: 0,
    marketCap: 6000000000,
    industry: "Virtual Reality",
    description: "VR industry pioneer.",
    tier: 5,
    volatility: 0.10
  },
  {
    id: 510,
    name: "QuantumTech",
    symbol: "QNTM",
    price: 999.00,
    change: 0,
    marketCap: 6500000000,
    industry: "Technology",
    description: "Quantum technology leader.",
    tier: 5,
    volatility: 0.11
  },

  // Tier 6 - Tech Giants
  {
    id: 601,
    name: "HyperTech Global",
    symbol: "HPTG",
    price: 2500.00,
    change: 0,
    marketCap: 10000000000,
    industry: "Technology",
    description: "Global tech innovation.",
    tier: 6,
    volatility: 0.10
  },
  {
    id: 602,
    name: "BioGenesis",
    symbol: "BGEN",
    price: 3000.00,
    change: 0,
    marketCap: 12000000000,
    industry: "Biotech",
    description: "Revolutionary biotech.",
    tier: 6,
    volatility: 0.12
  },
  {
    id: 603,
    name: "QuantumVerse",
    symbol: "QVER",
    price: 3500.00,
    change: 0,
    marketCap: 14000000000,
    industry: "Technology",
    description: "Quantum computing leader.",
    tier: 6,
    volatility: 0.13
  },
  {
    id: 604,
    name: "SpaceForce One",
    symbol: "SPFO",
    price: 4000.00,
    change: 0,
    marketCap: 16000000000,
    industry: "Aerospace",
    description: "Space exploration pioneer.",
    tier: 6,
    volatility: 0.14
  },
  {
    id: 605,
    name: "NeuraTech",
    symbol: "NRTC",
    price: 4500.00,
    change: 0,
    marketCap: 18000000000,
    industry: "Technology",
    description: "Neural interface technology.",
    tier: 6,
    volatility: 0.15
  },
  {
    id: 606,
    name: "FusionPower",
    symbol: "FUPW",
    price: 5000.00,
    change: 0,
    marketCap: 20000000000,
    industry: "Energy",
    description: "Fusion energy pioneer.",
    tier: 6,
    volatility: 0.11
  },
  {
    id: 607,
    name: "CyberWorld",
    symbol: "CYBW",
    price: 6000.00,
    change: 0,
    marketCap: 22000000000,
    industry: "Technology",
    description: "Cybersecurity giant.",
    tier: 6,
    volatility: 0.12
  },
  {
    id: 608,
    name: "MegaVerse",
    symbol: "MGVR",
    price: 7000.00,
    change: 0,
    marketCap: 24000000000,
    industry: "Virtual Reality",
    description: "Virtual world pioneer.",
    tier: 6,
    volatility: 0.13
  },
  {
    id: 609,
    name: "RoboTech Pro",
    symbol: "RBTP",
    price: 8000.00,
    change: 0,
    marketCap: 26000000000,
    industry: "Robotics",
    description: "Advanced robotics leader.",
    tier: 6,
    volatility: 0.14
  },
  {
    id: 610,
    name: "AstroMining",
    symbol: "ASTM",
    price: 9000.00,
    change: 0,
    marketCap: 28000000000,
    industry: "Space Mining",
    description: "Asteroid mining pioneer.",
    tier: 6,
    volatility: 0.15
  },

  // Tier 7 - Alien Tech (Ultimate Tier)
  {
    id: 701,
    name: "Xenotech Industries",
    symbol: "XENO",
    price: 50000.00,
    change: 0,
    marketCap: 100000000000,
    industry: "Alien Technology",
    description: "Alien technology research.",
    tier: 7,
    volatility: 0.20
  },
  {
    id: 702,
    name: "StarGate Corp",
    symbol: "GATE",
    price: 60000.00,
    change: 0,
    marketCap: 120000000000,
    industry: "Space Travel",
    description: "Interstellar travel technology.",
    tier: 7,
    volatility: 0.22
  },
  {
    id: 703,
    name: "AlienAI Systems",
    symbol: "AAIS",
    price: 70000.00,
    change: 0,
    marketCap: 140000000000,
    industry: "Alien AI",
    description: "Alien-inspired AI technology.",
    tier: 7,
    volatility: 0.25
  },
  {
    id: 704,
    name: "GalacticEnergy",
    symbol: "GLCE",
    price: 80000.00,
    change: 0,
    marketCap: 160000000000,
    industry: "Energy",
    description: "Alien energy technology.",
    tier: 7,
    volatility: 0.23
  },
  {
    id: 705,
    name: "UFO Dynamics",
    symbol: "UFOD",
    price: 90000.00,
    change: 0,
    marketCap: 180000000000,
    industry: "Transportation",
    description: "Anti-gravity technology.",
    tier: 7,
    volatility: 0.24
  },
  {
    id: 706,
    name: "AlienMed",
    symbol: "AMED",
    price: 100000.00,
    change: 0,
    marketCap: 200000000000,
    industry: "Healthcare",
    description: "Alien medical technology.",
    tier: 7,
    volatility: 0.21
  },
  {
    id: 707,
    name: "Telepathy Tech",
    symbol: "TELE",
    price: 150000.00,
    change: 0,
    marketCap: 220000000000,
    industry: "Communication",
    description: "Telepathic communication tech.",
    tier: 7,
    volatility: 0.26
  },
  {
    id: 708,
    name: "Mars Colony",
    symbol: "MARS",
    price: 200000.00,
    change: 0,
    marketCap: 240000000000,
    industry: "Space Colonization",
    description: "Mars colonization project.",
    tier: 7,
    volatility: 0.27
  },
  {
    id: 709,
    name: "TimeWarp",
    symbol: "TIME",
    price: 250000.00,
    change: 0,
    marketCap: 260000000000,
    industry: "Time Technology",
    description: "Time manipulation research.",
    tier: 7,
    volatility: 0.28
  },
  {
    id: 710,
    name: "DimensionX",
    symbol: "DIMX",
    price: 300000.00,
    change: 0,
    marketCap: 280000000000,
    industry: "Dimensional Tech",
    description: "Inter-dimensional travel.",
    tier: 7,
    volatility: 0.30
  }
];

export default function MarketAdventure() {
  // Clear any existing save data immediately
  localStorage.removeItem(SAVE_KEY);

  const [gameState, setGameState] = useState<GameState>({
    money: INITIAL_MONEY,
    portfolio: {},
    level: 1,
    xp: 0,
    unlockedStocks: ["MCRO", "LEAF", "HLTH"],
    currentEvent: null,
    lastSaved: Date.now(),
    totalTrades: 0
  });

  const [stocks, setStocks] = useState<Stock[]>(INITIAL_STOCKS);
  const [selectedTier, setSelectedTier] = useState<number | null>(null);
  const [showTutorial, setShowTutorial] = useState(true);  // Force show tutorial
  const [showSaveMessage, setShowSaveMessage] = useState(false);

  // Calculate XP progress
  const xpProgress = (gameState.xp % XP_PER_LEVEL) / XP_PER_LEVEL * 100;

  const addXP = (amount: number) => {
    setGameState(prev => {
      const newXP = prev.xp + amount;
      const newLevel = Math.floor(newXP / XP_PER_LEVEL) + 1;
      const leveledUp = newLevel > prev.level;

      // Unlock new stocks when leveling up
      let newUnlockedStocks = [...prev.unlockedStocks];
      if (leveledUp) {
        const newTierStocks = INITIAL_STOCKS.filter(stock => 
          !prev.unlockedStocks.includes(stock.symbol) && 
          STOCK_TIERS[stock.tier - 1].requiredLevel <= newLevel
        );
        newUnlockedStocks = [...newUnlockedStocks, ...newTierStocks.map(s => s.symbol)];
      }

      return {
        ...prev,
        xp: newXP,
        level: newLevel,
        unlockedStocks: newUnlockedStocks
      };
    });
  };

  const saveGame = () => {
    const stateToSave = {
      ...gameState,
      currentEvent: null, // Don't save the event state
      lastSaved: Date.now()
    };
    localStorage.setItem(SAVE_KEY, JSON.stringify(stateToSave));
    setShowSaveMessage(true);
    setTimeout(() => setShowSaveMessage(false), 2000);
  };

  useEffect(() => {
    const autoSaveInterval = setInterval(saveGame, AUTO_SAVE_INTERVAL);
    return () => clearInterval(autoSaveInterval);
  }, [gameState]);

  const handleBuy = (stock: Stock) => {
    if (gameState.money >= stock.price) {
      setGameState(prev => {
        const newPortfolio = {
          ...prev.portfolio,
          [stock.symbol]: (prev.portfolio[stock.symbol] || 0) + 1
        };
        const totalStocks = Object.values(newPortfolio).reduce((sum, count) => sum + count, 0);
        
        return {
          ...prev,
          money: prev.money - stock.price,
          portfolio: newPortfolio,
          totalTrades: prev.totalTrades + 1
        };
      });
      
      // Award XP for trading
      addXP(5);
      saveGame();
    }
  };

  const handleSell = (stock: Stock) => {
    if (gameState.portfolio[stock.symbol] > 0) {
      setGameState(prev => {
        const newPortfolio = {
          ...prev.portfolio,
          [stock.symbol]: prev.portfolio[stock.symbol] - 1
        };
        
        // Remove stock from portfolio if count reaches 0
        if (newPortfolio[stock.symbol] === 0) {
          delete newPortfolio[stock.symbol];
        }
        
        return {
          ...prev,
          money: prev.money + stock.price,
          portfolio: newPortfolio,
          totalTrades: prev.totalTrades + 1
        };
      });
      
      // Award XP for trading
      addXP(5);
      saveGame();
    }
  };

  const generateEvent = () => {
    const events = [
      {
        type: "positive",
        message: "Market Surge: All stocks are trending upward!",
        icon: <TrendingUp className="w-6 h-6 text-green-500" />,
        color: "bg-green-100"
      },
      {
        type: "negative",
        message: "Market Dip: Prices are falling across the board.",
        icon: <TrendingDown className="w-6 h-6 text-red-500" />,
        color: "bg-red-100"
      },
      {
        type: "positive",
        message: "Tech Boom: Technology stocks are rising!",
        icon: <Cpu className="w-6 h-6 text-blue-500" />,
        color: "bg-blue-100"
      },
      {
        type: "negative",
        message: "Economic Crisis: Markets are volatile!",
        icon: <TrendingDown className="w-6 h-6 text-orange-500" />,
        color: "bg-orange-100"
      },
      {
        type: "positive",
        message: "Innovation Wave: Tech and Biotech stocks surge!",
        icon: <Zap className="w-6 h-6 text-purple-500" />,
        color: "bg-purple-100"
      }
    ];
    return events[Math.floor(Math.random() * events.length)];
  };

  useEffect(() => {
    const interval = setInterval(() => {
      // Update stock prices
      setStocks(prev => prev.map(stock => {
        const volatilityFactor = stock.volatility * (1 + (gameState.level - 1) * 0.1);
        const priceChange = (Math.random() - 0.5) * volatilityFactor;
        const newPrice = Math.max(stock.price * (1 + priceChange), STOCK_TIERS[stock.tier - 1].minPrice);
        
        return {
          ...stock,
          price: newPrice,
          change: priceChange * 100
        };
      }));

      // Generate random events with 10% chance
      if (Math.random() < 0.1) {
        const events = [
          {
            type: "positive" as const,
            message: "Market Surge: All stocks are trending upward!",
            icon: <TrendingUp className="w-6 h-6 text-green-500" />,
            color: "bg-green-100"
          },
          {
            type: "negative" as const,
            message: "Market Dip: Prices are falling across the board.",
            icon: <TrendingDown className="w-6 h-6 text-red-500" />,
            color: "bg-red-100"
          },
          {
            type: "positive" as const,
            message: "Tech Boom: Technology stocks are rising!",
            icon: <Cpu className="w-6 h-6 text-blue-500" />,
            color: "bg-blue-100"
          },
          {
            type: "negative" as const,
            message: "Economic Crisis: Markets are volatile!",
            icon: <TrendingDown className="w-6 h-6 text-orange-500" />,
            color: "bg-orange-100"
          },
          {
            type: "positive" as const,
            message: "Innovation Wave: Tech and Biotech stocks surge!",
            icon: <Zap className="w-6 h-6 text-purple-500" />,
            color: "bg-purple-100"
          }
        ];
        const newEvent = events[Math.floor(Math.random() * events.length)];
        setGameState(prev => ({
          ...prev,
          currentEvent: newEvent
        }));
      }
    }, 3000);

    return () => clearInterval(interval);
  }, [gameState.level]);

  // Calculate total portfolio value for the stats display
  const totalPortfolioValue = Object.entries(gameState.portfolio).reduce((total, [symbol, quantity]) => {
    const stock = stocks.find(s => s.symbol === symbol);
    return total + (stock ? stock.price * quantity : 0);
  }, 0);

  // Render the game stats section
  const GameStats = () => (
    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
      <Card>
        <CardContent className="pt-6">
          <div className="flex flex-col gap-1">
            <span className="text-sm text-gray-500">Cash</span>
            <div className="flex items-center gap-2">
              <Coins className="w-5 h-5 text-yellow-500" />
              <span className="text-lg font-semibold">
                ${gameState.money.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}
              </span>
            </div>
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardContent className="pt-6">
          <div className="flex flex-col gap-1">
            <span className="text-sm text-gray-500">Level Progress</span>
            <div className="flex flex-col gap-1">
              <div className="flex items-center gap-2">
                <Trophy className="w-5 h-5 text-blue-500" />
                <span className="text-lg font-semibold">Level {gameState.level}</span>
              </div>
              <Progress value={xpProgress} className="h-2" />
            </div>
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardContent className="pt-6">
          <div className="flex flex-col gap-1">
            <span className="text-sm text-gray-500">Experience Points</span>
            <div className="flex items-center gap-2">
              <Star className="w-5 h-5 text-purple-500" />
              <span className="text-lg font-semibold">{gameState.xp} XP</span>
            </div>
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardContent className="pt-6">
          <div className="flex flex-col gap-1">
            <span className="text-sm text-gray-500">Portfolio Value</span>
            <div className="flex items-center gap-2">
              <TrendingUp className="w-5 h-5 text-green-500" />
              <span className="text-lg font-semibold">
                ${totalPortfolioValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}
              </span>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  // Render the market overview screen
  const MarketOverview = () => (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {STOCK_TIERS.map((tier, index) => {
        const isLocked = tier.requiredLevel > gameState.level;
        const tierStocks = stocks.filter(stock => stock.tier === index + 1);
        if (tierStocks.length === 0) return null;

        return (
          <motion.div
            key={tier.name}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            <Card 
              className={`hover:shadow-lg transition-shadow duration-200 cursor-pointer overflow-hidden relative ${
                isLocked ? 'opacity-50' : ''
              }`}
              onClick={() => !isLocked && setSelectedTier(index + 1)}
            >
              <div className={`absolute inset-0 pointer-events-none ${
                index === 0 ? 'bg-yellow-500/5' : 
                index === 1 ? 'bg-green-500/5' : 
                index === 2 ? 'bg-blue-500/5' : 
                index === 3 ? 'bg-purple-500/5' : 
                index === 4 ? 'bg-red-500/5' : 
                index === 5 ? 'bg-indigo-500/5' : 
                'bg-pink-500/5'
              }`} />
              <CardHeader>
                <CardTitle className="flex items-center justify-between relative z-10">
                  <span className="text-xl font-bold">{tier.name}</span>
                  {isLocked && (
                    <div className="flex items-center gap-2">
                      <Lock className="w-5 h-5 text-gray-500" />
                      <span className="text-sm text-gray-500">Level {tier.requiredLevel}</span>
                    </div>
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent className="relative z-10">
                <div className="aspect-square bg-white rounded-lg mb-4 p-6 shadow-sm border border-gray-100">
                  <div className="w-full h-full relative">
                    {/* Main tier icon */}
                    <div className={`
                      absolute inset-0 flex items-center justify-center
                      ${index === 0 ? 'text-yellow-500' : ''}
                      ${index === 1 ? 'text-green-500' : ''}
                      ${index === 2 ? 'text-blue-500' : ''}
                      ${index === 3 ? 'text-purple-500' : ''}
                      ${index === 4 ? 'text-red-500' : ''}
                      ${index === 5 ? 'text-indigo-500' : ''}
                      ${index === 6 ? 'text-violet-500' : ''}
                    `}>
                      {index === 0 && <Coins className="w-20 h-20" />}
                      {index === 1 && <Building2 className="w-20 h-20" />}
                      {index === 2 && <Globe className="w-20 h-20" />}
                      {index === 3 && <Landmark className="w-20 h-20" />}
                      {index === 4 && <Rocket className="w-20 h-20" />}
                      {index === 5 && <Cpu className="w-20 h-20" />}
                      {index === 6 && <Atom className="w-20 h-20" />}
                    </div>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-500">Price Range:</span>
                    <span className="font-medium">
                      ${tier.minPrice.toLocaleString()} - ${tier.maxPrice.toLocaleString()}
                    </span>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-500">Available Stocks:</span>
                    <span className="font-medium">{tierStocks.length}</span>
                  </div>
                  {isLocked && (
                    <div className="mt-2 text-center py-2 bg-gray-100 rounded-md">
                      <p className="text-sm text-gray-600">
                        Unlock at Level {tier.requiredLevel}
                      </p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </motion.div>
        );
      })}
    </div>
  );

  // Render the trading interface for a specific tier
  const TradingInterface = () => {
    const tierStocks = stocks.filter(stock => stock.tier === selectedTier);
    
    return (
      <div className="space-y-6 bg-white">
        {/* Back button */}
        <div className="flex items-center justify-between">
          <Button
            onClick={() => setSelectedTier(null)}
            variant="outline"
            className="flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            Back to Market
          </Button>
          <div className="flex items-center gap-2">
            <span className={`
              p-2 rounded-full
              ${selectedTier === 1 ? 'bg-yellow-100 text-yellow-500' : ''}
              ${selectedTier === 2 ? 'bg-green-100 text-green-500' : ''}
              ${selectedTier === 3 ? 'bg-blue-100 text-blue-500' : ''}
              ${selectedTier === 4 ? 'bg-purple-100 text-purple-500' : ''}
              ${selectedTier === 5 ? 'bg-red-100 text-red-500' : ''}
              ${selectedTier === 6 ? 'bg-indigo-100 text-indigo-500' : ''}
              ${selectedTier === 7 ? 'bg-violet-100 text-violet-500' : ''}
            `}>
              {selectedTier === 1 && <Coins className="w-6 h-6" />}
              {selectedTier === 2 && <Building2 className="w-6 h-6" />}
              {selectedTier === 3 && <Globe className="w-6 h-6" />}
              {selectedTier === 4 && <Landmark className="w-6 h-6" />}
              {selectedTier === 5 && <Rocket className="w-6 h-6" />}
              {selectedTier === 6 && <Cpu className="w-6 h-6" />}
              {selectedTier === 7 && <Atom className="w-6 h-6" />}
            </span>
            <h2 className="text-2xl font-bold">{STOCK_TIERS[selectedTier - 1].name}</h2>
          </div>
        </div>

        {/* Stock grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {tierStocks.map(stock => (
            <Card key={stock.id} className="relative overflow-hidden bg-white">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    {stock.industry === 'Technology' && <Cpu className="w-4 h-4" />}
                    {stock.industry === 'Healthcare' && <Heart className="w-4 h-4" />}
                    {stock.industry === 'Finance' && <Landmark className="w-4 h-4" />}
                    {stock.industry === 'Energy' && <Zap className="w-4 h-4" />}
                    {stock.industry === 'Retail' && <Building2 className="w-4 h-4" />}
                    <h3 className="font-semibold">{stock.name}</h3>
                  </div>
                  <div className="text-sm text-gray-500">{stock.symbol}</div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <div className="text-2xl font-bold">${stock.price.toFixed(2)}</div>
                    <div className={`flex items-center gap-1 ${
                      stock.change >= 0 ? 'text-green-600' : 'text-red-600'
                    }`}>
                      {stock.change >= 0 ? (
                        <TrendingUp className="w-4 h-4" />
                      ) : (
                        <TrendingDown className="w-4 h-4" />
                      )}
                      {Math.abs(stock.change).toFixed(2)}%
                    </div>
                  </div>
                  <p className="text-sm text-gray-500">{stock.description}</p>
                  <div className="flex justify-between items-center text-sm text-gray-500">
                    <div>Market Cap: ${(stock.marketCap / 1000000).toFixed(1)}M</div>
                    <div>Vol: {(stock.volatility * 100).toFixed(1)}%</div>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button
                  onClick={() => handleBuy(stock)}
                  className="flex-1 mr-2 bg-green-600 hover:bg-green-700"
                  disabled={gameState.money < stock.price}
                >
                  Buy
                </Button>
                <Button
                  onClick={() => handleSell(stock)}
                  className="flex-1 ml-2 bg-red-600 hover:bg-red-700"
                  disabled={!gameState.portfolio[stock.symbol] || gameState.portfolio[stock.symbol] <= 0}
                >
                  Sell
                </Button>
              </CardFooter>
            </Card>
          ))}
        </div>
      </div>
    );
  };

  const resetGame = () => {
    const initialState = {
      money: INITIAL_MONEY,
      portfolio: {},
      level: 1,
      xp: 0,
      unlockedStocks: ["MCRO", "LEAF", "HLTH"],
      currentEvent: null,
      lastSaved: Date.now(),
      totalTrades: 0
    };
    setGameState(initialState);
    localStorage.removeItem(SAVE_KEY);
    setSelectedTier(null);
    setShowSaveMessage(false);
  };

  return (
    <div className="min-h-screen bg-white">
      <div className="container mx-auto px-4 py-8 bg-white">
        {/* Back to Games Button */}
        <div className="mb-6">
          <Button
            onClick={() => window.location.href = '/learn'}
            variant="outline"
            className="flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            Back to Games
          </Button>
        </div>

        <GameStats />

        {/* Save Button */}
        <div className="flex justify-end mb-4">
          <Button 
            onClick={saveGame}
            className="bg-blue-600 hover:bg-blue-700 flex items-center gap-2"
          >
            <Save className="w-4 h-4" />
            Save Game
          </Button>
        </div>

        {/* Save Message */}
        <AnimatePresence>
          {showSaveMessage && (
            <motion.div
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="fixed top-4 right-4 bg-green-100 border border-green-200 rounded-lg p-4"
            >
              <p className="text-green-800">Game saved!</p>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Market Event */}
        <AnimatePresence>
          {gameState.currentEvent && (
            <motion.div
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="mb-8"
            >
              <div className={`${gameState.currentEvent.color} border rounded-lg p-4 relative`}>
                <div className="flex items-center gap-3">
                  {gameState.currentEvent.icon}
                  <h3 className={`font-semibold ${
                    gameState.currentEvent.type === "positive" ? "text-green-800" : "text-red-800"
                  }`}>
                    {gameState.currentEvent.message}
                  </h3>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Main Content */}
        {selectedTier ? <TradingInterface /> : <MarketOverview />}

        {/* Tutorial Modal */}
        {showTutorial && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <Card className="max-w-md mx-4">
              <CardHeader>
                <CardTitle>Welcome to Market Adventure!</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <p>Start with $1 and grow your portfolio!</p>
                  <p>Begin with penny stocks and work your way up.</p>
                  <p>Earn XP by trading to unlock higher-tier stocks.</p>
                  <p>Each level unlocks new investment opportunities.</p>
                  <p>Your progress is automatically saved.</p>
                  <Button 
                    className="w-full"
                    onClick={() => setShowTutorial(false)}
                  >
                    Start Trading
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
      <AppNavigation />
    </div>
  );
}

================
File: client/src/pages/not-found.tsx
================
import { Card, CardContent } from "@/components/ui/card";
import { AlertCircle } from "lucide-react";

export default function NotFound() {
  return (
    <div className="min-h-screen w-full flex items-center justify-center bg-gray-50">
      <Card className="w-full max-w-md mx-4">
        <CardContent className="pt-6">
          <div className="flex mb-4 gap-2">
            <AlertCircle className="h-8 w-8 text-red-500" />
            <h1 className="text-2xl font-bold text-gray-900">404 Page Not Found</h1>
          </div>

          <p className="mt-4 text-sm text-gray-600">
            Did you forget to add the page to the router?
          </p>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: client/src/pages/onboarding-page.tsx
================
import { useState } from "react";
import { useAuth } from "@/hooks/use-auth";
import { useLocation } from "wouter";
import { motion, AnimatePresence } from "framer-motion";
import TopicBubble from "@/components/ui/topic-bubble";
import ChoiceButton from "@/components/ui/choice-button";
import { ArrowLeft, ArrowRight, Home } from "lucide-react";

type ExperienceLevel = "beginner" | "some-knowledge" | "intermediate" | "advanced";
type DailyGoalOption = 1 | 3 | 5;

export default function OnboardingPage() {
  const [step, setStep] = useState(0);
  const [experienceLevel, setExperienceLevel] = useState<ExperienceLevel>("beginner");
  const [selectedTopics, setSelectedTopics] = useState<string[]>([]);
  const [dailyGoal, setDailyGoal] = useState<DailyGoalOption>(3);
  
  const { updateOnboardingMutation } = useAuth();
  const [_, setLocation] = useLocation();
  
  const handleNextStep = () => {
    setStep(prev => prev + 1);
  };
  
  const handlePrevStep = () => {
    setStep(prev => prev - 1);
  };
  
  const handleTopicToggle = (topic: string) => {
    setSelectedTopics(prev => 
      prev.includes(topic) 
        ? prev.filter(t => t !== topic) 
        : [...prev, topic]
    );
  };
  
  const handleCompleteOnboarding = () => {
    updateOnboardingMutation.mutate({
      experienceLevel,
      interests: selectedTopics,
      dailyGoal
    }, {
      onSuccess: () => {
        setLocation("/");
      }
    });
  };
  
  const handleSkip = () => {
    updateOnboardingMutation.mutate({
      experienceLevel: "beginner",
      interests: ["Technology", "Stock Market"],
      dailyGoal: 3
    }, {
      onSuccess: () => {
        setLocation("/");
      }
    });
  };
  
  const topics = [
    "Tech Industry", "Stock Market", "Crypto", "Real Estate", 
    "Personal Finance", "Retirement", "Healthcare", 
    "Consumer Goods", "Renewable Energy", "Banking"
  ];
  
  return (
    <div className="fixed inset-0 bg-white z-50">
      <div className="relative h-full flex flex-col">
        {/* Onboarding Header */}
        <div className="p-4 flex items-center justify-between">
          <div className="w-8">
            {step > 0 && (
              <button 
                onClick={handlePrevStep}
                className="p-2 rounded-full hover:bg-gray-100 transition"
              >
                <ArrowLeft className="text-gray-700" size={16} />
              </button>
            )}
          </div>
          
          <div className="flex space-x-1">
            {[0, 1, 2, 3].map(i => (
              <div 
                key={i}
                className={`h-1 w-6 rounded-full transition-colors ${
                  i <= step ? "bg-primary-500" : "bg-gray-200"
                }`}
              />
            ))}
          </div>
          
          <div className="w-8">
            <button 
              onClick={handleSkip}
              className="text-sm text-gray-500 font-medium"
            >
              Skip
            </button>
          </div>
        </div>
        
        {/* Onboarding Content */}
        <div className="flex-1 relative overflow-hidden">
          <AnimatePresence mode="wait">
            {step === 0 && (
              <motion.div
                key="welcome"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
                className="absolute inset-0 flex flex-col items-center justify-between p-6"
              >
                <div></div>
                
                <div className="text-center">
                  <div className="w-24 h-24 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-6">
                    <svg className="w-12 h-12 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                  </div>
                  <h1 className="text-2xl font-semibold text-gray-800 mb-3 font-poppins">Welcome to Swipefolio</h1>
                  <p className="text-gray-600">Your personal finance learning journey starts here. Swipe through bite-sized lessons and build your financial knowledge, one card at a time.</p>
                </div>
                
                <button 
                  onClick={handleNextStep}
                  className="bg-primary-500 hover:bg-primary-600 text-white font-medium py-3 px-6 rounded-lg w-full flex items-center justify-center transition duration-200 ease-in-out"
                >
                  <span>Get Started</span>
                  <ArrowRight className="ml-2" size={18} />
                </button>
              </motion.div>
            )}
            
            {step === 1 && (
              <motion.div
                key="experience"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
                className="absolute inset-0 flex flex-col items-center justify-between p-6"
              >
                <div></div>
                
                <div className="w-full">
                  <h2 className="text-xl font-semibold text-gray-800 mb-4 font-poppins">What's your experience with finance?</h2>
                  <p className="text-gray-600 mb-6">We'll tailor your learning journey based on your current knowledge.</p>
                  
                  <div className="space-y-3">
                    <ChoiceButton
                      selected={experienceLevel === "beginner"}
                      onClick={() => setExperienceLevel("beginner")}
                      title="I'm a beginner"
                      description="New to finance concepts and terminology"
                    />
                    
                    <ChoiceButton
                      selected={experienceLevel === "some-knowledge"}
                      onClick={() => setExperienceLevel("some-knowledge")}
                      title="I have some knowledge"
                      description="Familiar with basic concepts but want to learn more"
                    />
                    
                    <ChoiceButton
                      selected={experienceLevel === "intermediate"}
                      onClick={() => setExperienceLevel("intermediate")}
                      title="I'm intermediate"
                      description="Comfortable with many finance topics but looking to expand"
                    />
                    
                    <ChoiceButton
                      selected={experienceLevel === "advanced"}
                      onClick={() => setExperienceLevel("advanced")}
                      title="I'm advanced"
                      description="Experienced with finance and seeking specialized knowledge"
                    />
                  </div>
                </div>
                
                <button
                  onClick={handleNextStep}
                  className="bg-primary-500 hover:bg-primary-600 text-white font-medium py-3 px-6 rounded-lg w-full flex items-center justify-center transition duration-200 ease-in-out mt-6"
                >
                  <span>Continue</span>
                  <ArrowRight className="ml-2" size={18} />
                </button>
              </motion.div>
            )}
            
            {step === 2 && (
              <motion.div
                key="interests"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
                className="absolute inset-0 flex flex-col items-center justify-between p-6"
              >
                <div></div>
                
                <div className="w-full">
                  <h2 className="text-xl font-semibold text-gray-800 mb-4 font-poppins">What interests you most?</h2>
                  <p className="text-gray-600 mb-6">Select topics you'd like to learn about. You can change these later.</p>
                  
                  <div className="flex flex-wrap">
                    {topics.map(topic => (
                      <TopicBubble
                        key={topic}
                        label={topic}
                        selected={selectedTopics.includes(topic)}
                        onClick={() => handleTopicToggle(topic)}
                      />
                    ))}
                  </div>
                </div>
                
                <button
                  onClick={handleNextStep}
                  className="bg-primary-500 hover:bg-primary-600 text-white font-medium py-3 px-6 rounded-lg w-full flex items-center justify-center transition duration-200 ease-in-out mt-6"
                  disabled={selectedTopics.length === 0}
                >
                  <span>Continue</span>
                  <ArrowRight className="ml-2" size={18} />
                </button>
              </motion.div>
            )}
            
            {step === 3 && (
              <motion.div
                key="daily-goal"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
                className="absolute inset-0 flex flex-col items-center justify-between p-6"
              >
                <div></div>
                
                <div className="w-full">
                  <h2 className="text-xl font-semibold text-gray-800 mb-4 font-poppins">Set your daily goal</h2>
                  <p className="text-gray-600 mb-6">How many lessons would you like to complete each day?</p>
                  
                  <div className="space-y-3">
                    <ChoiceButton
                      selected={dailyGoal === 1}
                      onClick={() => setDailyGoal(1)}
                      title="Casual (1 lesson)"
                      rightText="~5 min/day"
                    />
                    
                    <ChoiceButton
                      selected={dailyGoal === 3}
                      onClick={() => setDailyGoal(3)}
                      title="Regular (3 lessons)"
                      rightText="~15 min/day"
                    />
                    
                    <ChoiceButton
                      selected={dailyGoal === 5}
                      onClick={() => setDailyGoal(5)}
                      title="Ambitious (5 lessons)"
                      rightText="~25 min/day"
                    />
                  </div>
                </div>
                
                <button
                  onClick={handleCompleteOnboarding}
                  className="bg-primary-500 hover:bg-primary-600 text-white font-medium py-3 px-6 rounded-lg w-full flex items-center justify-center transition duration-200 ease-in-out mt-6"
                  disabled={updateOnboardingMutation.isPending}
                >
                  {updateOnboardingMutation.isPending ? (
                    <>
                      <span>Setting up...</span>
                      <Loader2 className="ml-2 animate-spin" size={18} />
                    </>
                  ) : (
                    <>
                      <span>Start Learning</span>
                      <Home className="ml-2" size={18} />
                    </>
                  )}
                </button>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
}

================
File: client/src/pages/portfolio-page.tsx
================
import { useContext, useState } from 'react';
import { motion } from 'framer-motion';
import { ArrowUp, ArrowDown, MoreHorizontal, PieChart, TrendingUp, Briefcase, Settings, Clock, DollarSign } from 'lucide-react';
import AppHeader from '@/components/app-header';
import AppNavigation from '@/components/app-navigation';
import { PortfolioContext, PortfolioHolding } from '@/contexts/portfolio-context';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { getIndustryAverages } from '@/lib/industry-data';

export default function PortfolioPage() {
  const portfolio = useContext(PortfolioContext);
  const [activeTab, setActiveTab] = useState('holdings');
  
  if (!portfolio) {
    return (
      <div className="flex min-h-screen items-center justify-center bg-slate-50">
        <div className="text-center">
          <div className="animate-spin h-8 w-8 mx-auto mb-4 text-sky-500">
            <DollarSign />
          </div>
          <p className="text-slate-400">Loading portfolio data...</p>
        </div>
      </div>
    );
  }
  
  const { 
    holdings, 
    cash, 
    portfolioValue, 
    totalValue,
    portfolioMetrics
  } = portfolio;
  
  // Calculate performance values
  const totalReturn = holdings.reduce((total, h) => {
    const currentValue = h.shares * h.stock.price;
    const investedValue = h.shares * h.purchasePrice;
    return total + (currentValue - investedValue);
  }, 0);
  
  const totalReturnPercent = holdings.length > 0 
    ? (totalReturn / (portfolioValue - totalReturn)) * 100 
    : 0;
    
  // Calculate projected 1-year return based on holdings
  const projectedReturn = holdings.reduce((total, h) => {
    // Parse the oneYearReturn string (remove % sign and convert to number)
    const oneYearReturnPercent = 
      typeof h.stock.oneYearReturn === 'number' ? h.stock.oneYearReturn :
      typeof h.stock.oneYearReturn === 'string' ? parseFloat(h.stock.oneYearReturn.replace('%', '')) : 
      0;
    
    const stockValue = h.shares * h.purchasePrice;
    const stockReturn = stockValue * (oneYearReturnPercent / 100);
    return total + stockReturn;
  }, 0);
  
  const projectedReturnPercent = holdings.length > 0 && portfolioValue > 0
    ? (projectedReturn / portfolioValue) * 100
    : 0;
  
  const sortedHoldings = [...holdings].sort((a, b) => b.value - a.value);
  
  // Calculate asset allocation by industry
  const industryAllocation = holdings.reduce<Record<string, { value: number, percent: number }>>((acc, holding) => {
    const industry = holding.stock.industry;
    
    if (!acc[industry]) {
      acc[industry] = { value: 0, percent: 0 };
    }
    
    acc[industry].value += holding.value;
    return acc;
  }, {});
  
  // Calculate percentages
  Object.keys(industryAllocation).forEach(industry => {
    industryAllocation[industry].percent = (industryAllocation[industry].value / portfolioValue) * 100;
  });
  
  // Sort industries by value
  const sortedIndustries = Object.entries(industryAllocation)
    .sort(([, a], [, b]) => b.value - a.value)
    .map(([industry, data]) => ({ industry, ...data }));
  
  // Generate random colors for each industry (in a real app, these would be consistent)
  const industryColors: Record<string, string> = {
    Technology: 'bg-blue-500',
    Healthcare: 'bg-green-500',
    'Real Estate': 'bg-purple-500',
    Financial: 'bg-amber-500',
    Consumer: 'bg-red-500',
    Energy: 'bg-emerald-500',
    Utilities: 'bg-cyan-500',
    Industrial: 'bg-slate-500',
    Materials: 'bg-orange-500',
    Other: 'bg-gray-500'
  };
  
  return (
    <>
      <AppHeader />
      
      <main className="main-content pb-24 pt-20 px-4 bg-slate-50">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="mb-6"
        >
          <h1 className="text-2xl font-bold text-slate-800 mb-4 flex items-center">
            <Briefcase className="mr-2 h-6 w-6 text-slate-600" />
            Your Portfolio
          </h1>
          
          {/* Portfolio Summary Card */}
          <div className="bg-white rounded-xl shadow-md border border-slate-200 mb-6">
            <div className="p-4 border-b border-slate-100">
              <div className="flex justify-between items-start">
                <div>
                  <p className="text-sm text-slate-500 mb-1">Total Value</p>
                  <p className="text-2xl font-bold text-slate-800">${totalValue.toFixed(2)}</p>
                </div>
                
                <div className="text-right">
                  <p className="text-sm text-slate-500 mb-1">Total Return</p>
                  <p className={`text-lg font-bold flex items-center justify-end ${totalReturn >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                    {totalReturn >= 0 ? (
                      <ArrowUp className="h-4 w-4 mr-1" />
                    ) : (
                      <ArrowDown className="h-4 w-4 mr-1" />
                    )}
                    ${Math.abs(totalReturn).toFixed(2)} ({totalReturn >= 0 ? '+' : ''}{totalReturnPercent.toFixed(2)}%)
                  </p>
                </div>
              </div>
              
              <div className="mt-4 grid grid-cols-2 gap-3">
                <div className="bg-slate-50 rounded-lg p-3">
                  <p className="text-xs text-slate-500 mb-1">Invested</p>
                  <p className="text-lg font-semibold text-slate-800">${portfolioValue.toFixed(2)}</p>
                </div>
                <div className="bg-slate-50 rounded-lg p-3">
                  <p className="text-xs text-slate-500 mb-1">Cash</p>
                  <p className="text-lg font-semibold text-emerald-600">${cash.toFixed(2)}</p>
                </div>
              </div>
              
              {/* Projected Return */}
              {holdings.length > 0 && (
                <div className="mt-3 bg-blue-50 rounded-lg p-3">
                  <p className="text-xs text-blue-700 mb-1">Projected 1-Year Return</p>
                  <p className={`text-lg font-semibold flex items-center ${projectedReturn >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                    {projectedReturn >= 0 ? (
                      <ArrowUp className="h-4 w-4 mr-1" />
                    ) : (
                      <ArrowDown className="h-4 w-4 mr-1" />
                    )}
                    ${Math.abs(projectedReturn).toFixed(2)} ({projectedReturn >= 0 ? '+' : ''}{projectedReturnPercent.toFixed(2)}%)
                  </p>
                </div>
              )}
            </div>
            
            {/* Portfolio Metrics */}
            <div className="p-4 bg-slate-50 rounded-b-xl">
              <p className="text-sm font-medium text-slate-700 mb-2">Portfolio Metrics</p>
              <div className="grid grid-cols-2 gap-4 md:grid-cols-4">
                <MetricItem 
                  label="Performance" 
                  value={portfolioMetrics.performance} 
                  color="bg-blue-500" 
                />
                <MetricItem 
                  label="Stability" 
                  value={portfolioMetrics.stability} 
                  color="bg-purple-500" 
                />
                <MetricItem 
                  label="Value" 
                  value={portfolioMetrics.value} 
                  color="bg-emerald-500" 
                />
                <MetricItem 
                  label="Momentum" 
                  value={portfolioMetrics.momentum} 
                  color="bg-amber-500" 
                />
              </div>
            </div>
          </div>
        </motion.div>
        
        <Tabs 
          defaultValue={activeTab} 
          onValueChange={setActiveTab}
          className="w-full"
        >
          <TabsList className="grid w-full grid-cols-3 mb-6">
            <TabsTrigger value="holdings" className="text-sm">
              Holdings
            </TabsTrigger>
            <TabsTrigger value="allocation" className="text-sm">
              Allocation
            </TabsTrigger>
            <TabsTrigger value="activity" className="text-sm">
              Activity
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="holdings" className="space-y-4">
            {sortedHoldings.length === 0 ? (
              <EmptyState 
                title="No holdings yet"
                description="Start investing in companies to build your portfolio"
              />
            ) : (
              sortedHoldings.map(holding => (
                <HoldingCard 
                  key={holding.stock.ticker} 
                  holding={holding} 
                  onSell={(shares) => portfolio.sellStock(holding.stock.ticker, shares)}
                />
              ))
            )}
          </TabsContent>
          
          <TabsContent value="allocation" className="space-y-4">
            {sortedHoldings.length === 0 ? (
              <EmptyState 
                title="No allocation data"
                description="Start investing to see your portfolio allocation"
              />
            ) : (
              <>
                <div className="bg-white rounded-xl border border-slate-200 shadow-sm p-4">
                  <h3 className="text-lg font-medium text-slate-800 mb-3">Asset Allocation</h3>
                  
                  <div className="flex items-center justify-center mb-4">
                    <div className="relative w-32 h-32">
                      <PieChart className="absolute h-full w-full text-slate-300" />
                      <div className="absolute inset-0 flex items-center justify-center">
                        <div className="text-center">
                          <p className="text-xs text-slate-500">Industries</p>
                          <p className="text-lg font-bold text-slate-700">{sortedIndustries.length}</p>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    {sortedIndustries.map(({ industry, value, percent }) => (
                      <div key={industry} className="group">
                        <div className="flex justify-between text-sm mb-1">
                          <p className="font-medium text-slate-700">{industry}</p>
                          <p className="text-slate-900">{percent.toFixed(1)}%</p>
                        </div>
                        <div className="h-2 w-full bg-slate-100 rounded-full overflow-hidden">
                          <div 
                            className={`h-full ${industryColors[industry] || 'bg-slate-500'} rounded-full`}
                            style={{ width: `${percent}%` }}
                          ></div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
                
                {/* Industry Benchmarks */}
                <div className="bg-white rounded-xl border border-slate-200 shadow-sm p-4">
                  <div className="flex justify-between items-center mb-3">
                    <h3 className="text-lg font-medium text-slate-800">Industry Benchmarks</h3>
                    <TrendingUp className="h-4 w-4 text-slate-400" />
                  </div>
                  
                  <div className="space-y-4">
                    {sortedIndustries.map(({ industry }) => {
                      const industryAvg = getIndustryAverages(industry);
                      return (
                        <div key={`benchmark-${industry}`} className="bg-slate-50 rounded-lg p-3">
                          <p className="font-medium text-slate-700 mb-2">{industry}</p>
                          <div className="grid grid-cols-2 gap-2 text-xs">
                            <div>
                              <p className="text-slate-500">Avg. Growth</p>
                              <p className="font-medium text-slate-700">{industryAvg.performance.revenueGrowth}%</p>
                            </div>
                            <div>
                              <p className="text-slate-500">Avg. P/E</p>
                              <p className="font-medium text-slate-700">{industryAvg.value.peRatio}</p>
                            </div>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </div>
              </>
            )}
          </TabsContent>
          
          <TabsContent value="activity" className="space-y-4">
            <div className="bg-white rounded-xl border border-slate-200 shadow-sm p-4">
              <div className="flex justify-between items-center mb-3">
                <h3 className="text-lg font-medium text-slate-800">Recent Activity</h3>
                <Clock className="h-4 w-4 text-slate-400" />
              </div>
              
              {sortedHoldings.length === 0 ? (
                <EmptyState 
                  title="No activity yet"
                  description="Your investment history will appear here"
                  className="py-8"
                />
              ) : (
                <div className="space-y-3">
                  {sortedHoldings.map(holding => (
                    <div key={`activity-${holding.stock.ticker}`} className="flex items-center p-2 hover:bg-slate-50 rounded-lg">
                      <div className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center mr-3">
                        <DollarSign className="h-4 w-4 text-blue-600" />
                      </div>
                      <div className="flex-1">
                        <p className="text-sm font-medium text-slate-700">Purchased {holding.stock.ticker}</p>
                        <p className="text-xs text-slate-500">{new Date(holding.purchaseDate).toLocaleDateString()}</p>
                      </div>
                      <div className="text-right">
                        <p className="text-sm font-medium text-slate-800">
                          ${(holding.shares * holding.purchasePrice).toFixed(2)}
                        </p>
                        <p className="text-xs text-slate-500">{holding.shares.toFixed(4)} shares</p>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </main>
      
      <AppNavigation />
    </>
  );
}

// Helper components
function MetricItem({ label, value, color }: { label: string; value: number; color: string }) {
  return (
    <div className="bg-white rounded-lg p-2 border border-slate-200">
      <p className="text-xs text-slate-500 mb-1">{label}</p>
      <div className="flex items-center">
        <div className={`h-2 w-2 rounded-full ${color} mr-2`}></div>
        <p className="font-bold text-lg">{value}</p>
      </div>
      <Progress value={value} className="h-1 mt-1" />
    </div>
  );
}

function HoldingCard({ 
  holding, 
  onSell 
}: { 
  holding: PortfolioHolding; 
  onSell: (shares: number) => void;
}) {
  const [showSellOptions, setShowSellOptions] = useState(false);
  
  const currentValue = holding.shares * holding.stock.price;
  const investedValue = holding.shares * holding.purchasePrice;
  const returnValue = currentValue - investedValue;
  const returnPercent = (returnValue / investedValue) * 100;
  
  const handleSell = (percentage: number) => {
    const sharesToSell = holding.shares * (percentage / 100);
    onSell(sharesToSell);
    setShowSellOptions(false);
  };

  return (
    <div className="bg-white rounded-xl overflow-hidden border border-slate-200 shadow-sm">
      <div className="p-4 flex justify-between items-center">
        <div className="flex items-center">
          <div className="mr-3 h-10 w-10 bg-slate-100 rounded-lg flex items-center justify-center font-bold text-slate-800">
            {holding.stock.ticker.substring(0, 2)}
          </div>
          <div>
            <h3 className="font-medium text-slate-800">{holding.stock.name}</h3>
            <p className="text-xs text-slate-500">{holding.stock.ticker} • {holding.stock.industry}</p>
          </div>
        </div>
        
        <div className="relative">
          <button 
            onClick={() => setShowSellOptions(!showSellOptions)}
            className="p-1 rounded-full hover:bg-slate-100"
          >
            <MoreHorizontal className="h-5 w-5 text-slate-400" />
          </button>
          
          {showSellOptions && (
            <div className="absolute right-0 z-10 mt-1 w-48 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5">
              <div className="py-1 divide-y divide-slate-100">
                <button
                  onClick={() => handleSell(25)}
                  className="block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100"
                >
                  Sell 25%
                </button>
                <button
                  onClick={() => handleSell(50)}
                  className="block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100"
                >
                  Sell 50%
                </button>
                <button
                  onClick={() => handleSell(100)}
                  className="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-slate-100"
                >
                  Sell All
                </button>
                <button
                  onClick={() => setShowSellOptions(false)}
                  className="block w-full text-left px-4 py-2 text-sm text-slate-500 hover:bg-slate-100"
                >
                  Cancel
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
      
      <div className="px-4 pb-3">
        <div className="flex justify-between text-sm">
          <div>
            <p className="text-slate-500">Shares</p>
            <p className="font-medium">{holding.shares.toFixed(4)}</p>
          </div>
          <div>
            <p className="text-slate-500">Avg. Price</p>
            <p className="font-medium">${holding.purchasePrice.toFixed(2)}</p>
          </div>
          <div>
            <p className="text-slate-500">Current</p>
            <p className="font-medium">${holding.stock.price.toFixed(2)}</p>
          </div>
        </div>
      </div>
      
      <div className="bg-slate-50 px-4 py-3 border-t border-slate-100">
        <div className="flex justify-between items-center">
          <div>
            <p className="text-sm text-slate-500">Value</p>
            <p className="font-bold text-slate-800">${currentValue.toFixed(2)}</p>
          </div>
          
          <div className="text-right">
            <p className="text-sm text-slate-500">Return</p>
            <p className={`font-bold flex items-center ${returnValue >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              {returnValue >= 0 ? (
                <ArrowUp className="h-3 w-3 mr-1" />
              ) : (
                <ArrowDown className="h-3 w-3 mr-1" />
              )}
              ${Math.abs(returnValue).toFixed(2)} ({returnValue >= 0 ? '+' : ''}{returnPercent.toFixed(2)}%)
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

function EmptyState({ 
  title, 
  description, 
  className = "" 
}: { 
  title: string; 
  description: string;
  className?: string;
}) {
  return (
    <div className={`text-center py-10 ${className}`}>
      <Settings className="h-10 w-10 mx-auto mb-3 text-slate-300" />
      <h3 className="text-lg font-medium text-slate-700 mb-1">{title}</h3>
      <p className="text-sm text-slate-500">{description}</p>
    </div>
  );
}

================
File: client/src/pages/stock-detail-page.tsx
================
import { useState, useEffect, useMemo } from "react";
import { useParams, useLocation } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { Stack } from "@shared/schema";
import { ArrowLeft, BellRing, Zap } from "lucide-react";
import { getQueryFn } from "@/lib/queryClient";
import { StockData, getIndustryStocks } from "@/lib/stock-data";
import StockCard from "@/components/ui/stock-card";
import StackCompletedModal from "@/components/stack-completed-modal";

export default function StockDetailPage() {
  const { stackId } = useParams<{ stackId: string }>();
  const [_, setLocation] = useLocation();
  const [currentStockIndex, setCurrentStockIndex] = useState(0);
  const [completedModalOpen, setCompletedModalOpen] = useState(false);
  const [useRealTimeData, setUseRealTimeData] = useState(true);
  
  // Fetch stack data
  const { data: stack, isLoading } = useQuery<Stack>({
    queryKey: [`/api/stacks/${stackId}`],
    queryFn: getQueryFn({ on401: "returnNull" }),
    enabled: !!stackId,
  });

  // Generate stocks data for the industry
  const stocks = useMemo(() => {
    if (!stack) return [];
    return getIndustryStocks(stack.industry);
  }, [stack]);

  // Handle navigation between stocks
  const handleNextStock = () => {
    if (currentStockIndex < stocks.length - 1) {
      setCurrentStockIndex(currentStockIndex + 1);
    } else {
      // Open completed modal when the user has swiped through all stocks
      setCompletedModalOpen(true);
    }
  };

  const handlePreviousStock = () => {
    if (currentStockIndex > 0) {
      setCurrentStockIndex(currentStockIndex - 1);
    }
  };

  // Handle resetting the stack to view again
  const handleResetStack = () => {
    setCurrentStockIndex(0);
    setCompletedModalOpen(false);
  };

  // Handle back button click
  const handleBack = () => {
    setLocation("/");
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-black">
        <div className="animate-spin w-10 h-10 border-4 border-cyan-400 border-t-transparent rounded-full"></div>
      </div>
    );
  }

  if (!stack || stocks.length === 0) {
    return (
      <div className="flex items-center justify-center flex-col min-h-screen bg-black">
        <p className="text-white mb-4">No stocks available for this industry.</p>
        <button 
          onClick={handleBack}
          className="text-cyan-400 hover:bg-gray-800 px-4 py-2 rounded-full transition-colors border border-cyan-400"
        >
          Go Back
        </button>
      </div>
    );
  }

  const currentStock = stocks[currentStockIndex];
  
  // Get next stock for preview during swipes
  const nextStock = currentStockIndex < stocks.length - 1 
    ? stocks[currentStockIndex + 1] 
    : stocks[0]; // Loop back to the first stock if we're at the end

  return (
    <div className="flex flex-col min-h-screen bg-black text-white">
      {/* Header */}
      <header className="flex items-center justify-between p-4 border-b border-gray-800 bg-gradient-to-r from-gray-900 to-black">
        <button 
          onClick={handleBack}
          className="text-cyan-400 hover:bg-gray-800 p-2 rounded-full transition-colors"
        >
          <ArrowLeft size={20} />
        </button>
        <div className="flex items-center gap-2">
          <h1 className="text-xl font-bold text-green-400">Swipefolio</h1>
          <button
            onClick={() => setUseRealTimeData(!useRealTimeData)}
            className={`ml-2 text-xs px-3 py-1 rounded-full transition-colors ${
              useRealTimeData 
                ? 'bg-green-800 text-green-200 hover:bg-green-700' 
                : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
            }`}
          >
            {useRealTimeData ? 'Live Data' : 'Simple View'}
          </button>
        </div>
        <button className="text-green-400 hover:bg-gray-800 p-2 rounded-full transition-colors relative">
          <div className="absolute top-1 right-1 w-2 h-2 bg-green-400 rounded-full"></div>
          <BellRing size={20} />
        </button>
      </header>

      {/* Main content */}
      <div className="flex-1 relative">
        {stocks.length > 0 && (
          <StockCard
            stock={currentStock}
            onNext={handleNextStock}
            onPrevious={handlePreviousStock}
            currentIndex={currentStockIndex}
            totalCount={stocks.length}
            nextStock={nextStock}
            displayMode={useRealTimeData ? 'realtime' : 'simple'}
          />
        )}
      </div>

      {/* Modern Buy/Skip Buttons */}
      <div className="fixed bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black to-transparent z-10">
        <div className="flex justify-between gap-4 max-w-md mx-auto">
          <button
            onClick={handlePreviousStock}
            className="w-1/2 py-3 rounded-xl bg-gradient-to-r from-red-600 to-red-700 text-white font-medium shadow-lg transition transform hover:scale-105 active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            disabled={currentStockIndex === 0}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <line x1="5" y1="12" x2="19" y2="12"></line>
              <polyline points="12 5 5 12 12 19"></polyline>
            </svg>
            Skip
          </button>
          <button
            onClick={() => {
              // Open portfolio impact calculator
              const stockCardElement = document.querySelector('[data-testid="stock-card"]');
              const buyButtonElement = stockCardElement?.querySelector('[data-testid="buy-button"]');
              
              if (buyButtonElement && 'click' in buyButtonElement) {
                (buyButtonElement as HTMLButtonElement).click();
              } else {
                // Fallback - just move to next stock
                handleNextStock();
              }
            }}
            className="w-1/2 py-3 rounded-xl bg-gradient-to-r from-emerald-500 to-green-600 text-white font-medium shadow-lg transition transform hover:scale-105 active:scale-95 flex items-center justify-center gap-2"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M20 12v6a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h6"></path>
              <path d="M12 12h4l-1.8-1.8"></path>
              <path d="M14.2 13.8L16 12"></path>
              <circle cx="17" cy="7" r="3"></circle>
            </svg>
            Buy
          </button>
        </div>
      </div>

      {/* Completed modal */}
      <StackCompletedModal
        isOpen={completedModalOpen}
        onClose={() => setCompletedModalOpen(false)}
        onReset={handleResetStack}
        stackName={stack?.title || ""}
        stocksCount={stocks.length}
      />
    </div>
  );
}

================
File: client/src/pages/time-attack.tsx
================


================
File: client/src/types/game.ts
================
export interface GameState {
  score: number;
  level: number;
  xp: number;
  tickets: number;
  lastSaved: number;
}

export interface MetricQuestion {
  id: number;
  metric: string;
  explanation: string;
  companyValue: number;
  industryAverage: number;
  isGood: boolean;
}

export interface Stock {
  id: number;
  name: string;
  symbol: string;
  price: number;
  change: number;
  marketCap: number;
  industry: string;
  description: string;
  tier: number;
  volatility: number;
}

export interface MarketEvent {
  type: "positive" | "negative";
  message: string;
  icon: JSX.Element;
  color: string;
}

export interface Decision {
  id: number;
  title: string;
  description: string;
  options: {
    text: string;
    effects: {
      value?: number;
      employees?: number;
      revenue?: number;
      happiness?: number;
      innovation?: number;
      reputation?: number;
    };
  }[];
  icon: JSX.Element;
}

export interface Company {
  name: string;
  value: number;
  employees: number;
  revenue: number;
  happiness: number;
  innovation: number;
  reputation: number;
}

================
File: client/src/App.tsx
================
import { Switch, Route } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import NotFound from "@/pages/not-found";
import HomePage from "@/pages/home-page";
import AuthPage from "@/pages/auth-page";
import LessonPage from "@/pages/lesson-page";
import OnboardingPage from "@/pages/onboarding-page";
import StockDetailPage from "@/pages/stock-detail-page";
import LearnPage from "@/pages/learn";
import MarketAdventure from "@/pages/market-adventure";
import InvestorSimulator from "@/pages/investor-simulator";
import { TimeAttackGame } from "@/components/time-attack-game";
import { AuthProvider } from "@/hooks/use-auth";
import { UserProgressProvider } from "@/contexts/user-progress-context";
import { BoardRoomGame } from "@/components/board-room-game";

function Router() {
  return (
    <Switch>
      <Route path="/" component={HomePage} />
      <Route path="/stock/:stackId" component={StockDetailPage} />
      <Route path="/lesson/:stackId" component={LessonPage} />
      <Route path="/learn" component={LearnPage} />
      <Route path="/market-adventure" component={MarketAdventure} />
      <Route path="/investor-simulator" component={InvestorSimulator} />
      <Route path="/time-attack" component={TimeAttackGame} />
      <Route path="/learn/board-room" component={BoardRoomGame} />
      <Route path="/achievements" component={HomePage} />
      <Route path="/profile" component={HomePage} />
      <Route path="/onboarding" component={OnboardingPage} />
      <Route path="/auth" component={AuthPage} />
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <UserProgressProvider>
          <Router />
          <Toaster />
        </UserProgressProvider>
      </AuthProvider>
    </QueryClientProvider>
  );
}

export default App;

================
File: client/src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply font-sans antialiased bg-white text-slate-800;
  }
}

/* SVG chart gradients for positive/negative values */
@keyframes chartLoading {
  0% { opacity: 0.5; }
  50% { opacity: 1; }
  100% { opacity: 0.5; }
}

#chartGradient stop:first-child {
  stop-color: rgba(14, 165, 233, 0.5);
}

#chartGradient stop:last-child {
  stop-color: rgba(14, 165, 233, 0);
}

#negativeChartGradient stop:first-child {
  stop-color: rgba(239, 68, 68, 0.5);
}

#negativeChartGradient stop:last-child {
  stop-color: rgba(239, 68, 68, 0);
}

/* Metric card styling */
/* This section is moved below */

/* Custom styles for Swipefolio light theme */
.app-header {
  @apply bg-white border-b border-slate-100 text-slate-800 shadow-sm; 
}

.app-navigation {
  @apply bg-white border-t border-slate-100 text-slate-600 shadow-[0_-1px_2px_rgba(0,0,0,0.03)];
}

.search-bar {
  @apply bg-slate-50 border border-slate-200 text-slate-800 placeholder:text-slate-400 focus:border-sky-400 focus:ring-sky-400/20;
}

.stack-card {
  @apply bg-white rounded-xl overflow-hidden border border-slate-100 cursor-pointer transition-all duration-300 hover:border-sky-400/30 hover:shadow-lg hover:shadow-sky-100;
}

.stack-thumbnail {
  @apply h-32 rounded-t-xl overflow-hidden relative;
}

.stack-category {
  @apply text-xs uppercase tracking-wide text-sky-500 mb-1 font-medium;
}

.stack-title {
  @apply text-slate-800 font-bold text-lg;
}

.stack-stats {
  @apply text-slate-500 text-xs;
}

.section-header {
  @apply text-slate-800 font-semibold text-xl;
}

.see-all {
  @apply text-sky-500 text-sm hover:text-sky-600 transition-colors;
}

.category-chip {
  @apply bg-slate-50 text-slate-600 rounded-full px-4 py-1.5 text-sm border border-slate-200 transition-all duration-200;
}

.category-chip.active {
  @apply bg-sky-500 text-white border-sky-500 font-medium shadow-sm;
}

.main-content {
  @apply pb-24 pt-20 px-4 bg-slate-50;
}

.badge {
  @apply text-xs rounded-full px-2 py-0.5 inline-flex items-center justify-center font-medium;
}

.badge-beginner {
  @apply bg-green-50 text-green-600 border border-green-200;
}

.badge-intermediate {
  @apply bg-amber-50 text-amber-600 border border-amber-200;
}

.badge-advanced {
  @apply bg-red-50 text-red-600 border border-red-200;
}

.badge-cards {
  @apply bg-slate-100 text-slate-500 border border-slate-200;
}

/* Hide scrollbar but keep functionality */
.no-scrollbar {
  -ms-overflow-style: none;  /* IE and Edge */
  scrollbar-width: none;  /* Firefox */
}

.no-scrollbar::-webkit-scrollbar {
  display: none;  /* Chrome, Safari, Opera */
}

.grid-cols-stacks {
  @apply grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-5 mt-4;
}

/* Chart animations */
.chart-animate-in {
  animation: fadeIn 0.5s ease-out forwards;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

/* Modern clean UI extras */
.glass-effect {
  @apply bg-white/80 backdrop-blur-sm border border-white/90;
}

.hover-scale {
  @apply transition-transform duration-300 hover:scale-105;
}

.icon-highlight {
  @apply text-sky-500;
}

.button-primary {
  @apply bg-sky-500 hover:bg-sky-600 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 shadow-sm;
}

.button-secondary {
  @apply bg-white hover:bg-slate-50 text-sky-500 font-medium py-2 px-4 rounded-lg transition-colors duration-200 border border-slate-200 shadow-sm;
}

.metric-box {
  @apply bg-white rounded-xl border border-slate-200 p-4 shadow-md transition-all duration-300 hover:shadow-lg;
  box-shadow: 0 4px 12px -2px rgba(0, 0, 0, 0.05), 0 2px 4px -1px rgba(0, 0, 0, 0.02);
}

.metric-high {
  @apply bg-gradient-to-br from-green-50 to-white border border-green-200;
  box-shadow: 0 4px 12px -4px rgba(16, 185, 129, 0.15), 0 2px 6px -2px rgba(16, 185, 129, 0.05);
}

.metric-average {
  @apply bg-gradient-to-br from-amber-50 to-white border border-amber-200;
  box-shadow: 0 4px 12px -4px rgba(245, 158, 11, 0.15), 0 2px 6px -2px rgba(245, 158, 11, 0.05);
}

.metric-low {
  @apply bg-gradient-to-br from-red-50 to-white border border-red-200;
  box-shadow: 0 4px 12px -4px rgba(239, 68, 68, 0.15), 0 2px 6px -2px rgba(239, 68, 68, 0.05);
}

.stat-value {
  @apply text-2xl font-bold text-slate-800;
  text-shadow: 0 1px 1px rgba(255, 255, 255, 0.8);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.25rem 0.5rem;
  background: linear-gradient(to bottom, #ffffff, #f8fafc);
  border-radius: 0.5rem;
  border: 1px solid #e2e8f0;
  box-shadow: 
    0 1px 2px rgba(0, 0, 0, 0.05),
    inset 0 1px 0 rgba(255, 255, 255, 1);
}

.stat-label {
  @apply text-xs uppercase tracking-wide text-slate-500 font-medium;
  letter-spacing: 0.05em;
}

.card-shadow {
  @apply shadow-[0_10px_30px_-15px_rgba(0,0,0,0.12),_0_4px_6px_-2px_rgba(0,0,0,0.05)];
}

.stock-card {
  @apply bg-white rounded-2xl border border-slate-200 overflow-hidden;
  box-shadow: 
    0 10px 25px -10px rgba(0, 0, 0, 0.1),
    0 5px 15px -5px rgba(0, 0, 0, 0.04),
    0 0 0 1px rgba(0, 0, 0, 0.02);
  transition: all 0.3s cubic-bezier(0.22, 1, 0.36, 1);
}

.stock-card:hover {
  box-shadow: 
    0 20px 30px -15px rgba(0, 0, 0, 0.1),
    0 10px 20px -10px rgba(0, 0, 0, 0.04),
    0 0 0 1px rgba(0, 0, 0, 0.02);
  transform: translateY(-2px);
}

/* Chart gradients */
.chart-positive-stroke {
  @apply stroke-cyan-500;
  stroke-width: 2px;
  stroke-linecap: round;
  filter: drop-shadow(0 1px 2px rgba(14, 165, 233, 0.3));
}

.chart-negative-stroke {
  @apply stroke-red-500;
  stroke-width: 2px;
  stroke-linecap: round;
  filter: drop-shadow(0 1px 2px rgba(239, 68, 68, 0.3));
}

/* Swipe Animations and Delightful UI Effects */
@keyframes slideInRight {
  from { transform: translateX(100%); opacity: 0; }
  to { transform: translateX(0); opacity: 1; }
}

@keyframes slideInLeft {
  from { transform: translateX(-100%); opacity: 0; }
  to { transform: translateX(0); opacity: 1; }
}

@keyframes popIn {
  0% { transform: scale(0.8); opacity: 0; }
  40% { transform: scale(1.05); opacity: 1; }
  100% { transform: scale(1); opacity: 1; }
}

@keyframes floatUp {
  0% { transform: translateY(10px); opacity: 0; }
  100% { transform: translateY(0); opacity: 1; }
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
}

.animate-slide-right {
  animation: slideInRight 0.4s cubic-bezier(0.2, 0.8, 0.2, 1) forwards;
}

.animate-slide-left {
  animation: slideInLeft 0.4s cubic-bezier(0.2, 0.8, 0.2, 1) forwards;
}

.animate-pop {
  animation: popIn 0.4s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

.animate-float-up {
  animation: floatUp 0.5s ease-out forwards;
}

.animate-pulse-subtle {
  animation: pulse 2s infinite ease-in-out;
}

/* Portfolio Impact Calculator styles */
.calculator-overlay {
  @apply bg-black/40 backdrop-blur-sm fixed inset-0 z-50 transition-all duration-300;
}

.calculator-modal {
  /* Positioning is now handled inline for precise centering */
  @apply fixed overflow-auto rounded-2xl bg-white z-50 border border-slate-200 shadow-2xl
  transition-all duration-300 text-slate-800;
  left: 50% !important;
  top: 50% !important;
  transform: translate(-50%, -50%) !important;
  width: 90% !important;
  max-width: 450px !important;
  max-height: 90vh !important;
}

/* Purchase Success Modal Styles */
.success-modal {
  @apply fixed overflow-auto rounded-2xl bg-white z-50 border border-slate-200 shadow-2xl
  transition-all duration-300 text-slate-800;
  max-height: 90vh !important;
}

/* Enhanced card swipe effects */
.stock-card {
  touch-action: pan-y;
  will-change: transform;
  transition: transform 0.3s cubic-bezier(0.2, 0.8, 0.2, 1);
}

.swipe-indicator {
  @apply absolute top-1/2 -translate-y-1/2 bg-white/80 rounded-full p-2 shadow-lg
  border border-slate-100 backdrop-blur-sm transition-all duration-300;
}

.swipe-left {
  @apply left-3 text-cyan-500 opacity-0;
}

.swipe-right {
  @apply right-3 text-emerald-500 opacity-0;
}

.stock-card:hover .swipe-indicator {
  @apply opacity-50;
}

/* Paper trading button effects */
.invest-button {
  @apply w-full rounded-xl py-4 bg-gradient-to-r from-green-400 to-emerald-500 text-white 
  font-bold text-lg shadow-lg hover:shadow-xl transition-all duration-300
  hover:translate-y-[-2px] active:translate-y-[1px] relative overflow-hidden;
}

/* Slide-to-invest effects */
.slide-to-invest-container {
  @apply relative w-full h-14 rounded-xl overflow-hidden bg-gradient-to-r from-slate-100 to-white
  border border-slate-200 shadow-[inset_0_2px_4px_rgba(0,0,0,0.06)];
}

.slide-track {
  @apply absolute top-0 left-0 right-0 bottom-0 flex items-center px-4;
  background: repeating-linear-gradient(
    -45deg,
    rgba(0, 0, 0, 0.02),
    rgba(0, 0, 0, 0.02) 5px,
    rgba(0, 0, 0, 0) 5px,
    rgba(0, 0, 0, 0) 10px
  );
}

.slider-thumb {
  @apply h-10 w-16 sm:w-20 rounded-lg bg-gradient-to-r from-cyan-500 to-blue-500 
  shadow-[0_4px_10px_rgba(0,0,0,0.1)] flex items-center justify-center text-white font-semibold 
  cursor-grab active:cursor-grabbing z-10 border border-white/20;
  touch-action: none;
  transition: transform 0.15s ease, box-shadow 0.15s ease;
}

.slider-thumb:hover {
  @apply shadow-[0_6px_12px_rgba(0,0,0,0.15)];
  transform: translateY(-1px);
}

.slider-thumb:active {
  @apply shadow-[0_3px_6px_rgba(0,0,0,0.1)];
  transform: translateY(1px);
}

.slider-hint {
  @apply absolute inset-0 flex items-center justify-center text-slate-500 text-base font-medium
  select-none pointer-events-none z-0;
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  letter-spacing: 0.02em;
}

.slide-success {
  @apply absolute inset-0 flex items-center justify-center bg-gradient-to-r 
  from-cyan-500 to-blue-500 text-white font-bold text-base opacity-0 z-20
  transition-opacity duration-300;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
}

================
File: client/src/main.tsx
================
import { createRoot } from "react-dom/client";
import { QueryClientProvider } from "@tanstack/react-query";
import { queryClient } from "@/lib/queryClient";
import { Toaster } from "@/components/ui/toaster";
import { PortfolioProvider } from "@/contexts/portfolio-context";
import App from "./App";
import "./index.css";

createRoot(document.getElementById("root")!).render(
  <QueryClientProvider client={queryClient}>
    <PortfolioProvider>
      <App />
      <Toaster />
    </PortfolioProvider>
  </QueryClientProvider>
);

================
File: client/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Swipefolio - Finance Learning Made Fun</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&family=Inter:wght@300;400;500&family=Roboto+Mono&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
    <style>
      body {
        font-family: 'Inter', sans-serif;
        touch-action: manipulation;
      }
      .progress-ring-circle {
        transform: rotate(-90deg);
        transform-origin: 50% 50%;
        transition: stroke-dashoffset 0.3s;
      }
      .stack-card {
        position: relative;
      }
      .stack-card:hover {
        cursor: pointer;
      }
      .swipe-card {
        position: absolute;
        width: 100%;
        height: 100%;
        will-change: transform;
        backface-visibility: hidden;
      }
      .swipe-card:not(:first-child) {
        z-index: -1;
      }
      .topic-bubble {
        display: inline-block;
        padding: 6px 12px;
        border-radius: 9999px;
        font-size: 14px;
        font-weight: 500;
        margin-right: 8px;
        margin-bottom: 8px;
        transition: all 0.2s ease;
      }
      .choice-btn {
        transition: all 0.2s ease;
      }
      .choice-btn:hover {
        transform: translateY(-2px);
      }
      .xp-animation {
        animation: xp-pop 0.5s ease-out;
      }
      @keyframes xp-pop {
        0% { transform: scale(0.8); opacity: 0; }
        50% { transform: scale(1.2); opacity: 1; }
        100% { transform: scale(1); opacity: 1; }
      }
      .badge {
        transform: perspective(800px) rotateY(0deg);
        transition: transform 0.5s ease;
      }
      .badge:hover {
        transform: perspective(800px) rotateY(15deg);
      }
    </style>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: server/api/realtime-stocks.ts
================
import { Router } from 'express';
import { 
  getRealTimeQuote, 
  getIntradayData, 
  getCompanyOverview, 
  searchStocks 
} from '../services/alpha-vantage';

const router = Router();

// Get real-time quote for a stock
router.get('/quote/:symbol', async (req, res) => {
  try {
    const { symbol } = req.params;
    const quoteData = await getRealTimeQuote(symbol);
    res.json(quoteData);
  } catch (error: any) {
    console.error('Error in /quote endpoint:', error);
    res.status(500).json({ error: error.message || 'Failed to fetch real-time quote' });
  }
});

// Alternative endpoint that supports query parameters
router.get('/quote', async (req, res) => {
  try {
    const { symbol } = req.query;
    if (!symbol) {
      return res.status(400).json({ error: 'Symbol parameter is required' });
    }
    const quoteData = await getRealTimeQuote(symbol as string);
    res.json(quoteData);
  } catch (error: any) {
    console.error('Error in /quote endpoint:', error);
    res.status(500).json({ error: error.message || 'Failed to fetch real-time quote' });
  }
});

// Get intraday time series data
router.get('/intraday/:symbol', async (req, res) => {
  try {
    const { symbol } = req.params;
    const { interval = '5min' } = req.query;
    const intradayData = await getIntradayData(symbol, interval as string);
    
    // Convert to array format for easier consumption by charts
    const dataPoints = Object.entries(intradayData).map(([timestamp, values]: [string, any]) => ({
      timestamp,
      open: parseFloat(values['1. open']),
      high: parseFloat(values['2. high']),
      low: parseFloat(values['3. low']),
      close: parseFloat(values['4. close']),
      volume: parseInt(values['5. volume'], 10)
    }));
    
    res.json(dataPoints);
  } catch (error: any) {
    console.error('Error in /intraday endpoint:', error);
    res.status(500).json({ error: error.message || 'Failed to fetch intraday data' });
  }
});

// Alternative endpoint that supports query parameters
router.get('/intraday', async (req, res) => {
  try {
    const { symbol, interval = '5min' } = req.query;
    if (!symbol) {
      return res.status(400).json({ error: 'Symbol parameter is required' });
    }
    const intradayData = await getIntradayData(symbol as string, interval as string);
    
    // Convert to array format for easier consumption by charts
    const dataPoints = Object.entries(intradayData).map(([timestamp, values]: [string, any]) => ({
      timestamp,
      open: parseFloat(values['1. open']),
      high: parseFloat(values['2. high']),
      low: parseFloat(values['3. low']),
      close: parseFloat(values['4. close']),
      volume: parseInt(values['5. volume'], 10)
    }));
    
    res.json(dataPoints);
  } catch (error: any) {
    console.error('Error in /intraday endpoint:', error);
    res.status(500).json({ error: error.message || 'Failed to fetch intraday data' });
  }
});

// Get company overview
router.get('/overview/:symbol', async (req, res) => {
  try {
    const { symbol } = req.params;
    const overviewData = await getCompanyOverview(symbol);
    res.json(overviewData);
  } catch (error: any) {
    console.error('Error in /overview endpoint:', error);
    res.status(500).json({ error: error.message || 'Failed to fetch company overview' });
  }
});

// Alternative endpoint that supports query parameters
router.get('/overview', async (req, res) => {
  try {
    const { symbol } = req.query;
    if (!symbol) {
      return res.status(400).json({ error: 'Symbol parameter is required' });
    }
    const overviewData = await getCompanyOverview(symbol as string);
    res.json(overviewData);
  } catch (error: any) {
    console.error('Error in /overview endpoint:', error);
    res.status(500).json({ error: error.message || 'Failed to fetch company overview' });
  }
});

// Search for stocks
router.get('/search', async (req, res) => {
  try {
    const { keywords } = req.query;
    if (!keywords) {
      return res.status(400).json({ error: 'Keywords parameter is required' });
    }
    
    const searchResults = await searchStocks(keywords as string);
    res.json(searchResults);
  } catch (error: any) {
    console.error('Error in /search endpoint:', error);
    res.status(500).json({ error: error.message || 'Failed to search stocks' });
  }
});

export default router;

================
File: server/services/alpha-vantage.ts
================
import axios from 'axios';

const API_KEY = process.env.ALPHA_VANTAGE_API_KEY;
const BASE_URL = 'https://www.alphavantage.co/query';

/**
 * Fetches real-time quote data for a specific stock symbol
 * @param symbol Stock ticker symbol (e.g., 'AAPL', 'MSFT')
 * @returns Promise with quote data
 */
export async function getRealTimeQuote(symbol: string) {
  try {
    const response = await axios.get(BASE_URL, {
      params: {
        function: 'GLOBAL_QUOTE',
        symbol,
        apikey: API_KEY
      }
    });
    
    // Check if response contains valid data
    if (response.data && response.data['Global Quote']) {
      return response.data['Global Quote'];
    } else if (response.data && response.data.Note) {
      // API limit reached
      console.warn('Alpha Vantage API limit reached:', response.data.Note);
      throw new Error('API call frequency limit reached');
    } else {
      throw new Error('Invalid response from Alpha Vantage');
    }
  } catch (error) {
    console.error('Error fetching real-time quote:', error);
    throw error;
  }
}

/**
 * Fetches intraday price data for a specific stock symbol
 * @param symbol Stock ticker symbol (e.g., 'AAPL', 'MSFT')
 * @param interval Time interval between data points (e.g., '5min', '15min', '30min', '60min')
 * @returns Promise with intraday time series data
 */
export async function getIntradayData(symbol: string, interval = '5min') {
  try {
    const response = await axios.get(BASE_URL, {
      params: {
        function: 'TIME_SERIES_INTRADAY',
        symbol,
        interval,
        apikey: API_KEY
      }
    });
    
    // Check if response contains valid data
    const timeSeriesKey = `Time Series (${interval})`;
    if (response.data && response.data[timeSeriesKey]) {
      return response.data[timeSeriesKey];
    } else if (response.data && response.data.Note) {
      // API limit reached
      console.warn('Alpha Vantage API limit reached:', response.data.Note);
      throw new Error('API call frequency limit reached');
    } else {
      throw new Error('Invalid response from Alpha Vantage');
    }
  } catch (error) {
    console.error('Error fetching intraday data:', error);
    throw error;
  }
}

/**
 * Fetches company overview data for a specific stock symbol
 * @param symbol Stock ticker symbol (e.g., 'AAPL', 'MSFT')
 * @returns Promise with company overview data
 */
export async function getCompanyOverview(symbol: string) {
  try {
    const response = await axios.get(BASE_URL, {
      params: {
        function: 'OVERVIEW',
        symbol,
        apikey: API_KEY
      }
    });
    
    // Check if response contains valid data
    if (response.data && response.data.Symbol) {
      return response.data;
    } else if (response.data && response.data.Note) {
      // API limit reached
      console.warn('Alpha Vantage API limit reached:', response.data.Note);
      throw new Error('API call frequency limit reached');
    } else {
      throw new Error('Invalid response from Alpha Vantage');
    }
  } catch (error) {
    console.error('Error fetching company overview:', error);
    throw error;
  }
}

/**
 * Searches for stocks by keywords or company name
 * @param keywords Search keywords or company name
 * @returns Promise with search results
 */
export async function searchStocks(keywords: string) {
  try {
    const response = await axios.get(BASE_URL, {
      params: {
        function: 'SYMBOL_SEARCH',
        keywords,
        apikey: API_KEY
      }
    });
    
    // Check if response contains valid data
    if (response.data && response.data.bestMatches) {
      return response.data.bestMatches;
    } else if (response.data && response.data.Note) {
      // API limit reached
      console.warn('Alpha Vantage API limit reached:', response.data.Note);
      throw new Error('API call frequency limit reached');
    } else {
      throw new Error('Invalid response from Alpha Vantage');
    }
  } catch (error) {
    console.error('Error searching stocks:', error);
    throw error;
  }
}

================
File: server/auth.ts
================
import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import { Express } from "express";
import session from "express-session";
import { scrypt, randomBytes, timingSafeEqual } from "crypto";
import { promisify } from "util";
import { storage } from "./storage";
import { User as SelectUser } from "@shared/schema";

declare global {
  namespace Express {
    interface User extends SelectUser {}
  }
}

const scryptAsync = promisify(scrypt);

async function hashPassword(password: string) {
  const salt = randomBytes(16).toString("hex");
  const buf = (await scryptAsync(password, salt, 64)) as Buffer;
  return `${buf.toString("hex")}.${salt}`;
}

async function comparePasswords(supplied: string, stored: string) {
  const [hashed, salt] = stored.split(".");
  const hashedBuf = Buffer.from(hashed, "hex");
  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;
  return timingSafeEqual(hashedBuf, suppliedBuf);
}

export function setupAuth(app: Express) {
  const sessionSettings: session.SessionOptions = {
    secret: process.env.SESSION_SECRET || "swipefolio-secret-key",
    resave: false,
    saveUninitialized: false,
    store: storage.sessionStore,
    cookie: {
      maxAge: 1000 * 60 * 60 * 24 * 7, // 1 week
    }
  };

  app.set("trust proxy", 1);
  app.use(session(sessionSettings));
  app.use(passport.initialize());
  app.use(passport.session());

  passport.use(
    new LocalStrategy(async (username, password, done) => {
      const user = await storage.getUserByUsername(username);
      if (!user || !(await comparePasswords(password, user.password))) {
        return done(null, false);
      } else {
        return done(null, user);
      }
    }),
  );

  passport.serializeUser((user, done) => done(null, user.id));
  passport.deserializeUser(async (id: number, done) => {
    const user = await storage.getUser(id);
    done(null, user);
  });

  app.post("/api/register", async (req, res, next) => {
    const existingUser = await storage.getUserByUsername(req.body.username);
    if (existingUser) {
      return res.status(400).json({ message: "Username already exists" });
    }

    const user = await storage.createUser({
      ...req.body,
      password: await hashPassword(req.body.password),
    });

    req.login(user, (err) => {
      if (err) return next(err);
      res.status(201).json(user);
    });
  });

  app.post("/api/login", passport.authenticate("local"), (req, res) => {
    res.status(200).json(req.user);
  });

  app.post("/api/logout", (req, res, next) => {
    req.logout((err) => {
      if (err) return next(err);
      res.sendStatus(200);
    });
  });

  app.get("/api/user", (req, res) => {
    if (!req.isAuthenticated()) return res.sendStatus(401);
    res.json(req.user);
  });
  
  app.patch("/api/user/onboarding", async (req, res) => {
    if (!req.isAuthenticated()) return res.sendStatus(401);
    
    const userId = req.user!.id;
    const { experienceLevel, interests, dailyGoal } = req.body;
    
    try {
      const updatedUser = await storage.updateUser(userId, {
        experienceLevel,
        interests,
        dailyGoal,
        onboarded: true
      });
      
      if (!updatedUser) {
        return res.status(404).json({ message: "User not found" });
      }
      
      res.status(200).json(updatedUser);
    } catch (error) {
      res.status(500).json({ message: "Failed to update onboarding information" });
    }
  });
}

================
File: server/db.ts
================
import { Pool, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import ws from "ws";
import * as schema from "@shared/schema";

neonConfig.webSocketConstructor = ws;

if (!process.env.DATABASE_URL) {
  throw new Error(
    "DATABASE_URL must be set. Did you forget to provision a database?",
  );
}

export const pool = new Pool({ connectionString: process.env.DATABASE_URL });
export const db = drizzle({ client: pool, schema });

================
File: server/index.ts
================
import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "…";
      }

      log(logLine);
    }
  });

  next();
});

(async () => {
  const server = await registerRoutes(app);

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";

    res.status(status).json({ message });
    throw err;
  });

  // importantly only setup vite in development and after
  // setting up all the other routes so the catch-all route
  // doesn't interfere with the other routes
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  // ALWAYS serve the app on port 3000
  // this serves both the API and the client.
  const port = 3000;
  server.listen(port, () => {
    log(`serving on port ${port}`);
  });
})();

================
File: server/routes.ts
================
import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { setupAuth } from "./auth";
export async function registerRoutes(app: Express): Promise<Server> {
  // Set up authentication routes
  setupAuth(app);

  // Get all stacks
  app.get("/api/stacks", async (req, res) => {
    const stacks = await storage.getStacks();
    res.json(stacks);
  });

  // Get stack by ID
  app.get("/api/stacks/:id", async (req, res) => {
    const stackId = parseInt(req.params.id);
    const stack = await storage.getStackById(stackId);
    
    if (!stack) {
      return res.status(404).json({ message: "Stack not found" });
    }
    
    res.json(stack);
  });

  // Get cards by stack ID
  app.get("/api/stacks/:id/cards", async (req, res) => {
    const stackId = parseInt(req.params.id);
    const cards = await storage.getCardsByStackId(stackId);
    res.json(cards);
  });

  // Protected routes - require authentication
  app.use("/api/user-progress", (req, res, next) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    next();
  });

  // Get user progress for all stacks
  app.get("/api/user-progress", async (req, res) => {
    const userId = req.user!.id;
    const progress = await storage.getUserProgressByUserId(userId);
    res.json(progress);
  });

  // Get user progress for a specific stack
  app.get("/api/user-progress/:stackId", async (req, res) => {
    const userId = req.user!.id;
    const stackId = parseInt(req.params.stackId);
    
    const progress = await storage.getUserProgressByStackId(userId, stackId);
    
    if (!progress) {
      // If no progress exists, create a new one
      const newProgress = await storage.createUserProgress({
        userId,
        stackId,
        completed: false,
        currentCardIndex: 0,
        earnedXp: 0,
        lastAccessed: new Date()
      });
      return res.json(newProgress);
    }
    
    res.json(progress);
  });

  // Update user progress for a stack
  app.patch("/api/user-progress/:stackId", async (req, res) => {
    const userId = req.user!.id;
    const stackId = parseInt(req.params.stackId);
    
    const { currentCardIndex, completed, earnedXp } = req.body;
    let progress = await storage.getUserProgressByStackId(userId, stackId);
    
    if (!progress) {
      // If no progress exists, create a new one
      progress = await storage.createUserProgress({
        userId,
        stackId,
        completed: completed || false,
        currentCardIndex: currentCardIndex || 0,
        earnedXp: earnedXp || 0,
        lastAccessed: new Date()
      });
    } else {
      // Update existing progress
      progress = await storage.updateUserProgress(progress.id, {
        currentCardIndex: currentCardIndex !== undefined ? currentCardIndex : progress.currentCardIndex,
        completed: completed !== undefined ? completed : progress.completed,
        earnedXp: earnedXp !== undefined ? earnedXp : progress.earnedXp,
        lastAccessed: new Date()
      });
    }
    
    // If a lesson was completed, update daily progress
    if (completed && !progress?.completed) {
      // Check if user has daily progress for today
      const today = new Date();
      let dailyProgress = await storage.getUserDailyProgress(userId, today);
      
      if (!dailyProgress) {
        // Create new daily progress
        dailyProgress = await storage.createUserDailyProgress({
          userId,
          date: today,
          lessonsCompleted: 1,
          xpEarned: earnedXp || 0,
          goalCompleted: false
        });
      } else {
        // Update existing daily progress
        const newLessonsCompleted = dailyProgress.lessonsCompleted + 1;
        const newXpEarned = dailyProgress.xpEarned + (earnedXp || 0);
        const newGoalCompleted = newLessonsCompleted >= req.user!.dailyGoal;
        
        dailyProgress = await storage.updateUserDailyProgress(dailyProgress.id, {
          lessonsCompleted: newLessonsCompleted,
          xpEarned: newXpEarned,
          goalCompleted: newGoalCompleted
        });
      }
      
      // Update user XP
      const user = await storage.updateUser(userId, {
        xp: req.user!.xp + (earnedXp || 0)
      });
      
      // Check if a badge should be awarded (for the tech rookie badge)
      if (stackId === 1) {
        const existingBadges = await storage.getUserBadges(userId);
        const hasTechRookie = existingBadges.some(b => b.badgeName === "Tech Rookie");
        
        if (!hasTechRookie) {
          await storage.createUserBadge({
            userId,
            badgeName: "Tech Rookie",
            badgeDescription: "Completed your first tech industry stack",
            iconName: "computer-line",
            earnedOn: new Date()
          });
        }
      }
    }
    
    res.json(progress);
  });

  // Get user badges
  app.get("/api/user-badges", async (req, res) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    const userId = req.user!.id;
    const badges = await storage.getUserBadges(userId);
    res.json(badges);
  });

  // Get user daily progress
  app.get("/api/user-daily-progress", async (req, res) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    const userId = req.user!.id;
    const today = new Date();
    let dailyProgress = await storage.getUserDailyProgress(userId, today);
    
    if (!dailyProgress) {
      dailyProgress = await storage.createUserDailyProgress({
        userId,
        date: today,
        lessonsCompleted: 0,
        xpEarned: 0,
        goalCompleted: false
      });
    }
    
    res.json(dailyProgress);
  });

  const httpServer = createServer(app);
  return httpServer;
}

================
File: server/storage.ts
================
import { users, stacks, cards, userProgress, userBadges, userDailyProgress } from "@shared/schema";
import type { User, InsertUser, Stack, Card, UserProgress, UserBadge, UserDailyProgress } from "@shared/schema";
import session from "express-session";
import createMemoryStore from "memorystore";

const MemoryStore = createMemoryStore(session);

// modify the interface with any CRUD methods
// you might need
export interface IStorage {
  // User methods
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  updateUser(id: number, userData: Partial<User>): Promise<User | undefined>;
  
  // Stack methods
  getStacks(): Promise<Stack[]>;
  getStackById(id: number): Promise<Stack | undefined>;
  createStack(stack: Omit<Stack, "id">): Promise<Stack>;
  
  // Card methods
  getCardsByStackId(stackId: number): Promise<Card[]>;
  getCardById(id: number): Promise<Card | undefined>;
  createCard(card: Omit<Card, "id">): Promise<Card>;
  
  // User progress methods
  getUserProgressByUserId(userId: number): Promise<UserProgress[]>;
  getUserProgressByStackId(userId: number, stackId: number): Promise<UserProgress | undefined>;
  createUserProgress(userProgress: Omit<UserProgress, "id">): Promise<UserProgress>;
  updateUserProgress(id: number, progressData: Partial<UserProgress>): Promise<UserProgress | undefined>;
  
  // Badge methods
  getUserBadges(userId: number): Promise<UserBadge[]>;
  createUserBadge(badge: Omit<UserBadge, "id">): Promise<UserBadge>;
  
  // Daily progress methods
  getUserDailyProgress(userId: number, date?: Date): Promise<UserDailyProgress | undefined>;
  createUserDailyProgress(dailyProgress: Omit<UserDailyProgress, "id">): Promise<UserDailyProgress>;
  updateUserDailyProgress(id: number, dailyProgressData: Partial<UserDailyProgress>): Promise<UserDailyProgress | undefined>;
  
  // Session store
  sessionStore: session.SessionStore;
}

export class MemStorage implements IStorage {
  private users: Map<number, User>;
  private stacks: Map<number, Stack>;
  private cards: Map<number, Card>;
  private userProgress: Map<number, UserProgress>;
  private userBadges: Map<number, UserBadge>;
  private userDailyProgress: Map<number, UserDailyProgress>;
  
  currentUserId: number;
  currentStackId: number;
  currentCardId: number;
  currentProgressId: number;
  currentBadgeId: number;
  currentDailyProgressId: number;
  
  sessionStore: session.SessionStore;

  constructor() {
    this.users = new Map();
    this.stacks = new Map();
    this.cards = new Map();
    this.userProgress = new Map();
    this.userBadges = new Map();
    this.userDailyProgress = new Map();
    
    this.currentUserId = 1;
    this.currentStackId = 1;
    this.currentCardId = 1;
    this.currentProgressId = 1;
    this.currentBadgeId = 1;
    this.currentDailyProgressId = 1;
    
    this.sessionStore = new MemoryStore({
      checkPeriod: 86400000, // One day in ms
    });
    
    // Initialize with sample stacks
    this.initSampleData();
  }

  private initSampleData() {
    // Tech Industry stack
    const techStack: Omit<Stack, "id"> = {
      title: "Tech Industry 101",
      description: "Learn the basics of tech financials",
      cardCount: 10,
      estimatedMinutes: 15,
      industry: "Technology",
      iconName: "computer-line",
      color: "from-primary-400 to-primary-600",
      difficulty: "beginner",
      rating: 48,
    };
    
    // Stock Investing stack
    const stockStack: Omit<Stack, "id"> = {
      title: "Stock Investing",
      description: "Master the fundamentals of stock market investing",
      cardCount: 10,
      estimatedMinutes: 15,
      industry: "Investing",
      iconName: "line-chart-line",
      color: "from-secondary-500 to-green-400",
      difficulty: "beginner",
      rating: 48,
    };
    
    // Real Estate stack
    const realEstateStack: Omit<Stack, "id"> = {
      title: "Real Estate",
      description: "Learn about real estate investment fundamentals",
      cardCount: 8,
      estimatedMinutes: 12,
      industry: "Real Estate",
      iconName: "building-line",
      color: "from-blue-500 to-blue-400",
      difficulty: "intermediate",
      rating: 46,
    };
    
    // Crypto Basics stack
    const cryptoStack: Omit<Stack, "id"> = {
      title: "Crypto Basics",
      description: "Understand cryptocurrency fundamentals",
      cardCount: 12,
      estimatedMinutes: 20,
      industry: "Cryptocurrency",
      iconName: "coins-line",
      color: "from-accent-500 to-yellow-400",
      difficulty: "beginner",
      rating: 47,
    };
    
    // Healthcare stack
    const healthcareStack: Omit<Stack, "id"> = {
      title: "Healthcare",
      description: "Financial aspects of the healthcare industry",
      cardCount: 9,
      estimatedMinutes: 14,
      industry: "Healthcare",
      iconName: "heart-pulse-line",
      color: "from-purple-500 to-purple-400",
      difficulty: "intermediate",
      rating: 45,
    };
    
    this.createStack(techStack);
    this.createStack(stockStack);
    this.createStack(realEstateStack);
    this.createStack(cryptoStack);
    this.createStack(healthcareStack);
    
    // Create some cards for the Tech stack
    this.createCard({
      stackId: 1,
      type: "info",
      title: "Revenue Models in Tech",
      subtitle: "Understanding how tech companies make money",
      content: {
        text: "Tech companies typically use one of these revenue models: E-commerce, Subscription, or Advertising.",
        models: [
          {
            icon: "shopping-cart-line",
            name: "E-commerce",
            description: "Direct sales of products through online platforms"
          },
          {
            icon: "calendar-check-line",
            name: "Subscription",
            description: "Recurring revenue from regular payments"
          },
          {
            icon: "advertisement-line",
            name: "Advertising",
            description: "Monetizing user attention through targeted ads"
          }
        ],
        funFact: "Companies with subscription models typically have 2-3x higher valuations than those with one-time purchases."
      },
      order: 1
    });
    
    this.createCard({
      stackId: 1,
      type: "data-viz",
      title: "Revenue Distribution",
      subtitle: "How tech giants generate their income",
      content: {
        companies: [
          {
            name: "Apple",
            revenue: "$366B (2021)",
            segments: [
              { name: "iPhone", percentage: 52, color: "bg-blue-500" },
              { name: "Mac", percentage: 11, color: "bg-green-500" },
              { name: "iPad", percentage: 9, color: "bg-purple-500" },
              { name: "Services", percentage: 21, color: "bg-yellow-500" },
              { name: "Wearables", percentage: 7, color: "bg-red-500" }
            ]
          },
          {
            name: "Google",
            revenue: "$258B (2021)",
            segments: [
              { name: "Advertising", percentage: 81, color: "bg-red-500" },
              { name: "Cloud", percentage: 11, color: "bg-blue-500" },
              { name: "Other", percentage: 8, color: "bg-green-500" }
            ]
          }
        ],
        insight: "Tech companies with diversified revenue streams are generally more resilient to market changes and economic downturns.",
        keyPoint: "Apple's services revenue (App Store, Apple Music, etc.) is growing at 2x the rate of their product revenue."
      },
      order: 2
    });
    
    this.createCard({
      stackId: 1,
      type: "quiz",
      title: "Quick Quiz",
      subtitle: "Test your knowledge on tech revenue models",
      content: {
        question: "Which revenue model is Google primarily known for?",
        options: [
          { text: "Advertising", value: "advertising", isCorrect: true },
          { text: "Subscription", value: "subscription", isCorrect: false },
          { text: "E-commerce", value: "ecommerce", isCorrect: false },
          { text: "Licensing", value: "licensing", isCorrect: false }
        ],
        correctFeedback: "Google makes over 80% of its revenue from online advertising.",
        incorrectFeedback: "Google's primary revenue comes from advertising, making up over 80% of its total income."
      },
      order: 3
    });
  }

  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(
      (user) => user.username === username,
    );
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.currentUserId++;
    const user: User = { 
      ...insertUser, 
      id,
      xp: 0,
      streakCount: 0,
      lastActive: new Date(),
      level: 1,
      dailyGoal: 3,
      interests: [],
      experienceLevel: "beginner",
      onboarded: false
    };
    this.users.set(id, user);
    return user;
  }
  
  async updateUser(id: number, userData: Partial<User>): Promise<User | undefined> {
    const user = await this.getUser(id);
    if (!user) return undefined;
    
    const updatedUser = { ...user, ...userData };
    this.users.set(id, updatedUser);
    return updatedUser;
  }
  
  async getStacks(): Promise<Stack[]> {
    return Array.from(this.stacks.values());
  }
  
  async getStackById(id: number): Promise<Stack | undefined> {
    return this.stacks.get(id);
  }
  
  async createStack(stack: Omit<Stack, "id">): Promise<Stack> {
    const id = this.currentStackId++;
    const newStack: Stack = { ...stack, id };
    this.stacks.set(id, newStack);
    return newStack;
  }
  
  async getCardsByStackId(stackId: number): Promise<Card[]> {
    return Array.from(this.cards.values())
      .filter(card => card.stackId === stackId)
      .sort((a, b) => a.order - b.order);
  }
  
  async getCardById(id: number): Promise<Card | undefined> {
    return this.cards.get(id);
  }
  
  async createCard(card: Omit<Card, "id">): Promise<Card> {
    const id = this.currentCardId++;
    const newCard: Card = { ...card, id };
    this.cards.set(id, newCard);
    return newCard;
  }
  
  async getUserProgressByUserId(userId: number): Promise<UserProgress[]> {
    return Array.from(this.userProgress.values())
      .filter(progress => progress.userId === userId);
  }
  
  async getUserProgressByStackId(userId: number, stackId: number): Promise<UserProgress | undefined> {
    return Array.from(this.userProgress.values())
      .find(progress => progress.userId === userId && progress.stackId === stackId);
  }
  
  async createUserProgress(userProgress: Omit<UserProgress, "id">): Promise<UserProgress> {
    const id = this.currentProgressId++;
    const newProgress: UserProgress = { ...userProgress, id };
    this.userProgress.set(id, newProgress);
    return newProgress;
  }
  
  async updateUserProgress(id: number, progressData: Partial<UserProgress>): Promise<UserProgress | undefined> {
    const progress = this.userProgress.get(id);
    if (!progress) return undefined;
    
    const updatedProgress = { ...progress, ...progressData };
    this.userProgress.set(id, updatedProgress);
    return updatedProgress;
  }
  
  async getUserBadges(userId: number): Promise<UserBadge[]> {
    return Array.from(this.userBadges.values())
      .filter(badge => badge.userId === userId);
  }
  
  async createUserBadge(badge: Omit<UserBadge, "id">): Promise<UserBadge> {
    const id = this.currentBadgeId++;
    const newBadge: UserBadge = { ...badge, id };
    this.userBadges.set(id, newBadge);
    return newBadge;
  }
  
  async getUserDailyProgress(userId: number, date?: Date): Promise<UserDailyProgress | undefined> {
    const today = date || new Date();
    const todayString = today.toISOString().split('T')[0];
    
    return Array.from(this.userDailyProgress.values())
      .find(progress => {
        const progressDate = progress.date.toISOString().split('T')[0];
        return progress.userId === userId && progressDate === todayString;
      });
  }
  
  async createUserDailyProgress(dailyProgress: Omit<UserDailyProgress, "id">): Promise<UserDailyProgress> {
    const id = this.currentDailyProgressId++;
    const newDailyProgress: UserDailyProgress = { ...dailyProgress, id };
    this.userDailyProgress.set(id, newDailyProgress);
    return newDailyProgress;
  }
  
  async updateUserDailyProgress(id: number, dailyProgressData: Partial<UserDailyProgress>): Promise<UserDailyProgress | undefined> {
    const dailyProgress = this.userDailyProgress.get(id);
    if (!dailyProgress) return undefined;
    
    const updatedDailyProgress = { ...dailyProgress, ...dailyProgressData };
    this.userDailyProgress.set(id, updatedDailyProgress);
    return updatedDailyProgress;
  }
}

export const storage = new MemStorage();

================
File: server/vite.ts
================
import express, { type Express } from "express";
import fs from "fs";
import path, { dirname } from "path";
import { fileURLToPath } from "url";
import { createServer as createViteServer, createLogger } from "vite";
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
import { type Server } from "http";
import viteConfig from "../vite.config";
import { nanoid } from "nanoid";

const viteLogger = createLogger();

export function log(message: string, source = "express") {
  const formattedTime = new Date().toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true,
  });

  console.log(`${formattedTime} [${source}] ${message}`);
}

export async function setupVite(app: Express, server: Server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true,
  };

  const vite = await createViteServer({
    ...viteConfig,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      },
    },
    server: serverOptions,
    appType: "custom",
  });

  app.use(vite.middlewares);
  app.use("*", async (req, res, next) => {
    const url = req.originalUrl;

    try {
      const clientTemplate = path.resolve(
        __dirname,
        "..",
        "client",
        "index.html",
      );

      // always reload the index.html file from disk incase it changes
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`,
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e as Error);
      next(e);
    }
  });
}

export function serveStatic(app: Express) {
  const distPath = path.resolve(__dirname, "public");

  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`,
    );
  }

  app.use(express.static(distPath));

  // fall through to index.html if the file doesn't exist
  app.use("*", (_req, res) => {
    res.sendFile(path.resolve(distPath, "index.html"));
  });
}

================
File: shared/schema.ts
================
import { pgTable, text, serial, integer, boolean, jsonb, timestamp } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  displayName: text("display_name").notNull(),
  xp: integer("xp").notNull().default(0),
  streakCount: integer("streak_count").notNull().default(0),
  lastActive: timestamp("last_active").notNull().default(new Date()),
  level: integer("level").notNull().default(1),
  dailyGoal: integer("daily_goal").notNull().default(3),
  interests: text("interests").array().notNull().default([]),
  experienceLevel: text("experience_level").notNull().default("beginner"),
  onboarded: boolean("onboarded").notNull().default(false)
});

export const stacks = pgTable("stacks", {
  id: serial("id").primaryKey(),
  title: text("title").notNull(),
  description: text("description").notNull(),
  cardCount: integer("card_count").notNull(),
  estimatedMinutes: integer("estimated_minutes").notNull(),
  industry: text("industry").notNull(),
  iconName: text("icon_name").notNull(),
  color: text("color").notNull(),
  difficulty: text("difficulty").notNull(), // beginner, intermediate, advanced
  rating: integer("rating").notNull().default(0),
});

export const cards = pgTable("cards", {
  id: serial("id").primaryKey(),
  stackId: integer("stack_id").notNull(),
  type: text("type").notNull(), // info, quiz, data-viz
  title: text("title").notNull(),
  subtitle: text("subtitle"),
  content: jsonb("content").notNull(), // Stores the card content in JSON format
  order: integer("order").notNull(),
});

export const userProgress = pgTable("user_progress", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  stackId: integer("stack_id").notNull(),
  completed: boolean("completed").notNull().default(false),
  currentCardIndex: integer("current_card_index").notNull().default(0),
  earnedXp: integer("earned_xp").notNull().default(0),
  lastAccessed: timestamp("last_accessed"),
});

export const userBadges = pgTable("user_badges", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  badgeName: text("badge_name").notNull(),
  earnedOn: timestamp("earned_on").notNull().default(new Date()),
  badgeDescription: text("badge_description").notNull(),
  iconName: text("icon_name").notNull(),
});

export const userDailyProgress = pgTable("user_daily_progress", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  date: timestamp("date").notNull().default(new Date()),
  lessonsCompleted: integer("lessons_completed").notNull().default(0),
  xpEarned: integer("xp_earned").notNull().default(0),
  goalCompleted: boolean("goal_completed").notNull().default(false),
});

// Insert schemas
export const insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true,
  displayName: true,
}).extend({
  password: z.string().min(6, "Password must be at least 6 characters")
});

export const insertStackSchema = createInsertSchema(stacks).omit({
  id: true,
});

export const insertCardSchema = createInsertSchema(cards).omit({
  id: true,
});

export const insertUserProgressSchema = createInsertSchema(userProgress).omit({
  id: true,
});

export const insertUserBadgeSchema = createInsertSchema(userBadges).omit({
  id: true,
});

export const insertUserDailyProgressSchema = createInsertSchema(userDailyProgress).omit({
  id: true,
});

// Types
export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;
export type Stack = typeof stacks.$inferSelect;
export type Card = typeof cards.$inferSelect;
export type UserProgress = typeof userProgress.$inferSelect;
export type UserBadge = typeof userBadges.$inferSelect;
export type UserDailyProgress = typeof userDailyProgress.$inferSelect;

================
File: .gitattributes
================
# Auto detect text files and perform LF normalization
* text=auto

================
File: .gitignore
================
# Dependencies
node_modules/
/.pnp
.pnp.js

# Testing
/coverage

# Production
/build
/dist

# Misc
.DS_Store
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Editor directories and files
.idea/
.vscode/
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# TypeScript
*.tsbuildinfo

server/public
vite.config.ts.*
*.tar.gz

================
File: .replit
================
modules = ["nodejs-20", "bash", "web"]
run = "npm run dev"
hidden = [".config", ".git", "generated-icon.png", "node_modules", "dist"]

[nix]
channel = "stable-24_05"

[deployment]
deploymentTarget = "autoscale"
run = ["npm", "run", "start"]
build = ["npm", "run", "build"]

[[ports]]
localPort = 5000
externalPort = 80

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Start application"

[[workflows.workflow]]
name = "Start application"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npm run dev"
waitForPort = 5000

================
File: app.json
================
{
  "expo": {
    "name": "Swipefolio",
    "slug": "swipefolio",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./generated-icon.png",
    "splash": {
      "image": "./generated-icon.png",
      "resizeMode": "contain",
      "backgroundColor": "#000000"
    },
    "updates": {
      "fallbackToCacheTimeout": 0
    },
    "assetBundlePatterns": [
      "**/*"
    ],
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.swipefolio.app"
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./generated-icon.png",
        "backgroundColor": "#000000"
      },
      "package": "com.swipefolio.app"
    },
    "web": {
      "favicon": "./generated-icon.png"
    },
    "extra": {
      "eas": {
        "projectId": "swipefolio"
      }
    }
  }
}

================
File: category-scoring.ts
================
// Calculate category scores based on metric values
export function calculateCategoryScore(metricName: string, metrics: any, industryAvgs: any): {
  score: number;  // Average score between 0-2
  rating: string; // "Good", "Average", "Poor"
  color: string;  // "green", "yellow", "red"
} {
  let metricScores: number[] = [];
  let totalScore = 0;
  
  switch (metricName) {
    case 'performance': {
      // Revenue Growth Score
      if (metrics.revenueGrowth > industryAvgs.revenueGrowth * 1.1) {
        metricScores.push(2); // Good
      } else if (metrics.revenueGrowth < industryAvgs.revenueGrowth * 0.9) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // Profit Margin Score
      if (metrics.profitMargin > industryAvgs.profitMargin * 1.1) {
        metricScores.push(2); // Good
      } else if (metrics.profitMargin < industryAvgs.profitMargin * 0.9) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // Return on Capital Score
      if (metrics.returnOnCapital > industryAvgs.returnOnCapital * 1.1) {
        metricScores.push(2); // Good
      } else if (metrics.returnOnCapital < industryAvgs.returnOnCapital * 0.9) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      break;
    }
    
    case 'stability': {
      // Volatility Score (lower is better)
      if (metrics.volatility < industryAvgs.volatility * 0.9) {
        metricScores.push(2); // Good
      } else if (metrics.volatility > industryAvgs.volatility * 1.1) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // Beta Score (closer to 1 is better)
      const betaDiff = Math.abs(metrics.beta - 1);
      const avgBetaDiff = Math.abs(industryAvgs.beta - 1);
      if (betaDiff < avgBetaDiff * 0.9) {
        metricScores.push(2); // Good
      } else if (betaDiff > avgBetaDiff * 1.1) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // Dividend Consistency Score
      if (metrics.dividendConsistency === "High") {
        metricScores.push(2); // Good
      } else if (metrics.dividendConsistency === "Medium") {
        metricScores.push(1); // Average
      } else {
        metricScores.push(0); // Poor (Low or N/A)
      }
      break;
    }
    
    case 'value': {
      // PE Ratio Score (lower is better)
      if (metrics.peRatio < industryAvgs.peRatio * 0.9) {
        metricScores.push(2); // Good
      } else if (metrics.peRatio > industryAvgs.peRatio * 1.1) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // PB Ratio Score (lower is better)
      if (metrics.pbRatio < industryAvgs.pbRatio * 0.9) {
        metricScores.push(2); // Good
      } else if (metrics.pbRatio > industryAvgs.pbRatio * 1.1) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // Dividend Yield Score (higher is better)
      if (metrics.dividendYield > industryAvgs.dividendYield * 1.1) {
        metricScores.push(2); // Good
      } else if (metrics.dividendYield < industryAvgs.dividendYield * 0.9) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      break;
    }
    
    case 'momentum': {
      // Three Month Return Score
      if (metrics.threeMonthReturn > industryAvgs.threeMonthReturn * 1.1) {
        metricScores.push(2); // Good
      } else if (metrics.threeMonthReturn < industryAvgs.threeMonthReturn * 0.9) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // Relative Performance Score
      if (metrics.relativePerformance > industryAvgs.relativePerformance * 1.1) {
        metricScores.push(2); // Good
      } else if (metrics.relativePerformance < industryAvgs.relativePerformance * 0.9) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      
      // RSI Score (optimal range 50-70)
      if (metrics.rsi >= 50 && metrics.rsi <= 70) {
        metricScores.push(2); // Good
      } else if (metrics.rsi < 40 || metrics.rsi > 75) {
        metricScores.push(0); // Poor
      } else {
        metricScores.push(1); // Average
      }
      break;
    }
    
    default:
      // Default to all average if unknown metric type
      metricScores = [1, 1, 1];
  }
  
  // Calculate average score
  const avgScore = metricScores.reduce((sum, score) => sum + score, 0) / metricScores.length;
  
  // Determine rating based on average score
  let rating: string;
  let color: string;
  
  if (avgScore >= 1.6) {
    rating = "Good";
    color = "green";
  } else if (avgScore >= 0.8) {
    rating = "Average";
    color = "yellow";
  } else {
    rating = "Poor";
    color = "red";
  }
  
  return {
    score: avgScore,
    rating,
    color
  };
}

// Get comparison status (better, similar, worse)
export function getComparisonStatus(value: number | string, industry: number | string, 
                                   isLowerBetter: boolean = false): "green" | "yellow" | "red" {
  // Handle string values
  if (typeof value === 'string' || typeof industry === 'string') {
    return "yellow"; // Default to neutral for string comparisons
  }
  
  // Handle numeric values
  if (isLowerBetter) {
    // For metrics where lower is better (like volatility, PE ratio)
    if (value < industry * 0.9) return "green";
    if (value > industry * 1.1) return "red";
    return "yellow";
  } else {
    // For metrics where higher is better (like revenue growth)
    if (value > industry * 1.1) return "green";
    if (value < industry * 0.9) return "red";
    return "yellow";
  }
}

// Get comparison symbol
export function getComparisonSymbol(value: number | string, industry: number | string, 
                                   isLowerBetter: boolean = false): "<" | "=" | ">" {
  // Handle string values
  if (typeof value === 'string' || typeof industry === 'string') {
    return "="; // Default for string comparisons
  }
  
  // Handle numeric values with 5% threshold for equality
  const ratio = value / industry;
  
  if (isLowerBetter) {
    // For metrics where lower is better
    if (ratio < 0.95) return "<"; // Value is less than industry (good)
    if (ratio > 1.05) return ">"; // Value is greater than industry (bad)
    return "="; // Approximately equal
  } else {
    // For metrics where higher is better
    if (ratio > 1.05) return ">"; // Value is greater than industry (good)
    if (ratio < 0.95) return "<"; // Value is less than industry (bad)
    return "="; // Approximately equal
  }
}

================
File: drizzle.config.ts
================
import { defineConfig } from "drizzle-kit";

if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL, ensure the database is provisioned");
}

export default defineConfig({
  out: "./migrations",
  schema: "./shared/schema.ts",
  dialect: "postgresql",
  dbCredentials: {
    url: process.env.DATABASE_URL,
  },
});

================
File: fixed-real-estate.txt
================
"Real Estate": [
    {
      name: "Prologis",
      ticker: "PLD",
      price: 110.26,
      change: 0.8,
      rating: 7.2,
      description: "A leading global owner, operator and developer of logistics real estate.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 8.5,
            profitMargin: 39.2,
            returnOnCapital: 4.7
          },
          explanation: "Strong revenue growth exceeding industry average with excellent profit margins. Returns on capital are solid and slightly above the REIT industry benchmark."
        },
        stability: {
          value: "Good",
          color: "green",
          details: {
            volatility: 1.4,
            beta: 0.93,
            dividendConsistency: "High"
          },
          explanation: "Below average volatility and beta indicate less market sensitivity than peers. Strong history of consistent dividend increases even during economic downturns."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 25.6,
            pbRatio: 2.1,
            dividendYield: "2.8%"
          },
          explanation: "Trading at a modest premium to earnings and book value compared to REIT averages. Dividend yield is slightly below sector average but offset by better growth profile."
        },
        momentum: {
          value: "Average",
          color: "yellow",
          details: {
            threeMonthReturn: 5.2,
            relativePerformance: -0.5,
            rsi: 52.5
          },
          explanation: "Solid recent price performance with minimal underperformance versus peers. Neutral RSI suggests balanced buying and selling pressure."
        }
      },
      synopsis: {
        price: "Trading at 110.26, reflecting modest recent gains despite market volatility.",
        company: "Global leader in logistics real estate with significant e-commerce exposure.",
        role: "Core holding for real estate allocation with balance of growth and income."
      },
      overallAnalysis: "A high-quality logistics REIT benefiting from e-commerce growth with strong performance and stability. Offers a balanced opportunity with above-average growth, defensive characteristics, and reliable income.",
      chartData: [96, 101, 97, 104, 108, 96, 98, 103, 107, 109, 110.26],
      industry: "Real Estate"
    },
    {
      name: "Realty Income Corp",
      ticker: "O",
      price: 56.28,
      change: -0.4,
      rating: 6.8,
      description: "A monthly dividend paying REIT focused on single-tenant commercial properties.",
      metrics: {
        performance: {
          value: "Average",
          color: "yellow",
          details: {
            revenueGrowth: 29.5,
            profitMargin: 16.0,
            returnOnCapital: 1.3
          },
          explanation: "Strong revenue growth driven by acquisitions, but below-average profit margins and returns on capital compared to peers. Scale benefits are partially offset by efficiency challenges."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.0,
            beta: 0.82,
            dividendConsistency: "Good"
          },
          explanation: "Below-average volatility and beta indicate more stability than most REITs. Exceptional dividend consistency with a track record of regular monthly increases makes this a reliable income generator."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 57.6,
            pbRatio: 1.29,
            dividendYield: "5.7%"
          },
          explanation: "High P/E ratio is partially offset by reasonable price-to-book value. Above-average dividend yield makes this attractive for income-focused investors despite the premium valuation multiple."
        },
        momentum: {
          value: "Average",
          color: "yellow",
          details: {
            threeMonthReturn: 6.6,
            relativePerformance: -1.5,
            rsi: 49.3
          },
          explanation: "Solid absolute price performance with moderate underperformance versus peers. Neutral RSI suggests balanced buying and selling pressure currently."
        }
      },
      synopsis: {
        price: "Trading at 56.28 with slight recent weakness despite attractive yield.",
        company: "Premier monthly dividend REIT with diverse commercial property portfolio.",
        role: "Income cornerstone for dividend-focused investors seeking reliability."
      },
      overallAnalysis: "Monthly dividend payer offering unmatched income reliability with triple-net leases that create highly predictable cash flows. Ideal for income-focused investors prioritizing consistent payments over maximum growth.",
      chartData: [52, 54, 51, 54, 58, 56, 55, 57, 58, 56, 56.28],
      industry: "Real Estate"
    },
    {
      name: "Simon Property Group",
      ticker: "SPG",
      price: 166.12,
      change: 1.2,
      rating: 6.5,
      description: "The largest owner and operator of shopping malls and premium outlets in the US.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 5.4,
            profitMargin: 41.9,
            returnOnCapital: 9.97
          },
          explanation: "Solid revenue growth considering retail headwinds, with exceptional profit margins and capital returns. Management effectively maximizes value from premium retail properties despite e-commerce challenges."
        },
        stability: {
          value: "Poor",
          color: "red",
          details: {
            volatility: 2.6,
            beta: 1.49,
            dividendConsistency: "Poor"
          },
          explanation: "Higher volatility and beta reflect increased sensitivity to economic cycles compared to other REITs. Past dividend cuts during market stress periods indicate less reliability for income investors."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 22,
            pbRatio: 18.68,
            dividendYield: "5.1%"
          },
          explanation: "Reasonable P/E ratio combined with a high price-to-book value shows market confidence but potential overvaluation of assets. Above-average dividend yield provides compelling income."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -3.1,
            relativePerformance: -11,
            rsi: 41.9
          },
          explanation: "Recent price weakness both on absolute basis and relative to peers. Moderately low RSI suggests some selling pressure but approaching levels that might attract contrarian investors."
        }
      },
      synopsis: {
        price: "Trading at 166.12 with some recent strength despite longer-term underperformance.",
        company: "Dominant mall operator with premium locations and evolving business model.",
        role: "Value opportunity in retail real estate with above-average income potential."
      },
      overallAnalysis: "Premium mall operator offering high income yield and value despite retail headwinds. Has shown resilience by transforming properties to maintain relevance in the evolving retail landscape.",
      chartData: [158, 162, 155, 159, 163, 155, 157, 162, 167, 164, 166.12],
      industry: "Real Estate"
    }
  ]

================
File: LICENSE
================
MIT License

Copyright (c) 2024 SwipePortfolio

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: new-real-estate.txt
================
"Real Estate": [
    {
      name: "Prologis",
      ticker: "PLD",
      price: 110.26,
      change: 0.8,
      rating: 3.6,
      smartScore: "Average",
      description: "Prologis is a global leader in logistics real estate with a focus on high-barrier, high-growth markets.",
      metrics: {
        performance: { 
          value: "Average", 
          color: "yellow",
          details: {
            revenueGrowth: 2.2,
            profitMargin: 45.4,
            returnOnCapital: 4.3
          },
          explanation: "Prologis shows moderate performance with 2.2% revenue growth, below the logistics REIT average. Its strong profit margin of 45.4% and solid return on capital of 4.3% reflect the stable income from its high-quality logistics property portfolio."
        },
        stability: { 
          value: "Poor", 
          color: "red",
          details: {
            volatility: 2.5,
            beta: 1.24,
            dividendConsistency: "Medium"
          },
          explanation: "Prologis exhibits higher volatility (2.5%) than the REIT sector average. Its beta of 1.24 indicates higher market sensitivity. The company maintains medium dividend consistency, with a history of dividend adjustments based on market conditions."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 28.0,
            pbRatio: 1.9,
            dividendYield: 3.7
          },
          explanation: "Prologis trades at a PE ratio of 28.0, typical for premium logistics REITs. Its price-to-book ratio of 1.9 is reasonable given its high-quality assets. The 3.7% dividend yield offers moderate income potential."
        },
        momentum: { 
          value: "Average", 
          color: "yellow",
          details: {
            threeMonthReturn: 6.1,
            relativePerformance: -2.0,
            rsi: 37.4
          },
          explanation: "Prologis shows moderate momentum with a positive three-month return of 6.1%, slightly underperforming the broader market. Its relative performance of -2.0% indicates slight underperformance versus peers. With an RSI of 37.4, the stock is approaching oversold territory."
        }
      },
      synopsis: {
        price: "Trading at a reasonable valuation given its high-quality logistics portfolio",
        company: "Prologis benefits from e-commerce growth and supply chain reconfiguration trends",
        role: "Core holding for real estate exposure with growth potential from logistics trends"
      },
      overallAnalysis: "A high-quality logistics REIT benefiting from e-commerce growth and supply chain transformation. Strong operational metrics and strategic locations in key markets provide resilience and long-term growth potential despite near-term interest rate pressures.",
      chartData: [104.5, 105.8, 106.2, 107.5, 108.3, 109.0, 109.4, 109.8, 110.0, 110.1, 110.2, 110.26],
      industry: "Real Estate"
    },
    {
      name: "Realty Income Corp",
      ticker: "O",
      price: 56.28,
      change: 1.29,
      rating: 4.0,
      smartScore: "Good",
      description: "Realty Income is a triple-net lease REIT focusing on high-quality, freestanding commercial properties with long-term leases.",
      metrics: {
        performance: { 
          value: "Average", 
          color: "yellow",
          details: {
            revenueGrowth: 5.7,
            profitMargin: 29.5,
            returnOnCapital: 1.30
          },
          explanation: "Realty Income shows solid performance with 5.7% revenue growth, slightly above the real estate industry average of 5.0%. Its profit margin of 29.5% and return on capital of 1.3% reflect stable operations from its portfolio of triple-net lease properties with high-quality tenants."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.0,
            beta: 0.82,
            dividendConsistency: "Good"
          },
          explanation: "Realty Income exhibits good stability with low volatility (2.0%) compared to the real estate sector average. Its beta of 0.82 indicates reduced market sensitivity. The company maintains exceptional dividend consistency as a 'Dividend Aristocrat', providing reliable monthly income for investors."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 57.6,
            pbRatio: 1.29,
            dividendYield: 5.7
          },
          explanation: "Realty Income has a higher PE ratio of 57.6, reflecting investor premium for its reliability. Its price-to-book ratio of 1.29 suggests reasonable value, while its generous 5.7% dividend yield significantly exceeds the sector's average, offering substantial income potential."
        },
        momentum: { 
          value: "Average", 
          color: "yellow",
          details: {
            threeMonthReturn: 6.6,
            relativePerformance: -1.5,
            rsi: 49.3
          },
          explanation: "Realty Income shows moderate momentum with a three-month return of 6.6%, slightly underperforming the broader market. Its relative performance of -1.5% indicates slight underperformance versus peers. With an RSI of 49.3, the stock is in balanced territory, suggesting stable trading patterns."
        }
      },
      synopsis: {
        price: "Trading steadily as investors value its reliable monthly dividend",
        company: "Realty Income continues to expand its portfolio with high-quality tenants and long-term leases",
        role: "Core income holding for real estate portfolio with consistent monthly dividends"
      },
      overallAnalysis: "A high-quality net lease REIT known as the 'Monthly Dividend Company'. Strong tenant quality, long-term lease structure, and consistent dividend growth make it an excellent choice for income-focused investors seeking stability.",
      chartData: [54.85, 55.10, 55.42, 55.65, 55.92, 56.15, 55.98, 56.05, 56.12, 56.20, 56.25, 56.28],
      industry: "Real Estate"
    },
    {
      name: "Simon Property Group",
      ticker: "SPG",
      price: 166.12,
      change: 0.55,
      rating: 3.2,
      smartScore: "Average",
      description: "Simon Property Group is a retail REIT specializing in premium shopping, dining, and entertainment destinations.",
      metrics: {
        performance: { 
          value: "Good", 
          color: "green",
          details: {
            revenueGrowth: 5.1,
            profitMargin: 41.9,
            returnOnCapital: 9.97
          },
          explanation: "Simon Property Group shows good performance with 5.1% revenue growth, in line with the retail REIT average. Its strong profit margin of 41.9% and excellent return on capital of 9.97% reflect operational efficiency despite challenges in the retail property sector."
        },
        stability: { 
          value: "Poor", 
          color: "red",
          details: {
            volatility: 2.6,
            beta: 1.49,
            dividendConsistency: "Poor"
          },
          explanation: "Simon Property Group exhibits higher volatility (2.6%) than the real estate industry average. Its beta of 1.49 indicates higher market sensitivity than peers. Poor dividend consistency reflects historical dividend adjustments during retail sector disruptions."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 22.0,
            pbRatio: 18.68,
            dividendYield: 5.1
          },
          explanation: "Simon Property Group trades at a PE ratio of 22.0, in line with the retail REIT average. The price-to-book ratio of 18.68 is significantly above industry averages, reflecting premium property locations. Its attractive 5.1% dividend yield provides substantial income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -3.1,
            relativePerformance: -11.0,
            rsi: 41.9
          },
          explanation: "Simon Property Group shows weak momentum with a negative three-month return of -3.1%, underperforming the broader market. Its relative performance of -11.0% indicates significant underperformance versus peers. With an RSI of 41.9, the stock is approaching oversold territory."
        }
      },
      synopsis: {
        price: "Under pressure as retail sector faces ongoing challenges",
        company: "Simon Property Group continues transforming its premium mall portfolio to adapt to changing consumer behavior",
        role: "Higher-risk opportunity in retail real estate with attractive dividend yield"
      },
      overallAnalysis: "A major retail REIT facing challenges in an evolving retail landscape. While offering an attractive dividend yield, investment comes with higher volatility and uncertainty as the company navigates the continuing transformation of physical retail.",
      chartData: [169.5, 168.8, 168.2, 167.6, 166.9, 166.5, 166.2, 166.0, 165.8, 166.0, 166.08, 166.12],
      industry: "Real Estate"
    },
    {
      name: "AvalonBay Communities",
      ticker: "AVB",
      price: 214.36,
      change: 0.82,
      rating: 4.1,
      smartScore: "Good",
      description: "AvalonBay Communities is a residential REIT specializing in high-quality apartment communities in leading metropolitan areas.",
      metrics: {
        performance: { 
          value: "Good", 
          color: "green",
          details: {
            revenueGrowth: 4.9,
            profitMargin: 36.5,
            returnOnCapital: 5.6
          },
          explanation: "AvalonBay shows strong performance with 4.9% revenue growth, in line with residential REIT averages. Its profit margin of 36.5% and return on capital of 5.6% reflect efficient management of its apartment portfolio across premium markets."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.0,
            beta: 0.89,
            dividendConsistency: "Good"
          },
          explanation: "AvalonBay exhibits moderate stability with volatility (2.0%) close to the residential REIT average. Its beta of 0.89 indicates slightly reduced market sensitivity. The company maintains high dividend consistency, with a strong history of dividend growth."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 28.2,
            pbRatio: 2.55,
            dividendYield: 3.3
          },
          explanation: "AvalonBay trades at a PE ratio of 28.2, slightly above the residential REIT average. Its price-to-book ratio of 2.55 is typical for high-quality apartment REITs, while its 3.3% dividend yield provides moderate income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -2.4,
            relativePerformance: -10.0,
            rsi: 47.8
          },
          explanation: "AvalonBay shows weak momentum with a negative three-month return of -2.4%, underperforming the broader market. Its relative performance of -10.0% indicates significant underperformance versus peers. With an RSI of 47.8, the stock is in neutral territory."
        }
      },
      synopsis: {
        price: "Stable with moderate growth as rental demand remains strong in key markets",
        company: "AvalonBay benefits from urban migration trends and limited housing supply in coastal markets",
        role: "Quality holding for residential real estate exposure with consistent dividend growth"
      },
      overallAnalysis: "A high-quality apartment REIT with properties in premium coastal markets. Strong operational metrics and favorable demographics in its target markets provide resilience and long-term growth potential despite near-term interest rate pressures.",
      chartData: [210.5, 211.2, 212.0, 212.5, 213.1, 213.5, 213.8, 214.0, 214.2, 214.25, 214.3, 214.36],
      industry: "Real Estate"
    },
    {
      name: "Public Storage",
      ticker: "PSA",
      price: 294.93,
      change: 1.25,
      rating: 4.2,
      smartScore: "Good",
      description: "Public Storage is the largest self-storage REIT in the United States with over 2,800 facilities nationwide.",
      metrics: {
        performance: { 
          value: "Good", 
          color: "green",
          details: {
            revenueGrowth: 3.9,
            profitMargin: 39.9,
            returnOnCapital: 10.2
          },
          explanation: "Public Storage shows solid performance with 3.9% revenue growth, slightly below the self-storage REIT average. Its strong profit margin of 39.9% and excellent return on capital of 10.2% reflect the operational efficiency of its vast self-storage portfolio."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.6,
            beta: 0.8,
            dividendConsistency: "Good"
          },
          explanation: "Public Storage exhibits moderate stability with volatility (2.6%) typical for the storage REIT sector. Its beta of 0.8 indicates reduced market sensitivity. The company maintains high dividend consistency with a long track record of reliable distributions."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 27.7,
            pbRatio: 9.65,
            dividendYield: 4.2
          },
          explanation: "Public Storage trades at a PE ratio of 27.7, typical for premium self-storage REITs. Its price-to-book ratio of 9.65 is significantly above average, reflecting the high-quality nature of its assets and dominant market position. The 4.2% dividend yield offers attractive income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -1.7,
            relativePerformance: -9.7,
            rsi: 43.5
          },
          explanation: "Public Storage shows weak momentum with a negative three-month return of -1.7%, underperforming the broader market. Its relative performance of -9.7% indicates significant underperformance versus peers. With an RSI of 43.5, the stock is approaching oversold territory."
        }
      },
      synopsis: {
        price: "Trading steadily with strong fundamentals despite recent industry slowdown",
        company: "Public Storage's dominant market position and scale provide competitive advantages in the self-storage space",
        role: "Core holding for real estate portfolio with defensive characteristics and reliable income"
      },
      overallAnalysis: "A blue-chip storage REIT with industry-leading scale and operational efficiency. Strong balance sheet, brand recognition, and technological investments position it well for long-term growth despite near-term normalization in the storage market.",
      chartData: [290.2, 291.5, 292.3, 293.1, 293.5, 293.8, 294.0, 294.3, 294.5, 294.7, 294.85, 294.93],
      industry: "Real Estate"
    },
    {
      name: "Digital Realty Trust",
      ticker: "DLR",
      price: 155.49,
      change: 0.88,
      rating: 4.0,
      smartScore: "Average",
      description: "Digital Realty Trust is a global provider of data center and colocation solutions for technology companies and enterprises.",
      metrics: {
        performance: { 
          value: "Poor", 
          color: "red",
          details: {
            revenueGrowth: 1.4,
            profitMargin: 10.1,
            returnOnCapital: 1.43
          },
          explanation: "Digital Realty shows moderate performance with 1.4% revenue growth, below the data center REIT average. Its profit margin of 10.1% and return on capital of 1.43% reflect ongoing investments in expansion and development of new facilities."
        },
        stability: { 
          value: "Poor", 
          color: "red",
          details: {
            volatility: 3.1,
            beta: 0.92,
            dividendConsistency: "Good"
          },
          explanation: "Digital Realty exhibits higher volatility (3.1%) than the data center REIT average. Its beta of 0.92 indicates slightly reduced market sensitivity. The company maintains high dividend consistency with a strong history of dividend increases."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 95.6,
            pbRatio: 2.54,
            dividendYield: 3.2
          },
          explanation: "Digital Realty trades at a high PE ratio of 95.6, reflecting significant investment in future growth. Its price-to-book ratio of 2.54 is reasonable for data center REITs, while its 3.2% dividend yield provides moderate income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -12.1,
            relativePerformance: -20.0,
            rsi: 50.1
          },
          explanation: "Digital Realty shows weak momentum with a significant negative three-month return of -12.1%, substantially underperforming the broader market. Its relative performance of -20.0% indicates major underperformance versus peers. With an RSI of 50.1, the stock is in neutral territory despite recent weakness."
        }
      },
      synopsis: {
        price: "Under pressure as AI demand balances against higher interest rate concerns",
        company: "Digital Realty's global data center footprint positions it well for cloud computing and AI growth",
        role: "Strategic holding for technology exposure through real estate with dividend income"
      },
      overallAnalysis: "A leading global data center REIT well-positioned for cloud computing and AI infrastructure growth. Despite near-term interest rate pressures, long-term secular trends in digital transformation and data consumption support future demand for its facilities.",
      chartData: [161.5, 160.2, 159.0, 157.8, 156.5, 155.8, 155.3, 155.0, 154.8, 155.1, 155.3, 155.49],
      industry: "Real Estate"
    },
    {
      name: "American Tower Corp",
      ticker: "AMT",
      price: 212.80,
      change: 1.45,
      rating: 4.1,
      smartScore: "Good",
      description: "American Tower Corp is a global REIT that owns, operates, and develops communications real estate with a portfolio of over 220,000 sites worldwide.",
      metrics: {
        performance: { 
          value: "Average", 
          color: "yellow",
          details: {
            revenueGrowth: -3.0,
            profitMargin: 20.9,
            returnOnCapital: 5.24
          },
          explanation: "American Tower shows challenging performance with -3.0% revenue decline, below the communications REIT average. Despite this, its profit margin of 20.9% and return on capital of 5.24% remain solid, reflecting the essential nature of its communications infrastructure."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.6,
            beta: 0.89,
            dividendConsistency: "Good"
          },
          explanation: "American Tower exhibits moderate stability with volatility (2.6%) typical for the communications REIT sector. Its beta of 0.89 indicates slightly reduced market sensitivity. The company maintains high dividend consistency with a strong history of dividend growth."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 44.2,
            pbRatio: 29.41,
            dividendYield: 3.2
          },
          explanation: "American Tower trades at a high PE ratio of 44.2, reflecting its premium infrastructure position. Its price-to-book ratio of 29.41 is significantly above average, reflecting the high-quality nature of its global tower network. The 3.2% dividend yield provides moderate income potential."
        },
        momentum: { 
          value: "Good", 
          color: "green",
          details: {
            threeMonthReturn: 15.1,
            relativePerformance: 7.1,
            rsi: 61.1
          },
          explanation: "American Tower shows strong momentum with a positive three-month return of 15.1%, outperforming the broader market. Its relative performance of 7.1% indicates significant outperformance versus peers. With an RSI of 61.1, the stock shows positive momentum without being overbought."
        }
      },
      synopsis: {
        price: "Recovering strongly as telecommunications infrastructure spending increases",
        company: "American Tower benefits from global 5G deployment and increased data consumption",
        role: "Strategic global communications infrastructure holding with growth potential"
      },
      overallAnalysis: "A premier global cell tower REIT with a dominant position in wireless infrastructure. Long-term contracted revenue streams, global diversification, and 5G infrastructure demand provide resilience and growth potential despite high valuation multiples.",
      chartData: [201.5, 203.2, 205.0, 206.5, 208.1, 209.5, 210.8, 211.0, 211.5, 212.0, 212.5, 212.80],
      industry: "Real Estate"
    },
    {
      name: "Welltower Inc",
      ticker: "WELL",
      price: 149.84,
      change: 1.12,
      rating: 3.8,
      smartScore: "Average",
      description: "Welltower Inc is a REIT focused on healthcare infrastructure, including senior housing, post-acute care, and outpatient medical properties.",
      metrics: {
        performance: { 
          value: "Poor", 
          color: "red",
          details: {
            revenueGrowth: 20.4,
            profitMargin: 6.3,
            returnOnCapital: 1.06
          },
          explanation: "Welltower shows mixed performance with strong 20.4% revenue growth, significantly above the healthcare REIT average. However, its low profit margin of 6.3% and modest return on capital of 1.06% reflect ongoing pressures in the senior housing segment."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.2,
            beta: 0.94,
            dividendConsistency: "Poor"
          },
          explanation: "Welltower exhibits moderate stability with volatility (2.2%) typical for the healthcare REIT sector. Its beta of 0.94 indicates market sensitivity close to the broader market. The company has poor dividend consistency, with historical dividend adjustments during industry disruptions."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 182.2,
            pbRatio: 2.98,
            dividendYield: 1.9
          },
          explanation: "Welltower trades at a very high PE ratio of 182.2, reflecting recent recovery and future growth expectations. Its price-to-book ratio of 2.98 is slightly above average for healthcare REITs. The 1.9% dividend yield is below the REIT sector average, offering limited income potential."
        },
        momentum: { 
          value: "Good", 
          color: "green",
          details: {
            threeMonthReturn: 19.3,
            relativePerformance: 11.3,
            rsi: 54.7
          },
          explanation: "Welltower shows strong momentum with a positive three-month return of 19.3%, significantly outperforming the broader market. Its relative performance of 11.3% indicates substantial outperformance versus peers. With an RSI of 54.7, the stock shows positive momentum while remaining in balanced territory."
        }
      },
      synopsis: {
        price: "Strong recovery as senior housing segment rebounds post-pandemic",
        company: "Welltower's diversified healthcare portfolio provides exposure to aging demographic trends",
        role: "Cyclical recovery play with long-term demographic tailwinds"
      },
      overallAnalysis: "A leading healthcare REIT benefiting from post-pandemic recovery in senior housing. Demographic tailwinds from aging populations, strategic repositioning, and improved operational metrics support future growth despite elevated valuation metrics.",
      chartData: [139.5, 141.2, 143.0, 144.5, 146.1, 147.5, 148.0, 148.5, 149.0, 149.4, 149.6, 149.84],
      industry: "Real Estate"
    },
    {
      name: "Boston Properties",
      ticker: "BXP",
      price: 69.48,
      change: -0.52,
      rating: 2.8,
      smartScore: "Poor",
      description: "Boston Properties is an office REIT focusing on high-quality properties in major metropolitan areas including Boston, New York, and San Francisco.",
      metrics: {
        performance: { 
          value: "Poor", 
          color: "red",
          details: {
            revenueGrowth: 4.1,
            profitMargin: 0.4,
            returnOnCapital: 0.06
          },
          explanation: "Boston Properties shows mixed performance with 4.1% revenue growth, but extremely low profit margin of 0.4% and return on capital of 0.06%. These metrics reflect significant challenges in the office real estate sector amid changing work patterns."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 3.0,
            beta: 1.08,
            dividendConsistency: "Poor"
          },
          explanation: "Boston Properties exhibits higher volatility (3.0%) than the REIT sector average. Its beta of 1.08 indicates slightly higher market sensitivity. The company has poor dividend consistency, with recent dividend adjustments due to office sector challenges."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 785.0,
            pbRatio: 2.03,
            dividendYield: 5.7
          },
          explanation: "Boston Properties trades at an extremely high PE ratio of 785.0, reflecting severely compressed earnings. Its price-to-book ratio of 2.03 is reasonable, while its high 5.7% dividend yield offers substantial income potential, though with sustainability questions."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -6.4,
            relativePerformance: -14.4,
            rsi: 52.5
          },
          explanation: "Boston Properties shows weak momentum with a negative three-month return of -6.4%, significantly underperforming the broader market. Its relative performance of -14.4% indicates substantial underperformance versus peers. With an RSI of 52.5, the stock is in neutral territory."
        }
      },
      synopsis: {
        price: "Under pressure as office vacancy rates remain elevated in major markets",
        company: "Boston Properties faces challenges from hybrid work models and reduced office space demand",
        role: "Higher-risk contrarian bet on office space recovery with high income potential"
      },
      overallAnalysis: "A major office REIT facing significant headwinds from changing work patterns and reduced office demand. Premium properties in major markets provide some protection, but ongoing uncertainty about the future of office work creates substantial investment risk despite the attractive dividend yield.",
      chartData: [73.5, 72.8, 72.2, 71.6, 70.9, 70.5, 70.2, 70.0, 69.8, 69.5, 69.5, 69.48],
      industry: "Real Estate"
    },
    {
      name: "Equity Residential",
      ticker: "EQR",
      price: 71.36,
      change: 0.28,
      rating: 3.5,
      smartScore: "Average",
      description: "Equity Residential is a residential REIT specializing in high-quality apartment communities in coastal and urban markets.",
      metrics: {
        performance: { 
          value: "Good", 
          color: "green",
          details: {
            revenueGrowth: 3.8,
            profitMargin: 34.9,
            returnOnCapital: 5.59
          },
          explanation: "Equity Residential shows solid performance with 3.8% revenue growth, slightly below the residential REIT average. Its strong profit margin of 34.9% and solid return on capital of 5.59% reflect efficient management of its apartment portfolio across urban markets."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.3,
            beta: 0.88,
            dividendConsistency: "Medium"
          },
          explanation: "Equity Residential exhibits moderate stability with volatility (2.3%) typical for the residential REIT sector. Its beta of 0.88 indicates slightly reduced market sensitivity. The company maintains medium dividend consistency, with occasional dividend adjustments during market disruptions."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 26.8,
            pbRatio: 2.46,
            dividendYield: 3.9
          },
          explanation: "Equity Residential trades at a PE ratio of 26.8, in line with the residential REIT average. Its price-to-book ratio of 2.46 is typical for high-quality apartment REITs, while its 3.9% dividend yield provides moderate income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: 1.7,
            relativePerformance: -6.3,
            rsi: 52.8
          },
          explanation: "Equity Residential shows mixed momentum with a modest three-month return of 1.7%, but underperforming the broader market. Its relative performance of -6.3% indicates underperformance versus peers. With an RSI of 52.8, the stock is in neutral territory."
        }
      },
      synopsis: {
        price: "Stable with moderate growth as urban rental markets continue recovery",
        company: "Equity Residential benefits from limited housing supply in coastal markets and return to urban living",
        role: "Quality holding for residential real estate exposure with consistent income"
      },
      overallAnalysis: "A high-quality apartment REIT with a focus on coastal and urban markets. Benefiting from limited housing supply, strong operational performance, and demographic trends, but facing some challenges from interest rate pressures and shifting urban demand patterns.",
      chartData: [70.2, 70.5, 70.8, 71.0, 71.2, 71.3, 71.35, 71.25, 71.3, 71.32, 71.34, 71.36],
      industry: "Real Estate"
    }
  ],

================
File: new-section.txt
================
"Real Estate": [
    {
      name: "Prologis",
      ticker: "PLD",
      price: 110.26,
      change: 0.8,
      rating: 3.6,
      smartScore: "Average",
      description: "Prologis is a global leader in logistics real estate with a focus on high-barrier, high-growth markets.",
      metrics: {
        performance: { 
          value: "Average", 
          color: "yellow",
          details: {
            revenueGrowth: 2.2,
            profitMargin: 45.4,
            returnOnCapital: 4.3
          },
          explanation: "Prologis shows moderate performance with 2.2% revenue growth, below the logistics REIT average. Its strong profit margin of 45.4% and solid return on capital of 4.3% reflect the stable income from its high-quality logistics property portfolio."
        },
        stability: { 
          value: "Poor", 
          color: "red",
          details: {
            volatility: 2.5,
            beta: 1.24,
            dividendConsistency: "Medium"
          },
          explanation: "Prologis exhibits higher volatility (2.5%) than the REIT sector average. Its beta of 1.24 indicates higher market sensitivity. The company maintains medium dividend consistency, with a history of dividend adjustments based on market conditions."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 28.0,
            pbRatio: 1.9,
            dividendYield: 3.7
          },
          explanation: "Prologis trades at a PE ratio of 28.0, typical for premium logistics REITs. Its price-to-book ratio of 1.9 is reasonable given its high-quality assets. The 3.7% dividend yield offers moderate income potential."
        },
        momentum: { 
          value: "Average", 
          color: "yellow",
          details: {
            threeMonthReturn: 6.1,
            relativePerformance: -2.0,
            rsi: 37.4
          },
          explanation: "Prologis shows moderate momentum with a positive three-month return of 6.1%, slightly underperforming the broader market. Its relative performance of -2.0% indicates slight underperformance versus peers. With an RSI of 37.4, the stock is approaching oversold territory."
        }
      },
      synopsis: {
        price: "Trading at a reasonable valuation given its high-quality logistics portfolio",
        company: "Prologis benefits from e-commerce growth and supply chain reconfiguration trends",
        role: "Core holding for real estate exposure with growth potential from logistics trends"
      },
      overallAnalysis: "A high-quality logistics REIT benefiting from e-commerce growth and supply chain transformation. Strong operational metrics and strategic locations in key markets provide resilience and long-term growth potential despite near-term interest rate pressures.",
      chartData: [104.5, 105.8, 106.2, 107.5, 108.3, 109.0, 109.4, 109.8, 110.0, 110.1, 110.2, 110.26],
      industry: "Real Estate"
    },
    {
      name: "Realty Income Corp",
      ticker: "O",
      price: 56.28,
      change: 1.29,
      rating: 4.0,
      smartScore: "Good",
      description: "Realty Income is a triple-net lease REIT focusing on high-quality, freestanding commercial properties with long-term leases.",
      metrics: {
        performance: { 
          value: "Average", 
          color: "yellow",
          details: {
            revenueGrowth: 5.7,
            profitMargin: 29.5,
            returnOnCapital: 1.30
          },
          explanation: "Realty Income shows solid performance with 5.7% revenue growth, slightly above the real estate industry average of 5.0%. Its profit margin of 29.5% and return on capital of 1.3% reflect stable operations from its portfolio of triple-net lease properties with high-quality tenants."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.0,
            beta: 0.82,
            dividendConsistency: "Good"
          },
          explanation: "Realty Income exhibits good stability with low volatility (2.0%) compared to the real estate sector average. Its beta of 0.82 indicates reduced market sensitivity. The company maintains exceptional dividend consistency as a 'Dividend Aristocrat', providing reliable monthly income for investors."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 57.6,
            pbRatio: 1.29,
            dividendYield: 5.7
          },
          explanation: "Realty Income has a higher PE ratio of 57.6, reflecting investor premium for its reliability. Its price-to-book ratio of 1.29 suggests reasonable value, while its generous 5.7% dividend yield significantly exceeds the sector's average, offering substantial income potential."
        },
        momentum: { 
          value: "Average", 
          color: "yellow",
          details: {
            threeMonthReturn: 6.6,
            relativePerformance: -1.5,
            rsi: 49.3
          },
          explanation: "Realty Income shows moderate momentum with a three-month return of 6.6%, slightly underperforming the broader market. Its relative performance of -1.5% indicates slight underperformance versus peers. With an RSI of 49.3, the stock is in balanced territory, suggesting stable trading patterns."
        }
      },
      synopsis: {
        price: "Trading steadily as investors value its reliable monthly dividend",
        company: "Realty Income continues to expand its portfolio with high-quality tenants and long-term leases",
        role: "Core income holding for real estate portfolio with consistent monthly dividends"
      },
      overallAnalysis: "A high-quality net lease REIT known as the 'Monthly Dividend Company'. Strong tenant quality, long-term lease structure, and consistent dividend growth make it an excellent choice for income-focused investors seeking stability.",
      chartData: [54.85, 55.10, 55.42, 55.65, 55.92, 56.15, 55.98, 56.05, 56.12, 56.20, 56.25, 56.28],
      industry: "Real Estate"
    },
    {
      name: "Simon Property Group",
      ticker: "SPG",
      price: 166.12,
      change: 0.55,
      rating: 3.2,
      smartScore: "Average",
      description: "Simon Property Group is a retail REIT specializing in premium shopping, dining, and entertainment destinations.",
      metrics: {
        performance: { 
          value: "Good", 
          color: "green",
          details: {
            revenueGrowth: 5.1,
            profitMargin: 41.9,
            returnOnCapital: 9.97
          },
          explanation: "Simon Property Group shows good performance with 5.1% revenue growth, in line with the retail REIT average. Its strong profit margin of 41.9% and excellent return on capital of 9.97% reflect operational efficiency despite challenges in the retail property sector."
        },
        stability: { 
          value: "Poor", 
          color: "red",
          details: {
            volatility: 2.6,
            beta: 1.49,
            dividendConsistency: "Poor"
          },
          explanation: "Simon Property Group exhibits higher volatility (2.6%) than the real estate industry average. Its beta of 1.49 indicates higher market sensitivity than peers. Poor dividend consistency reflects historical dividend adjustments during retail sector disruptions."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 22.0,
            pbRatio: 18.68,
            dividendYield: 5.1
          },
          explanation: "Simon Property Group trades at a PE ratio of 22.0, in line with the retail REIT average. The price-to-book ratio of 18.68 is significantly above industry averages, reflecting premium property locations. Its attractive 5.1% dividend yield provides substantial income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -3.1,
            relativePerformance: -11.0,
            rsi: 41.9
          },
          explanation: "Simon Property Group shows weak momentum with a negative three-month return of -3.1%, underperforming the broader market. Its relative performance of -11.0% indicates significant underperformance versus peers. With an RSI of 41.9, the stock is approaching oversold territory."
        }
      },
      synopsis: {
        price: "Under pressure as retail sector faces ongoing challenges",
        company: "Simon Property Group continues transforming its premium mall portfolio to adapt to changing consumer behavior",
        role: "Higher-risk opportunity in retail real estate with attractive dividend yield"
      },
      overallAnalysis: "A major retail REIT facing challenges in an evolving retail landscape. While offering an attractive dividend yield, investment comes with higher volatility and uncertainty as the company navigates the continuing transformation of physical retail.",
      chartData: [169.5, 168.8, 168.2, 167.6, 166.9, 166.5, 166.2, 166.0, 165.8, 166.0, 166.08, 166.12],
      industry: "Real Estate"
    },
    {
      name: "AvalonBay Communities",
      ticker: "AVB",
      price: 214.36,
      change: 0.82,
      rating: 4.1,
      smartScore: "Good",
      description: "AvalonBay Communities is a residential REIT specializing in high-quality apartment communities in leading metropolitan areas.",
      metrics: {
        performance: { 
          value: "Good", 
          color: "green",
          details: {
            revenueGrowth: 4.9,
            profitMargin: 36.5,
            returnOnCapital: 5.6
          },
          explanation: "AvalonBay shows strong performance with 4.9% revenue growth, in line with residential REIT averages. Its profit margin of 36.5% and return on capital of 5.6% reflect efficient management of its apartment portfolio across premium markets."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.0,
            beta: 0.89,
            dividendConsistency: "Good"
          },
          explanation: "AvalonBay exhibits moderate stability with volatility (2.0%) close to the residential REIT average. Its beta of 0.89 indicates slightly reduced market sensitivity. The company maintains high dividend consistency, with a strong history of dividend growth."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 28.2,
            pbRatio: 2.55,
            dividendYield: 3.3
          },
          explanation: "AvalonBay trades at a PE ratio of 28.2, slightly above the residential REIT average. Its price-to-book ratio of 2.55 is typical for high-quality apartment REITs, while its 3.3% dividend yield provides moderate income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -2.4,
            relativePerformance: -10.0,
            rsi: 47.8
          },
          explanation: "AvalonBay shows weak momentum with a negative three-month return of -2.4%, underperforming the broader market. Its relative performance of -10.0% indicates significant underperformance versus peers. With an RSI of 47.8, the stock is in neutral territory."
        }
      },
      synopsis: {
        price: "Stable with moderate growth as rental demand remains strong in key markets",
        company: "AvalonBay benefits from urban migration trends and limited housing supply in coastal markets",
        role: "Quality holding for residential real estate exposure with consistent dividend growth"
      },
      overallAnalysis: "A high-quality apartment REIT with properties in premium coastal markets. Strong operational metrics and favorable demographics in its target markets provide resilience and long-term growth potential despite near-term interest rate pressures.",
      chartData: [210.5, 211.2, 212.0, 212.5, 213.1, 213.5, 213.8, 214.0, 214.2, 214.25, 214.3, 214.36],
      industry: "Real Estate"
    },
    {
      name: "Public Storage",
      ticker: "PSA",
      price: 294.93,
      change: 1.25,
      rating: 4.2,
      smartScore: "Good",
      description: "Public Storage is the largest self-storage REIT in the United States with over 2,800 facilities nationwide.",
      metrics: {
        performance: { 
          value: "Good", 
          color: "green",
          details: {
            revenueGrowth: 3.9,
            profitMargin: 39.9,
            returnOnCapital: 10.2
          },
          explanation: "Public Storage shows solid performance with 3.9% revenue growth, slightly below the self-storage REIT average. Its strong profit margin of 39.9% and excellent return on capital of 10.2% reflect the operational efficiency of its vast self-storage portfolio."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.6,
            beta: 0.8,
            dividendConsistency: "Good"
          },
          explanation: "Public Storage exhibits moderate stability with volatility (2.6%) typical for the storage REIT sector. Its beta of 0.8 indicates reduced market sensitivity. The company maintains high dividend consistency with a long track record of reliable distributions."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 27.7,
            pbRatio: 9.65,
            dividendYield: 4.2
          },
          explanation: "Public Storage trades at a PE ratio of 27.7, typical for premium self-storage REITs. Its price-to-book ratio of 9.65 is significantly above average, reflecting the high-quality nature of its assets and dominant market position. The 4.2% dividend yield offers attractive income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -1.7,
            relativePerformance: -9.7,
            rsi: 43.5
          },
          explanation: "Public Storage shows weak momentum with a negative three-month return of -1.7%, underperforming the broader market. Its relative performance of -9.7% indicates significant underperformance versus peers. With an RSI of 43.5, the stock is approaching oversold territory."
        }
      },
      synopsis: {
        price: "Trading steadily with strong fundamentals despite recent industry slowdown",
        company: "Public Storage's dominant market position and scale provide competitive advantages in the self-storage space",
        role: "Core holding for real estate portfolio with defensive characteristics and reliable income"
      },
      overallAnalysis: "A blue-chip storage REIT with industry-leading scale and operational efficiency. Strong balance sheet, brand recognition, and technological investments position it well for long-term growth despite near-term normalization in the storage market.",
      chartData: [290.2, 291.5, 292.3, 293.1, 293.5, 293.8, 294.0, 294.3, 294.5, 294.7, 294.85, 294.93],
      industry: "Real Estate"
    },
    {
      name: "Digital Realty Trust",
      ticker: "DLR",
      price: 155.49,
      change: 0.88,
      rating: 4.0,
      smartScore: "Average",
      description: "Digital Realty Trust is a global provider of data center and colocation solutions for technology companies and enterprises.",
      metrics: {
        performance: { 
          value: "Poor", 
          color: "red",
          details: {
            revenueGrowth: 1.4,
            profitMargin: 10.1,
            returnOnCapital: 1.43
          },
          explanation: "Digital Realty shows moderate performance with 1.4% revenue growth, below the data center REIT average. Its profit margin of 10.1% and return on capital of 1.43% reflect ongoing investments in expansion and development of new facilities."
        },
        stability: { 
          value: "Poor", 
          color: "red",
          details: {
            volatility: 3.1,
            beta: 0.92,
            dividendConsistency: "Good"
          },
          explanation: "Digital Realty exhibits higher volatility (3.1%) than the data center REIT average. Its beta of 0.92 indicates slightly reduced market sensitivity. The company maintains high dividend consistency with a strong history of dividend increases."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 95.6,
            pbRatio: 2.54,
            dividendYield: 3.2
          },
          explanation: "Digital Realty trades at a high PE ratio of 95.6, reflecting significant investment in future growth. Its price-to-book ratio of 2.54 is reasonable for data center REITs, while its 3.2% dividend yield provides moderate income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -12.1,
            relativePerformance: -20.0,
            rsi: 50.1
          },
          explanation: "Digital Realty shows weak momentum with a significant negative three-month return of -12.1%, substantially underperforming the broader market. Its relative performance of -20.0% indicates major underperformance versus peers. With an RSI of 50.1, the stock is in neutral territory despite recent weakness."
        }
      },
      synopsis: {
        price: "Under pressure as AI demand balances against higher interest rate concerns",
        company: "Digital Realty's global data center footprint positions it well for cloud computing and AI growth",
        role: "Strategic holding for technology exposure through real estate with dividend income"
      },
      overallAnalysis: "A leading global data center REIT well-positioned for cloud computing and AI infrastructure growth. Despite near-term interest rate pressures, long-term secular trends in digital transformation and data consumption support future demand for its facilities.",
      chartData: [161.5, 160.2, 159.0, 157.8, 156.5, 155.8, 155.3, 155.0, 154.8, 155.1, 155.3, 155.49],
      industry: "Real Estate"
    },
    {
      name: "American Tower Corp",
      ticker: "AMT",
      price: 212.80,
      change: 1.45,
      rating: 4.1,
      smartScore: "Good",
      description: "American Tower Corp is a global REIT that owns, operates, and develops communications real estate with a portfolio of over 220,000 sites worldwide.",
      metrics: {
        performance: { 
          value: "Average", 
          color: "yellow",
          details: {
            revenueGrowth: -3.0,
            profitMargin: 20.9,
            returnOnCapital: 5.24
          },
          explanation: "American Tower shows challenging performance with -3.0% revenue decline, below the communications REIT average. Despite this, its profit margin of 20.9% and return on capital of 5.24% remain solid, reflecting the essential nature of its communications infrastructure."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.6,
            beta: 0.89,
            dividendConsistency: "Good"
          },
          explanation: "American Tower exhibits moderate stability with volatility (2.6%) typical for the communications REIT sector. Its beta of 0.89 indicates slightly reduced market sensitivity. The company maintains high dividend consistency with a strong history of dividend growth."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 44.2,
            pbRatio: 29.41,
            dividendYield: 3.2
          },
          explanation: "American Tower trades at a high PE ratio of 44.2, reflecting its premium infrastructure position. Its price-to-book ratio of 29.41 is significantly above average, reflecting the high-quality nature of its global tower network. The 3.2% dividend yield provides moderate income potential."
        },
        momentum: { 
          value: "Good", 
          color: "green",
          details: {
            threeMonthReturn: 15.1,
            relativePerformance: 7.1,
            rsi: 61.1
          },
          explanation: "American Tower shows strong momentum with a positive three-month return of 15.1%, outperforming the broader market. Its relative performance of 7.1% indicates significant outperformance versus peers. With an RSI of 61.1, the stock shows positive momentum without being overbought."
        }
      },
      synopsis: {
        price: "Recovering strongly as telecommunications infrastructure spending increases",
        company: "American Tower benefits from global 5G deployment and increased data consumption",
        role: "Strategic global communications infrastructure holding with growth potential"
      },
      overallAnalysis: "A premier global cell tower REIT with a dominant position in wireless infrastructure. Long-term contracted revenue streams, global diversification, and 5G infrastructure demand provide resilience and growth potential despite high valuation multiples.",
      chartData: [201.5, 203.2, 205.0, 206.5, 208.1, 209.5, 210.8, 211.0, 211.5, 212.0, 212.5, 212.80],
      industry: "Real Estate"
    },
    {
      name: "Welltower Inc",
      ticker: "WELL",
      price: 149.84,
      change: 1.12,
      rating: 3.8,
      smartScore: "Average",
      description: "Welltower Inc is a REIT focused on healthcare infrastructure, including senior housing, post-acute care, and outpatient medical properties.",
      metrics: {
        performance: { 
          value: "Poor", 
          color: "red",
          details: {
            revenueGrowth: 20.4,
            profitMargin: 6.3,
            returnOnCapital: 1.06
          },
          explanation: "Welltower shows mixed performance with strong 20.4% revenue growth, significantly above the healthcare REIT average. However, its low profit margin of 6.3% and modest return on capital of 1.06% reflect ongoing pressures in the senior housing segment."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.2,
            beta: 0.94,
            dividendConsistency: "Poor"
          },
          explanation: "Welltower exhibits moderate stability with volatility (2.2%) typical for the healthcare REIT sector. Its beta of 0.94 indicates market sensitivity close to the broader market. The company has poor dividend consistency, with historical dividend adjustments during industry disruptions."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 182.2,
            pbRatio: 2.98,
            dividendYield: 1.9
          },
          explanation: "Welltower trades at a very high PE ratio of 182.2, reflecting recent recovery and future growth expectations. Its price-to-book ratio of 2.98 is slightly above average for healthcare REITs. The 1.9% dividend yield is below the REIT sector average, offering limited income potential."
        },
        momentum: { 
          value: "Good", 
          color: "green",
          details: {
            threeMonthReturn: 19.3,
            relativePerformance: 11.3,
            rsi: 54.7
          },
          explanation: "Welltower shows strong momentum with a positive three-month return of 19.3%, significantly outperforming the broader market. Its relative performance of 11.3% indicates substantial outperformance versus peers. With an RSI of 54.7, the stock shows positive momentum while remaining in balanced territory."
        }
      },
      synopsis: {
        price: "Strong recovery as senior housing segment rebounds post-pandemic",
        company: "Welltower's diversified healthcare portfolio provides exposure to aging demographic trends",
        role: "Cyclical recovery play with long-term demographic tailwinds"
      },
      overallAnalysis: "A leading healthcare REIT benefiting from post-pandemic recovery in senior housing. Demographic tailwinds from aging populations, strategic repositioning, and improved operational metrics support future growth despite elevated valuation metrics.",
      chartData: [139.5, 141.2, 143.0, 144.5, 146.1, 147.5, 148.0, 148.5, 149.0, 149.4, 149.6, 149.84],
      industry: "Real Estate"
    },
    {
      name: "Boston Properties",
      ticker: "BXP",
      price: 69.48,
      change: -0.52,
      rating: 2.8,
      smartScore: "Poor",
      description: "Boston Properties is an office REIT focusing on high-quality properties in major metropolitan areas including Boston, New York, and San Francisco.",
      metrics: {
        performance: { 
          value: "Poor", 
          color: "red",
          details: {
            revenueGrowth: 4.1,
            profitMargin: 0.4,
            returnOnCapital: 0.06
          },
          explanation: "Boston Properties shows mixed performance with 4.1% revenue growth, but extremely low profit margin of 0.4% and return on capital of 0.06%. These metrics reflect significant challenges in the office real estate sector amid changing work patterns."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 3.0,
            beta: 1.08,
            dividendConsistency: "Poor"
          },
          explanation: "Boston Properties exhibits higher volatility (3.0%) than the REIT sector average. Its beta of 1.08 indicates slightly higher market sensitivity. The company has poor dividend consistency, with recent dividend adjustments due to office sector challenges."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 785.0,
            pbRatio: 2.03,
            dividendYield: 5.7
          },
          explanation: "Boston Properties trades at an extremely high PE ratio of 785.0, reflecting severely compressed earnings. Its price-to-book ratio of 2.03 is reasonable, while its high 5.7% dividend yield offers substantial income potential, though with sustainability questions."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -6.4,
            relativePerformance: -14.4,
            rsi: 52.5
          },
          explanation: "Boston Properties shows weak momentum with a negative three-month return of -6.4%, significantly underperforming the broader market. Its relative performance of -14.4% indicates substantial underperformance versus peers. With an RSI of 52.5, the stock is in neutral territory."
        }
      },
      synopsis: {
        price: "Under pressure as office vacancy rates remain elevated in major markets",
        company: "Boston Properties faces challenges from hybrid work models and reduced office space demand",
        role: "Higher-risk contrarian bet on office space recovery with high income potential"
      },
      overallAnalysis: "A major office REIT facing significant headwinds from changing work patterns and reduced office demand. Premium properties in major markets provide some protection, but ongoing uncertainty about the future of office work creates substantial investment risk despite the attractive dividend yield.",
      chartData: [73.5, 72.8, 72.2, 71.6, 70.9, 70.5, 70.2, 70.0, 69.8, 69.5, 69.5, 69.48],
      industry: "Real Estate"
    },
    {
      name: "Equity Residential",
      ticker: "EQR",
      price: 71.36,
      change: 0.28,
      rating: 3.5,
      smartScore: "Average",
      description: "Equity Residential is a residential REIT specializing in high-quality apartment communities in coastal and urban markets.",
      metrics: {
        performance: { 
          value: "Good", 
          color: "green",
          details: {
            revenueGrowth: 3.8,
            profitMargin: 34.9,
            returnOnCapital: 5.59
          },
          explanation: "Equity Residential shows solid performance with 3.8% revenue growth, slightly below the residential REIT average. Its strong profit margin of 34.9% and solid return on capital of 5.59% reflect efficient management of its apartment portfolio across urban markets."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.3,
            beta: 0.88,
            dividendConsistency: "Medium"
          },
          explanation: "Equity Residential exhibits moderate stability with volatility (2.3%) typical for the residential REIT sector. Its beta of 0.88 indicates slightly reduced market sensitivity. The company maintains medium dividend consistency, with occasional dividend adjustments during market disruptions."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 26.8,
            pbRatio: 2.46,
            dividendYield: 3.9
          },
          explanation: "Equity Residential trades at a PE ratio of 26.8, in line with the residential REIT average. Its price-to-book ratio of 2.46 is typical for high-quality apartment REITs, while its 3.9% dividend yield provides moderate income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: 1.7,
            relativePerformance: -6.3,
            rsi: 52.8
          },
          explanation: "Equity Residential shows mixed momentum with a modest three-month return of 1.7%, but underperforming the broader market. Its relative performance of -6.3% indicates underperformance versus peers. With an RSI of 52.8, the stock is in neutral territory."
        }
      },
      synopsis: {
        price: "Stable with moderate growth as urban rental markets continue recovery",
        company: "Equity Residential benefits from limited housing supply in coastal markets and return to urban living",
        role: "Quality holding for residential real estate exposure with consistent income"
      },
      overallAnalysis: "A high-quality apartment REIT with a focus on coastal and urban markets. Benefiting from limited housing supply, strong operational performance, and demographic trends, but facing some challenges from interest rate pressures and shifting urban demand patterns.",
      chartData: [70.2, 70.5, 70.8, 71.0, 71.2, 71.3, 71.35, 71.25, 71.3, 71.32, 71.34, 71.36],
      industry: "Real Estate"
    }
  ],

================
File: old-real-estate.txt
================
"Real Estate": [
    {
      name: "Prologis",
      ticker: "PLD",
      price: 110.26,
      change: 0.8,
      rating: 3.6,
      smartScore: "Average",
      description: "Prologis is a leading global industrial REIT specializing in logistics real estate, including distribution centers and warehouses.",
      metrics: {
        performance: { 
          value: "Average", 
          color: "yellow",
          details: {
            revenueGrowth: 2.2,
            profitMargin: 45.4,
            returnOnCapital: 4.3
          },
          explanation: "Prologis shows moderate performance with 2.2% revenue growth, below the real estate industry average of 5.0%. However, its strong profit margin of 45.4% is significantly above the industry benchmark of 25%, while its solid 4.3% return on capital is close to the 4.5% industry standard."
        },
        stability: { 
          value: "Poor", 
          color: "red",
          details: {
            volatility: 2.5,
            beta: 1.24,
            dividendConsistency: "Medium"
          },
          explanation: "Prologis exhibits higher volatility (2.5%) compared to the real estate sector average of 2.5%. Its beta of 1.24 indicates increased market sensitivity. Medium dividend consistency suggests periodic adjustments to dividend policies which may concern income-focused investors."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 28.0,
            pbRatio: 1.9,
            dividendYield: 3.7
          },
          explanation: "Prologis trades at a PE ratio of 28.0, below the real estate industry average of 36.0. Its price-to-book ratio of 1.9 is better than the industry's 2.5, offering good value. Its dividend yield of 3.7% is slightly below the sector's 4.0% average, offering moderate income potential."
        },
        momentum: { 
          value: "Average", 
          color: "yellow",
          details: {
            threeMonthReturn: 6.1,
            relativePerformance: -2.0,
            rsi: 37.4
          },
          explanation: "Prologis shows mixed momentum with a positive three-month return of 6.1%, outperforming the real estate industry average of 2.0%. Its relative performance of -2.0% versus the index indicates slight underperformance. With an RSI of 37.4, the stock is approaching oversold territory, suggesting potential for a technical rebound."
        }
      },
      synopsis: {
        price: "Trading at a discount to historical multiples despite strong operational performance",
        company: "Prologis benefits from e-commerce growth driving demand for logistics facilities",
        role: "Core real estate holding with exposure to global logistics and supply chain trends"
      },
      overallAnalysis: "A high-quality logistics REIT benefiting from e-commerce growth and supply chain reconfiguration. Strong operational metrics and strategic global positioning provide resilience and long-term growth potential despite near-term interest rate pressures.",
      chartData: [107.5, 108.2, 108.9, 109.3, 109.8, 110.0, 110.1, 110.3, 110.2, 110.1, 110.2, 110.26],
      industry: "Real Estate"
    },
    {
      name: "Realty Income Corp",
      ticker: "O",
      price: 56.28,
      change: 0.65,
      rating: 3.8,
      smartScore: "Average",
      description: "Realty Income is a triple-net lease REIT focusing on high-quality, freestanding commercial properties with long-term leases.",
      metrics: {
        performance: { 
          value: "Average", 
          color: "yellow",
          details: {
            revenueGrowth: 29.5,
            profitMargin: 16.0,
            returnOnCapital: 1.3
          },
          explanation: "Realty Income shows strong revenue growth at 29.5%, well above the real estate industry average of 5.0%. However, its profit margin of 16.0% is below the industry benchmark of 25%, and its return on capital of 1.3% is significantly below the 4.5% industry standard, reflecting the triple-net lease business model's lower but more predictable returns."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.0,
            beta: 0.82,
            dividendConsistency: "Good"
          },
          explanation: "Realty Income exhibits excellent stability with lower volatility (2.0%) compared to the real estate sector average of 2.5%. Its beta of 0.82 indicates reduced market sensitivity. The company maintains excellent dividend consistency, providing reliable monthly income for investors."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 57.6,
            pbRatio: 1.29,
            dividendYield: 5.7
          },
          explanation: "Realty Income trades at a premium with a PE ratio of 57.6, well above the real estate industry average of 36.0. However, its price-to-book ratio of 1.29 is significantly below the industry's 2.5, suggesting good value. Its generous 5.7% dividend yield significantly exceeds the sector's 4.0% average, offering substantial income potential."
        },
        momentum: { 
          value: "Average", 
          color: "yellow",
          details: {
            threeMonthReturn: 6.6,
            relativePerformance: -1.5,
            rsi: 49.3
          },
          explanation: "Realty Income shows moderate momentum with a three-month return of 6.6%, outperforming the real estate industry average of 2.0%. Its relative performance of -1.5% indicates slight underperformance versus the broader index. With an RSI of 49.3, the stock is in balanced territory, suggesting stable trading patterns."
        }
      },
      synopsis: {
        price: "Trading steadily as investors value its reliable monthly dividend",
        company: "Realty Income continues to expand its portfolio with high-quality tenants and long-term leases",
        role: "Core income holding for real estate portfolio with consistent monthly dividends"
      },
      overallAnalysis: "A high-quality net lease REIT known as the 'Monthly Dividend Company'. Strong tenant quality, long-term lease structure, and consistent dividend growth make it an excellent choice for income-focused investors seeking stability.",
      chartData: [54.85, 55.10, 55.42, 55.65, 55.92, 56.15, 55.98, 56.05, 56.12, 56.20, 56.25, 56.28],
      industry: "Real Estate"
    },
    {
      name: "Simon Property Group",
      ticker: "SPG",
      price: 166.12,
      change: 0.55,
      rating: 3.0,
      smartScore: "Average",
      description: "Simon Property Group is a retail REIT specializing in premium shopping, dining, and entertainment destinations.",
      metrics: {
        performance: { 
          value: "Good", 
          color: "green",
          details: {
            revenueGrowth: 5.4,
            profitMargin: 41.9,
            returnOnCapital: 9.97
          },
          explanation: "Simon Property Group shows solid revenue growth at 5.4%, slightly above the real estate industry average of 5.0%. Its profit margin of 41.9% significantly exceeds the industry benchmark of 25%, while its excellent 9.97% return on capital is more than double the 4.5% industry standard, reflecting the company's premium positioning in the retail sector."
        },
        stability: { 
          value: "Poor", 
          color: "red",
          details: {
            volatility: 2.6,
            beta: 1.49,
            dividendConsistency: "Poor"
          },
          explanation: "Simon Property Group exhibits higher volatility (2.6%) than the real estate industry average of 2.5%. Its beta of 1.49 indicates significantly higher market sensitivity. Poor dividend consistency reflects historical dividend adjustments during retail sector disruptions, a concern for income-focused investors."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 22.0,
            pbRatio: 18.68,
            dividendYield: 5.1
          },
          explanation: "Simon Property Group trades at a favorable PE ratio of 22.0, below the real estate industry average of 36.0. However, its price-to-book ratio of 18.68 is significantly above the industry's 2.5. Its attractive 5.1% dividend yield exceeds the sector's 4.0% average, offering substantial income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -3.1,
            relativePerformance: -11.0,
            rsi: 41.9
          },
          explanation: "Simon Property Group shows weak momentum with a negative three-month return of -3.1%, significantly underperforming the real estate industry average of 2.0%. Its relative performance of -11.0% indicates substantial underperformance versus the index. With an RSI of 41.9, the stock is approaching oversold territory."
        }
      },
      synopsis: {
        price: "Under pressure as retail sector faces ongoing challenges",
        company: "Simon Property Group continues transforming its premium mall portfolio to adapt to changing consumer behavior",
        role: "Higher-risk opportunity in retail real estate with attractive dividend yield"
      },
      overallAnalysis: "A major retail REIT facing challenges in an evolving retail landscape. While offering strong operational metrics and an attractive dividend yield, investment comes with higher volatility and uncertainty as the company navigates the continuing transformation of physical retail.",
      chartData: [169.5, 168.8, 168.2, 167.6, 166.9, 166.5, 166.2, 166.0, 165.8, 166.0, 166.08, 166.12],
      industry: "Real Estate"
    },
    {
      name: "AvalonBay Communities",
      ticker: "AVB",
      price: 214.36,
      change: 0.82,
      rating: 3.5,
      smartScore: "Average",
      description: "AvalonBay Communities is a residential REIT specializing in high-quality apartment communities in leading metropolitan areas.",
      metrics: {
        performance: { 
          value: "Good", 
          color: "green",
          details: {
            revenueGrowth: 4.9,
            profitMargin: 36.5,
            returnOnCapital: 5.6
          },
          explanation: "AvalonBay shows solid performance with 4.9% revenue growth, in line with the real estate industry average of 5.0%. Its strong profit margin of 36.5% is well above the industry benchmark of 25%, while its excellent 5.6% return on capital exceeds the 4.5% industry standard, reflecting efficient management of its apartment portfolio."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.0,
            beta: 0.89,
            dividendConsistency: "Good"
          },
          explanation: "AvalonBay exhibits good stability with lower volatility (2.0%) than the real estate industry average of 2.5%. Its beta of 0.89 indicates slightly reduced market sensitivity. The company maintains good dividend consistency, with a strong history of reliable distributions."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 28.2,
            pbRatio: 2.55,
            dividendYield: 3.3
          },
          explanation: "AvalonBay trades at a PE ratio of 28.2, below the real estate industry average of 36.0. Its price-to-book ratio of 2.55 is slightly higher than the industry's 2.5. Its dividend yield of 3.3% is below the sector's 4.0% average, offering moderate income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -2.4,
            relativePerformance: -10.0,
            rsi: 47.8
          },
          explanation: "AvalonBay shows weak momentum with a negative three-month return of -2.4%, underperforming the real estate industry average of 2.0%. Its relative performance of -10.0% indicates significant underperformance versus the index. With an RSI of 47.8, the stock is in neutral territory."
        }
      },
      synopsis: {
        price: "Stable with moderate growth as rental demand remains strong in key markets",
        company: "AvalonBay benefits from urban migration trends and limited housing supply in coastal markets",
        role: "Quality holding for residential real estate exposure with consistent dividend growth"
      },
      overallAnalysis: "A high-quality apartment REIT with properties in premium markets. Strong operational metrics and favorable demographics in its target markets provide resilience and long-term growth potential despite near-term interest rate pressures.",
      chartData: [210.5, 211.2, 212.0, 212.5, 213.1, 213.5, 213.8, 214.0, 214.2, 214.25, 214.3, 214.36],
      industry: "Real Estate"
    },
    {
      name: "Public Storage",
      ticker: "PSA",
      price: 294.93,
      change: 1.25,
      rating: 3.3,
      smartScore: "Average",
      description: "Public Storage is the largest self-storage REIT in the United States with over 2,800 facilities nationwide.",
      metrics: {
        performance: { 
          value: "Good", 
          color: "green",
          details: {
            revenueGrowth: 3.9,
            profitMargin: 39.9,
            returnOnCapital: 10.2
          },
          explanation: "Public Storage shows moderate performance with 3.9% revenue growth, below the real estate industry average of 5.0%. However, its strong profit margin of 39.9% significantly exceeds the industry benchmark of 25%, while its excellent 10.2% return on capital is more than double the 4.5% industry standard, reflecting the operational efficiency of its self-storage portfolio."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.6,
            beta: 0.8,
            dividendConsistency: "Good"
          },
          explanation: "Public Storage exhibits slightly higher volatility (2.6%) than the real estate industry average of 2.5%. Its beta of 0.8 indicates reduced market sensitivity, which is positive. The company maintains high dividend consistency with a long track record of reliable distributions."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 27.7,
            pbRatio: 9.65,
            dividendYield: 4.2
          },
          explanation: "Public Storage trades at a PE ratio of 27.7, below the real estate industry average of 36.0, which is positive. However, its price-to-book ratio of 9.65 is significantly above the industry's 2.5. Its dividend yield of 4.2% slightly exceeds the sector's 4.0% average, offering good income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -1.7,
            relativePerformance: -9.7,
            rsi: 43.5
          },
          explanation: "Public Storage shows weak momentum with a negative three-month return of -1.7%, underperforming the real estate industry average of 2.0%. Its relative performance of -9.7% indicates significant underperformance versus the index. With an RSI of 43.5, the stock is approaching oversold territory."
        }
      },
      synopsis: {
        price: "Trading steadily with strong fundamentals despite recent industry slowdown",
        company: "Public Storage's dominant market position and scale provide competitive advantages in the self-storage space",
        role: "Core holding for real estate portfolio with defensive characteristics and reliable income"
      },
      overallAnalysis: "A blue-chip storage REIT with industry-leading scale and operational efficiency. Strong balance sheet, brand recognition, and technological investments position it well for long-term growth despite near-term normalization in the storage market.",
      chartData: [290.2, 291.5, 292.3, 293.1, 293.5, 293.8, 294.0, 294.3, 294.5, 294.7, 294.85, 294.93],
      industry: "Real Estate"
    },
    {
      name: "Digital Realty Trust",
      ticker: "DLR",
      price: 155.49,
      change: 0.88,
      rating: 2.5,
      smartScore: "Poor",
      description: "Digital Realty Trust is a global provider of data center and colocation solutions for technology companies and enterprises.",
      metrics: {
        performance: { 
          value: "Poor", 
          color: "red",
          details: {
            revenueGrowth: 1.4,
            profitMargin: 10.1,
            returnOnCapital: 1.43
          },
          explanation: "Digital Realty shows weak performance with 1.4% revenue growth, well below the real estate industry average of 5.0%. Its profit margin of 10.1% is significantly below the industry benchmark of 25%, while its return on capital of 1.43% is far below the 4.5% industry standard, reflecting ongoing heavy investments in expansion that have yet to yield proportionate returns."
        },
        stability: { 
          value: "Poor", 
          color: "red",
          details: {
            volatility: 3.1,
            beta: 0.92,
            dividendConsistency: "Good"
          },
          explanation: "Digital Realty exhibits higher volatility (3.1%) than the real estate industry average of 2.5%. However, its beta of 0.92 indicates slightly reduced market sensitivity, which is positive. The company maintains high dividend consistency with a solid history of dividend increases."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 95.6,
            pbRatio: 2.54,
            dividendYield: 3.2
          },
          explanation: "Digital Realty trades at a very high PE ratio of 95.6, significantly above the real estate industry average of 36.0, reflecting significant premium valuation. Its price-to-book ratio of 2.54 is slightly above the industry's 2.5. Its dividend yield of 3.2% is below the sector's 4.0% average, offering moderate income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -12.1,
            relativePerformance: -20.0,
            rsi: 50.1
          },
          explanation: "Digital Realty shows very weak momentum with a significant negative three-month return of -12.1%, substantially underperforming the real estate industry average of 2.0%. Its relative performance of -20.0% indicates major underperformance versus the index. With an RSI of 50.1, the stock is in neutral territory despite recent weakness."
        }
      },
      synopsis: {
        price: "Under pressure as AI demand balances against higher interest rate concerns",
        company: "Digital Realty's global data center footprint positions it well for cloud computing and AI growth",
        role: "Strategic holding for technology exposure through real estate with dividend income"
      },
      overallAnalysis: "A leading global data center REIT with mixed investment characteristics. Despite near-term pressures and high valuation, long-term secular trends in digital transformation, cloud computing, and AI infrastructure support future demand for data center facilities.",
      chartData: [161.5, 160.2, 159.0, 157.8, 156.5, 155.8, 155.3, 155.0, 154.8, 155.1, 155.3, 155.49],
      industry: "Real Estate"
    },
    {
      name: "American Tower Corp",
      ticker: "AMT",
      price: 212.80,
      change: 1.45,
      rating: 3.9,
      smartScore: "Good",
      description: "American Tower Corp is a global REIT that owns, operates, and develops communications real estate with a portfolio of over 220,000 sites worldwide.",
      metrics: {
        performance: { 
          value: "Average", 
          color: "yellow",
          details: {
            revenueGrowth: -3.0,
            profitMargin: 20.9,
            returnOnCapital: 5.24
          },
          explanation: "American Tower shows concerning revenue growth at -3.0%, well below the real estate industry average of 5.0%. Its profit margin of 20.9% is slightly below the industry benchmark of 25%, though its return on capital of 5.24% exceeds the 4.5% industry standard, reflecting the efficiency of its asset-light business model."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.6,
            beta: 0.89,
            dividendConsistency: "Good"
          },
          explanation: "American Tower exhibits slightly higher volatility (2.6%) than the real estate industry average of 2.5%. Its beta of 0.89 indicates reduced market sensitivity, which is positive. The company maintains high dividend consistency with a strong history of regular increases."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 44.2,
            pbRatio: 29.41,
            dividendYield: 3.2
          },
          explanation: "American Tower trades at a high PE ratio of 44.2, above the real estate industry average of 36.0. Its price-to-book ratio of 29.41 is extremely high compared to the industry's 2.5, reflecting its asset-light business model and intangible value. Its dividend yield of 3.2% is below the sector's 4.0% average, offering moderate income potential."
        },
        momentum: { 
          value: "Good", 
          color: "green",
          details: {
            threeMonthReturn: 15.1,
            relativePerformance: 7.1,
            rsi: 61.1
          },
          explanation: "American Tower shows strong momentum with an exceptional three-month return of 15.1%, significantly outperforming the real estate industry average of 2.0%. Its relative performance of 7.1% indicates substantial outperformance versus the index. With an RSI of 61.1, the stock is showing strong buying interest while not yet reaching overbought levels."
        }
      },
      synopsis: {
        price: "Breaking out to new highs as 5G buildout accelerates globally",
        company: "American Tower's global infrastructure portfolio benefits from increasing mobile data usage and network densification",
        role: "Growth-oriented real estate holding with exposure to global telecommunications trends"
      },
      overallAnalysis: "A leading global communications REIT benefiting from 5G deployment and data consumption growth. Despite high valuation multiples, the company's essential infrastructure assets and global diversification provide resilience and long-term growth potential.",
      chartData: [207.5, 208.3, 209.2, 210.1, 210.8, 211.5, 211.9, 212.2, 212.4, 212.6, 212.7, 212.8],
      industry: "Real Estate"
    },
    {
      name: "Welltower Inc",
      ticker: "WELL",
      price: 149.84,
      change: 0.75,
      rating: 3.2,
      smartScore: "Average",
      description: "Welltower is a healthcare REIT specializing in senior housing, post-acute care, and outpatient medical properties.",
      metrics: {
        performance: { 
          value: "Poor", 
          color: "red",
          details: {
            revenueGrowth: 20.4,
            profitMargin: 6.3,
            returnOnCapital: 1.06
          },
          explanation: "Welltower shows excellent revenue growth at 20.4%, significantly exceeding the real estate industry average of 5.0%. However, its profit margin of 6.3% is far below the industry benchmark of 25%, while its return on capital of 1.06% is substantially below the 4.5% industry standard, reflecting challenges in the senior housing sector that are only beginning to improve."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.2,
            beta: 0.94,
            dividendConsistency: "Poor"
          },
          explanation: "Welltower exhibits slightly lower volatility (2.2%) than the real estate industry average of 2.5%. Its beta of 0.94 indicates slightly reduced market sensitivity. However, poor dividend consistency reflects historical cuts during pandemic disruptions to its senior housing portfolio."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 182.2,
            pbRatio: 2.98,
            dividendYield: 1.9
          },
          explanation: "Welltower trades at an extremely high PE ratio of 182.2, far above the real estate industry average of 36.0, reflecting expected earnings recovery. Its price-to-book ratio of 2.98 is slightly above the industry's 2.5. Its dividend yield of 1.9% is less than half the sector's 4.0% average, offering limited income potential."
        },
        momentum: { 
          value: "Good", 
          color: "green",
          details: {
            threeMonthReturn: 19.3,
            relativePerformance: 11.3,
            rsi: 54.7
          },
          explanation: "Welltower shows exceptional momentum with a three-month return of 19.3%, dramatically outperforming the real estate industry average of 2.0%. Its relative performance of 11.3% indicates substantial outperformance versus the index. With an RSI of 54.7, the stock shows moderate buying interest without reaching overbought levels."
        }
      },
      synopsis: {
        price: "Breaking out to new highs as senior housing sector recovery accelerates",
        company: "Welltower's demographic tailwinds provide long-term growth as aging population drives healthcare demand",
        role: "Thematic play on aging demographics with recovery potential from pandemic disruptions"
      },
      overallAnalysis: "A leading healthcare REIT benefiting from demographic tailwinds with a focus on senior housing. Despite operational challenges during the pandemic, the company's portfolio is well-positioned for recovery and long-term growth as population aging trends accelerate.",
      chartData: [146.5, 147.2, 147.8, 148.3, 148.7, 149.1, 149.3, 149.5, 149.6, 149.7, 149.8, 149.84],
      industry: "Real Estate"
    },
    {
      name: "Boston Properties",
      ticker: "BXP",
      price: 69.48,
      change: -0.35,
      rating: 2.8,
      smartScore: "Poor",
      description: "Boston Properties is an office REIT that owns, manages, and develops Class A office properties in major U.S. markets.",
      metrics: {
        performance: { 
          value: "Poor", 
          color: "red",
          details: {
            revenueGrowth: 4.1,
            profitMargin: 0.4,
            returnOnCapital: 0.06
          },
          explanation: "Boston Properties shows modest revenue growth at 4.1%, slightly below the real estate industry average of 5.0%. Its profit margin of 0.4% is extremely low compared to the industry benchmark of 25%, while its return on capital of 0.06% is negligible compared to the 4.5% industry standard, reflecting severe challenges in the office property sector."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 3.0,
            beta: 1.08,
            dividendConsistency: "Poor"
          },
          explanation: "Boston Properties exhibits higher volatility (3.0%) than the real estate industry average of 2.5%. Its beta of 1.08 indicates slightly higher market sensitivity. Poor dividend consistency reflects concerns about the sustainability of its distribution given office sector challenges."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 785.0,
            pbRatio: 2.03,
            dividendYield: 5.7
          },
          explanation: "Boston Properties trades at an extremely high PE ratio of 785.0, far above the real estate industry average of 36.0, reflecting severely depressed earnings. However, its price-to-book ratio of 2.03 is below the industry's 2.5, suggesting some value based on assets. Its generous 5.7% dividend yield significantly exceeds the sector's 4.0% average, though sustainability may be a concern."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: -6.4,
            relativePerformance: -14.4,
            rsi: 52.5
          },
          explanation: "Boston Properties shows negative momentum with a three-month return of -6.4%, significantly underperforming the real estate industry average of 2.0%. Its relative performance of -14.4% indicates substantial underperformance versus the index. With an RSI of 52.5, the stock is in neutral territory despite recent weakness."
        }
      },
      synopsis: {
        price: "Under significant pressure as return-to-office trends remain uncertain",
        company: "Boston Properties focusing on upgrading office spaces to attract tenants in competitive environment",
        role: "High-risk contrarian play on the future of urban office space with high income potential"
      },
      overallAnalysis: "A major office REIT facing significant challenges in the post-pandemic work environment. Despite quality assets in premium locations, ongoing shifts in work patterns create substantial uncertainty regarding long-term demand for traditional office space.",
      chartData: [71.5, 71.1, 70.7, 70.3, 70.1, 69.9, 69.7, 69.6, 69.5, 69.45, 69.4, 69.48],
      industry: "Real Estate"
    },
    {
      name: "Equity Residential",
      ticker: "EQR",
      price: 71.36,
      change: 0.42,
      rating: 3.5,
      smartScore: "Average",
      description: "Equity Residential is a multifamily REIT focused on owning and operating apartment properties in urban and high-density suburban areas.",
      metrics: {
        performance: { 
          value: "Good", 
          color: "green",
          details: {
            revenueGrowth: 3.8,
            profitMargin: 34.9,
            returnOnCapital: 5.59
          },
          explanation: "Equity Residential shows moderate revenue growth at 3.8%, slightly below the real estate industry average of 5.0%. However, its profit margin of 34.9% significantly exceeds the industry benchmark of 25%, while its return on capital of 5.59% is well above the 4.5% industry standard, reflecting efficient management of its apartment portfolio in high-barrier-to-entry markets."
        },
        stability: { 
          value: "Average", 
          color: "yellow",
          details: {
            volatility: 2.3,
            beta: 0.88,
            dividendConsistency: "Medium"
          },
          explanation: "Equity Residential exhibits slightly lower volatility (2.3%) than the real estate industry average of 2.5%. Its beta of 0.88 indicates reduced market sensitivity. Medium dividend consistency reflects a generally reliable distribution history with occasional adjustments."
        },
        value: { 
          value: "Average", 
          color: "yellow",
          details: {
            peRatio: 26.8,
            pbRatio: 2.46,
            dividendYield: 3.9
          },
          explanation: "Equity Residential trades at a PE ratio of 26.8, below the real estate industry average of 36.0. Its price-to-book ratio of 2.46 is in line with the industry's 2.5. Its dividend yield of 3.9% is slightly below the sector's 4.0% average, offering moderate income potential."
        },
        momentum: { 
          value: "Poor", 
          color: "red",
          details: {
            threeMonthReturn: 1.7,
            relativePerformance: -6.3,
            rsi: 52.8
          },
          explanation: "Equity Residential shows weak momentum with a modest three-month return of 1.7%, slightly underperforming the real estate industry average of 2.0%. Its relative performance of -6.3% indicates underperformance versus the index. With an RSI of 52.8, the stock is in neutral territory."
        }
      },
      synopsis: {
        price: "Trading steadily as stable rental demand balances against higher interest rates",
        company: "Equity Residential's focus on affluent renters in coastal markets provides resilience",
        role: "Quality holding for residential real estate exposure with good dividend security"
      },
      overallAnalysis: "A high-quality apartment REIT with properties targeting affluent renters in coastal markets. Strong operational metrics and demographic tailwinds provide resilience, though the company faces near-term challenges from interest rate pressures and economic uncertainty.",
      chartData: [70.8, 70.9, 71.0, 71.1, 71.2, 71.25, 71.3, 71.32, 71.34, 71.35, 71.35, 71.36],
      industry: "Real Estate"
    },
    {
      name: "AvalonBay Communities",
      ticker: "AVB",
      price: 214.36,
      change: 0.82,
      rating: 4.1,
      smartScore: "Good",
      description: "AvalonBay Communities is a residential REIT specializing in high-quality apartment communities in leading metropolitan areas.",
      metrics: {
        performance: { 
          value: "Fair", 
          color: "yellow",
          details: {
            revenueGrowth: 4.9,
            profitMargin: 36.5,
            returnOnCapital: 5.6
          },
          explanation: "AvalonBay shows solid performance with 4.9% revenue growth, in line with residential REIT averages. Its profit margin of 36.5% and return on capital of 5.6% reflect efficient management of its apartment portfolio across premium markets."
        },
        stability: { 
          value: "Fair", 
          color: "yellow",
          details: {
            volatility: 0.89,
            beta: 0.89,
            dividendConsistency: "High"
          },
          explanation: "AvalonBay exhibits moderate stability with volatility (0.89) close to the residential REIT average. Its beta of 0.89 indicates slightly reduced market sensitivity. The company maintains high dividend consistency, with a strong history of dividend growth."
        },
        value: { 
          value: "Fair", 
          color: "yellow",
          details: {
            peRatio: 28.2,
            pbRatio: 2.55,
            dividendYield: 3.3
          },
          explanation: "AvalonBay trades at a PE ratio of 28.2, slightly above the residential REIT average. Its price-to-book ratio of 2.55 is typical for high-quality apartment REITs, while its 3.3% dividend yield provides moderate income potential."
        },
        momentum: { 
          value: "Weak", 
          color: "red",
          details: {
            threeMonthReturn: -2.4,
            relativePerformance: -10.0,
            rsi: 47.8
          },
          explanation: "AvalonBay shows weak momentum with a negative three-month return of -2.4%, underperforming the broader market. Its relative performance of -10.0% indicates significant underperformance versus peers. With an RSI of 47.8, the stock is in neutral territory."
        }
      },
      synopsis: {
        price: "Stable with moderate growth as rental demand remains strong in key markets",
        company: "AvalonBay benefits from urban migration trends and limited housing supply in coastal markets",
        role: "Quality holding for residential real estate exposure with consistent dividend growth"
      },
      overallAnalysis: "A high-quality apartment REIT with properties in premium coastal markets. Strong operational metrics and favorable demographics in its target markets provide resilience and long-term growth potential despite near-term interest rate pressures.",
      chartData: [210.5, 211.2, 212.0, 212.5, 213.1, 213.5, 213.8, 214.0, 214.2, 214.25, 214.3, 214.36],
      industry: "Real Estate"
    },
    {
      name: "Public Storage",
      ticker: "PSA",
      price: 294.93,
      change: 1.25,
      rating: 4.2,
      smartScore: "Good",
      description: "Public Storage is the largest self-storage REIT in the United States with over 2,800 facilities nationwide.",
      metrics: {
        performance: { 
          value: "Fair", 
          color: "yellow",
          details: {
            revenueGrowth: 3.9,
            profitMargin: 39.9,
            returnOnCapital: 10.2
          },
          explanation: "Public Storage shows solid performance with 3.9% revenue growth, slightly below the self-storage REIT average. Its strong profit margin of 39.9% and excellent return on capital of 10.2% reflect the operational efficiency of its vast self-storage portfolio."
        },
        stability: { 
          value: "High", 
          color: "green",
          details: {
            volatility: 0.8,
            beta: 0.8,
            dividendConsistency: "High"
          },
          explanation: "Public Storage exhibits excellent stability with low volatility (0.8) compared to the broader REIT sector. Its beta of 0.8 indicates reduced market sensitivity. The company maintains high dividend consistency with a long track record of reliable distributions."
        },
        value: { 
          value: "Fair", 
          color: "yellow",
          details: {
            peRatio: 27.7,
            pbRatio: 9.65,
            dividendYield: 4.2
          },
          explanation: "Public Storage trades at a PE ratio of 27.7, typical for premium self-storage REITs. Its price-to-book ratio of 9.65 reflects the high-quality nature of its assets and dominant market position. The 4.2% dividend yield offers attractive income potential."
        },
        momentum: { 
          value: "Weak", 
          color: "red",
          details: {
            threeMonthReturn: -1.7,
            relativePerformance: -9.7,
            rsi: 43.5
          },
          explanation: "Public Storage shows weak momentum with a negative three-month return of -1.7%, underperforming the broader market. Its relative performance of -9.7% indicates significant underperformance versus peers. With an RSI of 43.5, the stock is approaching oversold territory."
        }
      },
      synopsis: {
        price: "Trading steadily with strong fundamentals despite recent industry slowdown",
        company: "Public Storage's dominant market position and scale provide competitive advantages in the self-storage space",
        role: "Core holding for real estate portfolio with defensive characteristics and reliable income"
      },
      overallAnalysis: "A blue-chip storage REIT with industry-leading scale and operational efficiency. Strong balance sheet, brand recognition, and technological investments position it well for long-term growth despite near-term normalization in the storage market.",
      chartData: [290.2, 291.5, 292.3, 293.1, 293.5, 293.8, 294.0, 294.3, 294.5, 294.7, 294.85, 294.93],
      industry: "Real Estate"
    },
    {
      name: "Digital Realty Trust",
      ticker: "DLR",
      price: 155.49,
      change: 0.88,
      rating: 4.0,
      smartScore: "Good",
      description: "Digital Realty Trust is a global provider of data center and colocation solutions for technology companies and enterprises.",
      metrics: {
        performance: { 
          value: "Low", 
          color: "red",
          details: {
            revenueGrowth: 1.4,
            profitMargin: 10.1,
            returnOnCapital: 1.43
          },
          explanation: "Digital Realty shows moderate performance with 1.4% revenue growth, below the data center REIT average. Its profit margin of 10.1% and return on capital of 1.43% reflect ongoing investments in expansion and development of new facilities."
        },
        stability: { 
          value: "Fair", 
          color: "yellow",
          details: {
            volatility: 0.92,
            beta: 0.92,
            dividendConsistency: "High"
          },
          explanation: "Digital Realty exhibits good stability with volatility (0.92) near the data center REIT average. Its beta of 0.92 indicates slightly reduced market sensitivity. The company maintains high dividend consistency with a strong history of dividend increases."
        },
        value: { 
          value: "Fair", 
          color: "yellow",
          details: {
            peRatio: 95.6,
            pbRatio: 2.54,
            dividendYield: 3.2
          },
          explanation: "Digital Realty trades at a high PE ratio of 95.6, reflecting significant investment in future growth. Its price-to-book ratio of 2.54 is reasonable for data center REITs, while its 3.2% dividend yield provides moderate income potential."
        },
        momentum: { 
          value: "Weak", 
          color: "red",
          details: {
            threeMonthReturn: -12.1,
            relativePerformance: -20.0,
            rsi: 50.1
          },
          explanation: "Digital Realty shows weak momentum with a significant negative three-month return of -12.1%, substantially underperforming the broader market. Its relative performance of -20.0% indicates major underperformance versus peers. With an RSI of 50.1, the stock is in neutral territory despite recent weakness."
        }
      },
      synopsis: {
        price: "Under pressure as AI demand balances against higher interest rate concerns",
        company: "Digital Realty's global data center footprint positions it well for cloud computing and AI growth",
        role: "Strategic holding for technology exposure through real estate with dividend income"
      },
      overallAnalysis: "A leading global data center REIT well-positioned for cloud computing and AI infrastructure growth. Despite near-term interest rate pressures, long-term secular trends in digital transformation and data consumption support future demand for its facilities.",
      chartData: [161.5, 160.2, 159.0, 157.8, 156.5, 155.8, 155.3, 155.0, 154.8, 155.1, 155.3, 155.49],
      industry: "Real Estate"
    },
    {
      name: "American Tower Corp",
      ticker: "AMT",
      price: 212.80,
      change: 1.45,
      rating: 4.1,
      smartScore: "Good",
      description: "American Tower Corp is a global REIT that owns, operates, and develops communications real estate with a portfolio of over 220,000 sites worldwide.",
      metrics: {
        performance: { 
          value: "Low", 
          color: "red",
          details: {
            revenueGrowth: -3.0,
            profitMargin: 20.9,
            returnOnCapital: 5.24
          },
          explanation: "American Tower shows challenging performance with -3.0% revenue decline, below the communications REIT average. Despite this, its profit margin of 20.9% and return on capital of 5.24% remain solid, reflecting the stability of its tower leasing business model."
        },
        stability: { 
          value: "High", 
          color: "green",
          details: {
            volatility: 0.89,
            beta: 0.89,
            dividendConsistency: "High"
          },
          explanation: "American Tower exhibits good stability with volatility (0.89) lower than the broader REIT sector. Its beta of 0.89 indicates slightly reduced market sensitivity. The company maintains high dividend consistency with a strong history of dividend growth."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 44.2,
            pbRatio: 29.41,
            dividendYield: 3.2
          },
          explanation: "American Tower trades at a high PE ratio of 44.2 and a very high price-to-book ratio of 29.41, reflecting premium valuations for communications infrastructure REITs. Its 3.2% dividend yield provides moderate income potential despite the premium valuation."
        },
        momentum: { 
          value: "Fair", 
          color: "yellow",
          details: {
            threeMonthReturn: 15.1,
            relativePerformance: 7.1,
            rsi: 61.1
          },
          explanation: "American Tower shows solid momentum with a strong three-month return of 15.1%, outperforming the broader market. Its relative performance of 7.1% indicates significant outperformance versus peers. With an RSI of 61.1, the stock shows positive momentum without being overbought."
        }
      },
      synopsis: {
        price: "Rebounding as interest rate concerns ease and 5G deployment continues",
        company: "American Tower's global tower portfolio benefits from increasing data consumption and network densification",
        role: "Core holding for communications infrastructure exposure with growing dividends"
      },
      overallAnalysis: "A premier global communications infrastructure REIT with a resilient business model supported by long-term leases. Despite near-term carrier consolidation challenges, increasing global mobile data usage and network technology evolution provide sustainable growth catalysts.",
      chartData: [200.5, 202.8, 205.3, 207.5, 209.2, 210.5, 211.2, 211.8, 212.2, 212.5, 212.7, 212.8],
      industry: "Real Estate"
    },
    {
      name: "Welltower Inc",
      ticker: "WELL",
      price: 149.84,
      change: 0.65,
      rating: 3.5,
      smartScore: "Poor",
      description: "Welltower Inc is a healthcare REIT that focuses on senior housing, post-acute care, and outpatient medical properties.",
      metrics: {
        performance: { 
          value: "Strong", 
          color: "green",
          details: {
            revenueGrowth: 20.4,
            profitMargin: 6.3,
            returnOnCapital: 1.06
          },
          explanation: "Welltower shows excellent performance with 20.4% revenue growth, significantly above the healthcare REIT average. However, its profit margin of 6.3% and return on capital of 1.06% are relatively low, reflecting the capital-intensive nature of healthcare real estate and ongoing portfolio repositioning."
        },
        stability: { 
          value: "Fair", 
          color: "yellow",
          details: {
            volatility: 0.94,
            beta: 0.94,
            dividendConsistency: "Medium"
          },
          explanation: "Welltower exhibits moderate stability with volatility (0.94) near the healthcare REIT average. Its beta of 0.94 indicates slightly reduced market sensitivity. The company's dividend consistency is medium, with a history of dividend adjustments during portfolio restructuring."
        },
        value: { 
          value: "Poor", 
          color: "red",
          details: {
            peRatio: 182.2,
            pbRatio: 2.98,
            dividendYield: 1.9
          },
          explanation: "Welltower trades at a very high PE ratio of 182.2, reflecting significant recent investments and portfolio transformation. Its price-to-book ratio of 2.98 is reasonable for healthcare REITs, while its 1.9% dividend yield is below the REIT sector average."
        },
        momentum: { 
          value: "Strong", 
          color: "green",
          details: {
            threeMonthReturn: 19.3,
            relativePerformance: 11.3,
            rsi: 54.7
          },
          explanation: "Welltower shows strong momentum with an excellent three-month return of 19.3%, significantly outperforming the broader market. Its relative performance of 11.3% indicates substantial outperformance versus peers. With an RSI of 54.7, the stock maintains positive momentum while remaining in balanced territory."
        }
      },
      synopsis: {
        price: "Trending higher as senior housing demand accelerates post-pandemic",
        company: "Welltower benefits from demographic tailwinds and strategic portfolio repositioning toward premium senior housing",
        role: "Growth-oriented healthcare real estate exposure with demographic tailwinds"
      },
      overallAnalysis: "A leading healthcare REIT experiencing strong recovery in senior housing fundamentals. Demographic trends, strategic portfolio repositioning, and favorable supply-demand dynamics support long-term growth despite near-term valuation concerns.",
      chartData: [141.3, 143.5, 145.2, 146.8, 147.5, 148.2, 148.8, 149.2, 149.5, 149.65, 149.75, 149.84],
      industry: "Real Estate"
    },
    {
      name: "Boston Properties",
      ticker: "BXP",
      price: 69.48,
      change: -0.72,
      rating: 2.8,
      smartScore: "Poor",
      description: "Boston Properties is an office REIT that owns and manages premier workplaces in major U.S. gateway cities.",
      metrics: {
        performance: { 
          value: "Low", 
          color: "red",
          details: {
            revenueGrowth: 4.1,
            profitMargin: 0.4,
            returnOnCapital: 0.06
          },
          explanation: "Boston Properties shows modest performance with 4.1% revenue growth, below the office REIT average. Its extremely low profit margin of 0.4% and return on capital of 0.06% reflect significant challenges in the office sector post-pandemic and the impact of higher interest rates."
        },
        stability: { 
          value: "Unstable", 
          color: "red",
          details: {
            volatility: 1.08,
            beta: 1.08,
            dividendConsistency: "Medium"
          },
          explanation: "Boston Properties exhibits higher volatility (1.08) than the REIT sector average. Its beta of 1.08 indicates slightly higher market sensitivity. The company's dividend consistency is medium, with recent concerns about potential dividend adjustments amid office sector challenges."
        },
        value: { 
          value: "Fair", 
          color: "yellow",
          details: {
            peRatio: 785.0,
            pbRatio: 2.03,
            dividendYield: 5.7
          },
          explanation: "Boston Properties trades at an extremely high PE ratio of 785.0 due to compressed earnings in the challenging office environment. Its price-to-book ratio of 2.03 is reasonable, while its high 5.7% dividend yield reflects investor concerns about the office sector's future."
        },
        momentum: { 
          value: "Weak", 
          color: "red",
          details: {
            threeMonthReturn: -6.4,
            relativePerformance: -14.4,
            rsi: 52.5
          },
          explanation: "Boston Properties shows weak momentum with a negative three-month return of -6.4%, underperforming the broader market. Its relative performance of -14.4% indicates significant underperformance versus peers. With an RSI of 52.5, the stock is in neutral territory despite recent weakness."
        }
      },
      synopsis: {
        price: "Under pressure as remote work trends challenge the office sector",
        company: "Boston Properties focuses on premium Class A office properties in innovation-driven markets",
        role: "Higher-risk opportunity in the office sector with attractive dividend yield"
      },
      overallAnalysis: "A blue-chip office REIT facing structural challenges from evolving work patterns. Premium portfolio in innovation-driven markets provides some insulation, but significant uncertainty remains about long-term office demand and occupancy trends post-pandemic.",
      chartData: [72.8, 72.0, 71.3, 70.7, 70.2, 69.8, 69.5, 69.3, 69.2, 69.3, 69.4, 69.48],
      industry: "Real Estate"
    },
    {
      name: "Equity Residential",
      ticker: "EQR",
      price: 71.36,
      change: 0.55,
      rating: 3.6,
      smartScore: "Medium",
      description: "Equity Residential is a multifamily residential REIT focused on urban and high-density suburban markets in gateway cities.",
      metrics: {
        performance: { 
          value: "Fair", 
          color: "yellow",
          details: {
            revenueGrowth: 3.8,
            profitMargin: 34.9,
            returnOnCapital: 5.59
          },
          explanation: "Equity Residential shows solid performance with 3.8% revenue growth, slightly below the residential REIT average. Its profit margin of 34.9% and return on capital of 5.59% reflect efficient operations in its portfolio of premium apartment communities."
        },
        stability: { 
          value: "Fair", 
          color: "yellow",
          details: {
            volatility: 0.88,
            beta: 0.88,
            dividendConsistency: "High"
          },
          explanation: "Equity Residential exhibits good stability with volatility (0.88) lower than the broader REIT sector. Its beta of 0.88 indicates slightly reduced market sensitivity. The company maintains high dividend consistency with a strong history of reliable distributions."
        },
        value: { 
          value: "Fair", 
          color: "yellow",
          details: {
            peRatio: 26.8,
            pbRatio: 2.46,
            dividendYield: 3.9
          },
          explanation: "Equity Residential trades at a PE ratio of 26.8, typical for quality apartment REITs. Its price-to-book ratio of 2.46 reflects the premium quality of its portfolio, while its 3.9% dividend yield provides solid income potential."
        },
        momentum: { 
          value: "Fair", 
          color: "yellow",
          details: {
            threeMonthReturn: 1.7,
            relativePerformance: -6.3,
            rsi: 52.8
          },
          explanation: "Equity Residential shows moderate momentum with a positive three-month return of 1.7%, but still underperforming the broader market. Its relative performance of -6.3% indicates modest underperformance versus peers. With an RSI of 52.8, the stock is in balanced territory."
        }
      },
      synopsis: {
        price: "Trading steadily as rental growth normalizes in coastal markets",
        company: "Equity Residential focuses on affluent renters in supply-constrained coastal locations",
        role: "Quality holding for residential real estate exposure with consistent income"
      },
      overallAnalysis: "A premier multifamily REIT with high-quality apartments in supply-constrained coastal markets. Well-positioned to benefit from homeownership affordability challenges and demographic trends despite near-term normalization in rental growth.",
      chartData: [69.8, 70.2, 70.5, 70.8, 71.0, 71.2, 71.3, 71.4, 71.35, 71.3, 71.32, 71.36],
      industry: "Real Estate"
    },
    {
      name: "Prologis Inc.",
      ticker: "PLD",
      price: 128.15,
      change: 2.15,
      rating: 4.2,
      smartScore: "Good",
      description: "Prologis is a leading provider of logistics real estate, focusing on high-barrier, high-growth markets.",
      metrics: {
        performance: { 
          value: "High", 
          color: "green",
          details: {
            revenueGrowth: 8.5,
            profitMargin: 65.5,
            returnOnCapital: 5.2
          },
          explanation: "Prologis demonstrates excellent performance with 8.5% revenue growth, exceeding real estate industry averages. Its exceptional 65.5% profit margin (vs. 61% industry standard) and solid 5.2% return on capital reflect strong demand for logistics properties and efficient operations across its extensive global portfolio."
        },
        stability: { 
          value: "High", 
          color: "green",
          details: {
            volatility: 0.85,
            beta: 0.8,
            dividendConsistency: "High"
          },
          explanation: "Prologis exhibits strong stability with below-average volatility (0.85) compared to the real estate sector (1.0). Its beta of 0.8 indicates reduced market sensitivity. The company maintains high dividend consistency, having increased its dividend annually for multiple years, providing reliable income for investors."
        },
        value: { 
          value: "Fair", 
          color: "yellow",
          details: {
            peRatio: 24.2,
            pbRatio: 2.1,
            dividendYield: 2.8
          },
          explanation: "Prologis trades at fair valuation with a PE ratio of 24.2, slightly above the real estate industry average. Its price-to-book ratio of 2.1 is in line with logistics REIT peers, while its 2.8% dividend yield provides moderate income. This balanced valuation reflects the premium quality of its portfolio and strong growth prospects."
        },
        momentum: { 
          value: "Strong", 
          color: "green",
          details: {
            threeMonthReturn: 9.8,
            relativePerformance: 4.5,
            rsi: 62
          },
          explanation: "Prologis shows strong momentum with a three-month return of 9.8%, significantly outperforming the real estate sector average of 2.5%. Its relative performance of 4.5 indicates substantial outperformance versus peers. With an RSI of 62, the stock shows solid upward momentum without being overbought."
        }
      },
      synopsis: {
        price: "Trending upward as e-commerce and logistics demand drives occupancy",
        company: "Prologis benefits from continued e-commerce growth and strategic positioning in key logistics corridors",
        role: "Core holding for real estate portfolio with global logistics exposure and inflation protection"
      },
      overallAnalysis: "A high-quality logistics REIT benefiting from e-commerce growth trends and global supply chain restructuring. Strong operational metrics and strategic property locations provide resilience during economic uncertainty.",
      chartData: [125.15, 124.85, 125.35, 125.95, 126.35, 126.75, 127.05, 127.15, 127.45, 127.85, 128.45, 128.15],
      industry: "Real Estate"
    }
  ]};

================
File: package.json
================
{
  "name": "rest-express",
  "version": "1.0.0",
  "type": "module",
  "license": "MIT",
  "scripts": {
    "dev": "tsx server/index.ts",
    "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
    "start": "NODE_ENV=production node dist/index.js",
    "check": "tsc",
    "db:push": "drizzle-kit push"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@jridgewell/trace-mapping": "^0.3.25",
    "@neondatabase/serverless": "^0.10.4",
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-collapsible": "^1.1.1",
    "@radix-ui/react-context-menu": "^2.2.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-hover-card": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.1",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.3",
    "@replit/vite-plugin-shadcn-theme-json": "^0.0.4",
    "@tanstack/react-query": "^5.60.5",
    "@types/qrcode": "^1.5.5",
    "axios": "^1.8.4",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "connect-pg-simple": "^10.0.0",
    "date-fns": "^3.6.0",
    "drizzle-orm": "^0.39.1",
    "drizzle-zod": "^0.7.0",
    "embla-carousel-react": "^8.3.0",
    "expo": "^48.0.21",
    "expo-cli": "^6.3.12",
    "express": "^4.21.2",
    "express-session": "^1.18.1",
    "framer-motion": "^11.18.2",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.453.0",
    "memorystore": "^1.6.7",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "qrcode": "^1.5.4",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.1",
    "react-icons": "^5.5.0",
    "react-native-web": "^0.19.13",
    "react-resizable-panels": "^2.1.4",
    "recharts": "^2.15.1",
    "remixicon": "^4.6.0",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^1.1.0",
    "wouter": "^3.3.5",
    "ws": "^8.18.0",
    "zod": "^3.23.8",
    "zod-validation-error": "^3.4.0"
  },
  "devDependencies": {
    "@replit/vite-plugin-cartographer": "^0.0.11",
    "@replit/vite-plugin-runtime-error-modal": "^0.0.3",
    "@tailwindcss/typography": "^0.5.15",
    "@types/connect-pg-simple": "^7.0.3",
    "@types/express": "4.17.21",
    "@types/express-session": "^1.18.0",
    "@types/node": "20.16.11",
    "@types/passport": "^1.0.16",
    "@types/passport-local": "^1.0.38",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.1",
    "@types/ws": "^8.5.13",
    "@vitejs/plugin-react": "^4.3.2",
    "autoprefixer": "^10.4.20",
    "drizzle-kit": "^0.30.4",
    "esbuild": "^0.25.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14",
    "tsx": "^4.19.1",
    "typescript": "5.6.3",
    "vite": "^5.4.14"
  },
  "optionalDependencies": {
    "bufferutil": "^4.0.8"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# SwipePortfolio

A modern web application for learning about investing through interactive games and simulations.

## Features

- **CEO Simulator**: Make strategic decisions as a CEO in two exciting modes:
  - Board Room Mode: High-stakes strategic decisions
  - Normal Mode: Day-to-day operational decisions
- **Ticket Time Attack**: Test your knowledge with quick questions about investing
- **Market Adventure**: Simulate market trading and build your virtual portfolio
- **Historical Investor Journey**: Walk through the careers of famous investors

## Tech Stack

- React
- TypeScript
- Tailwind CSS
- Framer Motion
- Vite

## Getting Started

### Prerequisites

- Node.js (v14 or higher)
- npm or yarn

### Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/SwipePortfolio.git
cd SwipePortfolio
```

2. Install dependencies:
```bash
npm install
# or
yarn install
```

3. Start the development server:
```bash
npm run dev
# or
yarn dev
```

4. Open [http://localhost:5173](http://localhost:5173) in your browser.

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

================
File: real-estate-section.txt
================
"Real Estate": [
    {
      name: "Prologis",
      ticker: "PLD",
      price: 110.26,
      change: 0.8,
      rating: 7.2,
      description: "A leading global owner, operator and developer of logistics real estate.",
      metrics: {
        performance: {
          value: "Average",
          color: "yellow",
          details: {
            revenueGrowth: 2.2,
            profitMargin: 45.4,
            returnOnCapital: 4.3
          },
          explanation: "Mixed performance with modest revenue growth but excellent profitability. Strong operational efficiency in managing logistics properties with healthy returns on invested capital."
        },
        stability: {
          value: "Poor",
          color: "red",
          details: {
            volatility: 2.5,
            beta: 1.24,
            dividendConsistency: "Medium"
          },
          explanation: "Higher-than-industry-average volatility and beta indicate more price fluctuations than peers. Dividend growth history is acceptable but not outstanding compared to some REITs."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 28,
            pbRatio: 1.9,
            dividendYield: "3.7%"
          },
          explanation: "Trades at a fair valuation relative to earnings and book value. Dividend yield is slightly below the REIT industry average but remains attractive compared to broader market."
        },
        momentum: {
          value: "Average",
          color: "yellow",
          details: {
            threeMonthReturn: 6.1,
            relativePerformance: -2,
            rsi: 37.4
          },
          explanation: "Recent price performance is mixed with decent absolute returns but slightly underperforming the broader real estate index. RSI suggests the stock is neither overbought nor oversold."
        }
      },
      synopsis: {
        price: "Trading at 110.26, reflecting modest recent gains despite market volatility.",
        company: "Global leader in logistics real estate with significant e-commerce exposure.",
        role: "Core holding for real estate allocation with balance of growth and income."
      },
      overallAnalysis: "A high-quality logistics REIT benefiting from e-commerce growth with strong performance and stability. Offers a balanced opportunity with above-average growth, defensive characteristics, and reliable income.",
      chartData: [96, 101, 97, 104, 108, 96, 98, 103, 107, 109, 110.26],
      industry: "Real Estate"
    },
    {
      name: "Realty Income Corp",
      ticker: "O",
      price: 56.28,
      change: -0.4,
      rating: 6.8,
      description: "A monthly dividend paying REIT focused on single-tenant commercial properties.",
      metrics: {
        performance: {
          value: "Average",
          color: "yellow",
          details: {
            revenueGrowth: 29.5,
            profitMargin: 16.0,
            returnOnCapital: 1.3
          },
          explanation: "Strong revenue growth driven by acquisitions, but below-average profit margins and returns on capital compared to peers. Scale benefits are partially offset by efficiency challenges."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.0,
            beta: 0.82,
            dividendConsistency: "Good"
          },
          explanation: "Below-average volatility and beta indicate more stability than most REITs. Exceptional dividend consistency with a track record of regular monthly increases makes this a reliable income generator."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 57.6,
            pbRatio: 1.29,
            dividendYield: "5.7%"
          },
          explanation: "High P/E ratio is partially offset by reasonable price-to-book value. Above-average dividend yield makes this attractive for income-focused investors despite the premium valuation multiple."
        },
        momentum: {
          value: "Average",
          color: "yellow",
          details: {
            threeMonthReturn: 6.6,
            relativePerformance: -1.5,
            rsi: 49.3
          },
          explanation: "Solid absolute price performance with moderate underperformance versus peers. Neutral RSI suggests balanced buying and selling pressure currently."
        }
      },
      synopsis: {
        price: "Trading at 56.28 with slight recent weakness despite attractive yield.",
        company: "Premier monthly dividend REIT with diverse commercial property portfolio.",
        role: "Income cornerstone for dividend-focused investors seeking reliability."
      },
      overallAnalysis: "Monthly dividend payer offering unmatched income reliability with triple-net leases that create highly predictable cash flows. Ideal for income-focused investors prioritizing consistent payments over maximum growth.",
      chartData: [52, 54, 51, 54, 58, 56, 55, 57, 58, 56, 56.28],
      industry: "Real Estate"
    },
    {
      name: "Simon Property Group",
      ticker: "SPG",
      price: 166.12,
      change: 1.2,
      rating: 6.5,
      description: "The largest owner and operator of shopping malls and premium outlets in the US.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 5.4,
            profitMargin: 41.9,
            returnOnCapital: 9.97
          },
          explanation: "Solid revenue growth considering retail headwinds, with exceptional profit margins and capital returns. Management effectively maximizes value from premium retail properties despite e-commerce challenges."
        },
        stability: {
          value: "Poor",
          color: "red",
          details: {
            volatility: 2.6,
            beta: 1.49,
            dividendConsistency: "Poor"
          },
          explanation: "Higher volatility and beta reflect increased sensitivity to economic cycles compared to other REITs. Past dividend cuts during market stress periods indicate less reliability for income investors."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 22,
            pbRatio: 18.68,
            dividendYield: "5.1%"
          },
          explanation: "Reasonable P/E ratio combined with a high price-to-book value shows market confidence but potential overvaluation of assets. Above-average dividend yield provides compelling income."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -3.1,
            relativePerformance: -11,
            rsi: 41.9
          },
          explanation: "Recent price weakness both on absolute basis and relative to peers. Moderately low RSI suggests some selling pressure but approaching levels that might attract contrarian investors."
        }
      },
      synopsis: {
        price: "Trading at 166.12 with some recent strength despite longer-term underperformance.",
        company: "Dominant mall operator with premium locations and evolving business model.",
        role: "Value opportunity in retail real estate with above-average income potential."
      },
      overallAnalysis: "Premium mall operator offering high income yield and value despite retail headwinds. Has shown resilience by transforming properties to maintain relevance in the evolving retail landscape.",
      chartData: [158, 162, 155, 159, 163, 155, 157, 162, 167, 164, 166.12],
      industry: "Real Estate"
    },
    {
      name: "AvalonBay Communities",
      ticker: "AVB",
      price: 214.36,
      change: 0.6,
      rating: 7.0,
      description: "A leading apartment REIT focused on high-quality properties in premium coastal markets.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 4.9,
            profitMargin: 36.5,
            returnOnCapital: 5.6
          },
          explanation: "Healthy revenue growth in competitive apartment markets with strong profit margins and solid return on capital. Operational excellence in property management contributes to superior financial performance."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.0,
            beta: 0.89,
            dividendConsistency: "Good"
          },
          explanation: "Below-average volatility and beta indicate relative price stability. Consistent dividend growth history even during challenging rental markets demonstrates financial resilience."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 28.2,
            pbRatio: 2.55,
            dividendYield: "3.3%"
          },
          explanation: "Trades at a modest premium to earnings and book value compared to REIT averages. Dividend yield is slightly below sector average but compensated by growth potential in high-barrier-to-entry markets."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -2.4,
            relativePerformance: -10,
            rsi: 47.8
          },
          explanation: "Recent price weakness both on absolute basis and relative to broader real estate sector. Neutral RSI suggests balanced market sentiment despite underperformance."
        }
      },
      synopsis: {
        price: "Trading at 214.36 with modest recent gains despite quarter-to-date weakness.",
        company: "Premium apartment owner/operator in supply-constrained coastal markets.",
        role: "Quality residential real estate exposure with inflation protection features."
      },
      overallAnalysis: "Premium apartment REIT focused on supply-constrained coastal markets with persistent housing demand. Benefits from increasing affordability challenges that make renting necessary in high-cost metropolitan areas.",
      chartData: [205, 210, 202, 208, 215, 204, 207, 211, 219, 213, 214.36],
      industry: "Real Estate"
    },
    {
      name: "Public Storage",
      ticker: "PSA",
      price: 294.93,
      change: -0.3,
      rating: 6.9,
      description: "The world's largest owner and operator of self-storage facilities.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 3.9,
            profitMargin: 39.9,
            returnOnCapital: 10.2
          },
          explanation: "Modest but consistent revenue growth with exceptional profit margins and return on capital. Self-storage business model delivers superior profitability with minimal operational complexity."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.6,
            beta: 0.8,
            dividendConsistency: "Good"
          },
          explanation: "Slightly higher volatility but low beta indicates less correlation with market movements. Strong dividend consistency provides reliable income through various market environments."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 27.7,
            pbRatio: 9.65,
            dividendYield: "4.2%"
          },
          explanation: "Reasonable P/E ratio but very high price-to-book value indicates potential overvaluation of assets. Attractive dividend yield partially compensates for the premium valuation."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -1.7,
            relativePerformance: -9.7,
            rsi: 43.5
          },
          explanation: "Modest price weakness both on absolute basis and compared to peers. Moderately low RSI suggests some recent selling pressure but not at extreme levels."
        }
      },
      synopsis: {
        price: "Trading at 294.93 with slight recent weakness following longer downtrend.",
        company: "Dominant self-storage operator with recession-resistant business model.",
        role: "Defensive real estate holding with steady income and inflation protection."
      },
      overallAnalysis: "Exceptionally stable self-storage REIT with above-average income and minimal economic sensitivity. Low operating costs and flexible pricing power create consistent performance across market cycles.",
      chartData: [285, 290, 283, 288, 296, 287, 290, 295, 301, 296, 294.93],
      industry: "Real Estate"
    },
    {
      name: "Digital Realty Trust",
      ticker: "DLR",
      price: 155.49,
      change: 2.1,
      rating: 5.8,
      description: "A leading global provider of data center, colocation and interconnection solutions.",
      metrics: {
        performance: {
          value: "Poor",
          color: "red",
          details: {
            revenueGrowth: 1.4,
            profitMargin: 10.1,
            returnOnCapital: 1.43
          },
          explanation: "Below-average revenue growth with significantly lower profit margins and returns on capital than REIT peers. High capital intensity of data center development creates financial performance challenges."
        },
        stability: {
          value: "Poor",
          color: "red",
          details: {
            volatility: 3.1,
            beta: 0.92,
            dividendConsistency: "Good"
          },
          explanation: "Higher volatility despite moderate beta indicates price instability regardless of market direction. Strong dividend growth history is a positive counterbalance to price volatility."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 95.6,
            pbRatio: 2.54,
            dividendYield: "3.2%"
          },
          explanation: "Very high P/E ratio and moderate price-to-book suggests premium valuation with growth expectations. Below-average dividend yield for a REIT reflects the market's focus on future growth over current income."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -12.1,
            relativePerformance: -20,
            rsi: 50.1
          },
          explanation: "Significant price weakness both on absolute basis and relative to peers. Neutral RSI despite underperformance suggests selling pressure may be stabilizing."
        }
      },
      synopsis: {
        price: "Trading at 155.49 with recent strength following notable prior weakness.",
        company: "Global data center provider with both colocation and hyperscale offerings.",
        role: "Technology-oriented real estate exposure with growth and income potential."
      },
      overallAnalysis: "Technology-focused REIT providing data center exposure with better growth than traditional real estate while maintaining income characteristics. Benefits from cloud computing, AI workloads, and growing digital infrastructure demands.",
      chartData: [168, 172, 165, 160, 158, 149, 146, 151, 157, 152, 155.49],
      industry: "Real Estate"
    },
    {
      name: "American Tower Corp",
      ticker: "AMT",
      price: 212.8,
      change: 1.5,
      rating: 7.3,
      description: "The largest global owner and operator of wireless communications infrastructure.",
      metrics: {
        performance: {
          value: "Average",
          color: "yellow",
          details: {
            revenueGrowth: -3.0,
            profitMargin: 20.9,
            returnOnCapital: 5.24
          },
          explanation: "Revenue contraction is a concern, partially offset by decent profit margins and return on capital. Recent financial performance reflects temporary integration challenges with acquisitions."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.6,
            beta: 0.89,
            dividendConsistency: "Good"
          },
          explanation: "Slightly higher volatility but below-average beta indicates less correlation with broader market movements. Consistent dividend growth history demonstrates financial stability."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 44.2,
            pbRatio: 29.41,
            dividendYield: "3.2%"
          },
          explanation: "High P/E ratio and extremely high price-to-book value indicate significant premium to asset value. Below-average dividend yield for a REIT suggests investors are paying for expected future growth."
        },
        momentum: {
          value: "Good",
          color: "green",
          details: {
            threeMonthReturn: 15.1,
            relativePerformance: 7.1,
            rsi: 61.1
          },
          explanation: "Strong recent price performance both on absolute basis and compared to peers. Moderately high RSI indicates positive momentum without reaching extreme overbought levels."
        }
      },
      synopsis: {
        price: "Trading at 212.80 with solid momentum after extended period of weakness.",
        company: "Global leader in wireless tower infrastructure essential for mobile networks.",
        role: "Technology-adjacent real estate with combination of growth and income."
      },
      overallAnalysis: "Essential wireless infrastructure provider with defensive characteristics and consistent income from long-term leases. Benefits from increasing data consumption and 5G expansion for continued stable growth.",
      chartData: [185, 190, 182, 195, 200, 189, 196, 204, 208, 210, 212.8],
      industry: "Real Estate"
    },
    {
      name: "Welltower Inc",
      ticker: "WELL",
      price: 149.84,
      change: 1.8,
      rating: 6.4,
      description: "A healthcare REIT specializing in senior housing, post-acute care, and outpatient medical properties.",
      metrics: {
        performance: {
          value: "Poor",
          color: "red",
          details: {
            revenueGrowth: 20.4,
            profitMargin: 6.3,
            returnOnCapital: 1.06
          },
          explanation: "Exceptional revenue growth but significantly below-average profit margins and return on capital. Growth-focused strategy currently prioritizes scale over operational efficiency."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.2,
            beta: 0.94,
            dividendConsistency: "Poor"
          },
          explanation: "Moderate volatility and beta indicate average price stability. Historic dividend cuts during pandemic reflect vulnerability of healthcare properties to certain crisis scenarios."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 182.2,
            pbRatio: 2.98,
            dividendYield: "1.9%"
          },
          explanation: "Extremely high P/E ratio and average price-to-book value indicate significant premium valuation. Very low dividend yield for a REIT reflects both valuation and lower payout ratio focused on growth."
        },
        momentum: {
          value: "Good",
          color: "green",
          details: {
            threeMonthReturn: 19.3,
            relativePerformance: 11.3,
            rsi: 54.7
          },
          explanation: "Exceptional recent price performance both on absolute basis and relative to peers. Moderate RSI suggests strong buying interest without reaching extreme levels."
        }
      },
      synopsis: {
        price: "Trading at 149.84 with strong recent momentum reflecting sector recovery.",
        company: "Leading senior housing and healthcare property owner with demographic tailwinds.",
        role: "Growth-oriented healthcare real estate exposure with aging population thesis."
      },
      overallAnalysis: "Healthcare REIT with strong demographic tailwinds from an aging population. Combines defensive characteristics and recession resistance with above-average growth potential in senior housing and medical facilities.",
      chartData: [125, 130, 127, 132, 138, 128, 135, 140, 145, 147, 149.84],
      industry: "Real Estate"
    },
    {
      name: "Boston Properties",
      ticker: "BXP",
      price: 69.48,
      change: -1.2,
      rating: 5.5,
      description: "The largest publicly-traded developer, owner and manager of Class A office properties.",
      metrics: {
        performance: {
          value: "Poor",
          color: "red",
          details: {
            revenueGrowth: 4.1,
            profitMargin: 0.4,
            returnOnCapital: 0.06
          },
          explanation: "Modest revenue growth but extremely poor profit margins and negligible return on capital. Office property challenges have severely impacted financial performance metrics."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 3.0,
            beta: 1.08,
            dividendConsistency: "Poor"
          },
          explanation: "Higher volatility and above-average beta indicate more price instability and market correlation. Past dividend cuts reflect vulnerability to office sector challenges."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 785,
            pbRatio: 2.03,
            dividendYield: "5.7%"
          },
          explanation: "Extremely high P/E ratio due to depressed earnings, but reasonable price-to-book value suggests potential value. Very attractive dividend yield offers compelling income if sustainable."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -6.4,
            relativePerformance: -14.4,
            rsi: 52.5
          },
          explanation: "Significant price weakness both on absolute basis and compared to peers. Neutral RSI suggests balanced buying and selling despite underperformance."
        }
      },
      synopsis: {
        price: "Trading at 69.48 with recent weakness indicating ongoing sector concerns.",
        company: "Premium office property owner facing work-from-home and oversupply challenges.",
        role: "Deep value opportunity in office real estate with significant income yield."
      },
      overallAnalysis: "Premium office REIT trading at historical discount due to work-from-home trends and financing concerns. Offers exceptional value for contrarian investors willing to accept higher risk for potential recovery upside.",
      chartData: [75, 78, 72, 74, 76, 71, 73, 75, 70, 70.5, 69.48],
      industry: "Real Estate"
    },
    {
      name: "Equity Residential",
      ticker: "EQR",
      price: 71.36,
      change: 0.4,
      rating: 6.7,
      description: "A leading multifamily residential REIT focused on urban and high-density suburban communities.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 3.8,
            profitMargin: 34.9,
            returnOnCapital: 5.59
          },
          explanation: "Moderate revenue growth with strong profit margins and solid return on capital. Effective property management and operational efficiency support financial performance."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.3,
            beta: 0.88,
            dividendConsistency: "Medium"
          },
          explanation: "Moderate volatility with below-average beta indicates reasonable price stability. Mixed dividend history with some variability but general upward trend over time."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 26.8,
            pbRatio: 2.46,
            dividendYield: "3.9%"
          },
          explanation: "Trades at a reasonable P/E multiple with typical price-to-book value for apartment REITs. Slightly below-average dividend yield is balanced by superior property quality and locations."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: 1.7,
            relativePerformance: -6.3,
            rsi: 52.8
          },
          explanation: "Modest absolute price gains but underperformance compared to broader real estate sector. Neutral RSI suggests balanced market sentiment currently."
        }
      },
      synopsis: {
        price: "Trading at 71.36 with modest recent gains despite sector rotation headwinds.",
        company: "Premier apartment owner focusing on urban and transit-oriented communities.",
        role: "Quality residential real estate exposure with focus on millennial renters."
      },
      overallAnalysis: "High-quality apartment REIT with superior property locations and demographic advantages. Well-positioned for urban rental recovery as return-to-office trends increase demand for convenient housing in employment centers.",
      chartData: [69, 72, 68, 71, 73, 68, 70, 72, 74, 71, 71.36],
      industry: "Real Estate"
    }
  ]

================
File: real-estate-stocks.txt
================
"Real Estate": [
    {
      name: "Prologis",
      ticker: "PLD",
      price: 110.26,
      change: 0.8,
      rating: 7.2,
      description: "A leading global owner, operator and developer of logistics real estate.",
      metrics: {
        performance: {
          value: "Average",
          color: "yellow",
          details: {
            revenueGrowth: 2.2,
            profitMargin: 45.4,
            returnOnCapital: 4.3
          },
          explanation: "Mixed performance with modest revenue growth but excellent profitability. Strong operational efficiency in managing logistics properties with healthy returns on invested capital."
        },
        stability: {
          value: "Poor",
          color: "red",
          details: {
            volatility: 2.5,
            beta: 1.24,
            dividendConsistency: "Medium"
          },
          explanation: "Higher-than-industry-average volatility and beta indicate more price fluctuations than peers. Dividend growth history is acceptable but not outstanding compared to some REITs."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 28,
            pbRatio: 1.9,
            dividendYield: "3.7%"
          },
          explanation: "Trades at a fair valuation relative to earnings and book value. Dividend yield is slightly below the REIT industry average but remains attractive compared to broader market."
        },
        momentum: {
          value: "Average",
          color: "yellow",
          details: {
            threeMonthReturn: 6.1,
            relativePerformance: -2,
            rsi: 37.4
          },
          explanation: "Recent price performance is mixed with decent absolute returns but slightly underperforming the broader real estate index. RSI suggests the stock is neither overbought nor oversold."
        }
      },
      synopsis: {
        price: "Trading at 110.26, reflecting modest recent gains despite market volatility.",
        company: "Global leader in logistics real estate with significant e-commerce exposure.",
        role: "Core holding for real estate allocation with balance of growth and income."
      },
      overallAnalysis: "A high-quality logistics REIT benefiting from e-commerce growth with strong performance and stability. Offers a balanced opportunity with above-average growth, defensive characteristics, and reliable income.",
      chartData: [96, 101, 97, 104, 108, 96, 98, 103, 107, 109, 110.26],
      industry: "Real Estate"
    },
    {
      name: "Realty Income Corp",
      ticker: "O",
      price: 56.28,
      change: -0.4,
      rating: 6.8,
      description: "A monthly dividend paying REIT focused on single-tenant commercial properties.",
      metrics: {
        performance: {
          value: "Average",
          color: "yellow",
          details: {
            revenueGrowth: 29.5,
            profitMargin: 16.0,
            returnOnCapital: 1.3
          },
          explanation: "Strong revenue growth driven by acquisitions, but below-average profit margins and returns on capital compared to peers. Scale benefits are partially offset by efficiency challenges."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.0,
            beta: 0.82,
            dividendConsistency: "Good"
          },
          explanation: "Below-average volatility and beta indicate more stability than most REITs. Exceptional dividend consistency with a track record of regular monthly increases makes this a reliable income generator."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 57.6,
            pbRatio: 1.29,
            dividendYield: "5.7%"
          },
          explanation: "High P/E ratio is partially offset by reasonable price-to-book value. Above-average dividend yield makes this attractive for income-focused investors despite the premium valuation multiple."
        },
        momentum: {
          value: "Average",
          color: "yellow",
          details: {
            threeMonthReturn: 6.6,
            relativePerformance: -1.5,
            rsi: 49.3
          },
          explanation: "Solid absolute price performance with moderate underperformance versus peers. Neutral RSI suggests balanced buying and selling pressure currently."
        }
      },
      synopsis: {
        price: "Trading at 56.28 with slight recent weakness despite attractive yield.",
        company: "Premier monthly dividend REIT with diverse commercial property portfolio.",
        role: "Income cornerstone for dividend-focused investors seeking reliability."
      },
      overallAnalysis: "Monthly dividend payer offering unmatched income reliability with triple-net leases that create highly predictable cash flows. Ideal for income-focused investors prioritizing consistent payments over maximum growth.",
      chartData: [52, 54, 51, 54, 58, 56, 55, 57, 58, 56, 56.28],
      industry: "Real Estate"
    },
    {
      name: "Simon Property Group",
      ticker: "SPG",
      price: 166.12,
      change: 1.2,
      rating: 6.5,
      description: "The largest owner and operator of shopping malls and premium outlets in the US.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 5.4,
            profitMargin: 41.9,
            returnOnCapital: 9.97
          },
          explanation: "Solid revenue growth considering retail headwinds, with exceptional profit margins and capital returns. Management effectively maximizes value from premium retail properties despite e-commerce challenges."
        },
        stability: {
          value: "Poor",
          color: "red",
          details: {
            volatility: 2.6,
            beta: 1.49,
            dividendConsistency: "Poor"
          },
          explanation: "Higher volatility and beta reflect increased sensitivity to economic cycles compared to other REITs. Past dividend cuts during market stress periods indicate less reliability for income investors."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 22,
            pbRatio: 18.68,
            dividendYield: "5.1%"
          },
          explanation: "Reasonable P/E ratio combined with a high price-to-book value shows market confidence but potential overvaluation of assets. Above-average dividend yield provides compelling income."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -3.1,
            relativePerformance: -11,
            rsi: 41.9
          },
          explanation: "Recent price weakness both on absolute basis and relative to peers. Moderately low RSI suggests some selling pressure but approaching levels that might attract contrarian investors."
        }
      },
      synopsis: {
        price: "Trading at 166.12 with some recent strength despite longer-term underperformance.",
        company: "Dominant mall operator with premium locations and evolving business model.",
        role: "Value opportunity in retail real estate with above-average income potential."
      },
      overallAnalysis: "Premium mall operator offering high income yield and value despite retail headwinds. Has shown resilience by transforming properties to maintain relevance in the evolving retail landscape.",
      chartData: [158, 162, 155, 159, 163, 155, 157, 162, 167, 164, 166.12],
      industry: "Real Estate"
    },
    {
      name: "AvalonBay Communities",
      ticker: "AVB",
      price: 214.36,
      change: 0.6,
      rating: 7.0,
      description: "A leading apartment REIT focused on high-quality properties in premium coastal markets.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 4.9,
            profitMargin: 36.5,
            returnOnCapital: 5.6
          },
          explanation: "Healthy revenue growth in competitive apartment markets with strong profit margins and solid return on capital. Operational excellence in property management contributes to superior financial performance."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.0,
            beta: 0.89,
            dividendConsistency: "Good"
          },
          explanation: "Below-average volatility and beta indicate relative price stability. Consistent dividend growth history even during challenging rental markets demonstrates financial resilience."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 28.2,
            pbRatio: 2.55,
            dividendYield: "3.3%"
          },
          explanation: "Trades at a modest premium to earnings and book value compared to REIT averages. Dividend yield is slightly below sector average but compensated by growth potential in high-barrier-to-entry markets."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -2.4,
            relativePerformance: -10,
            rsi: 47.8
          },
          explanation: "Recent price weakness both on absolute basis and relative to broader real estate sector. Neutral RSI suggests balanced market sentiment despite underperformance."
        }
      },
      synopsis: {
        price: "Trading at 214.36 with modest recent gains despite quarter-to-date weakness.",
        company: "Premium apartment owner/operator in supply-constrained coastal markets.",
        role: "Quality residential real estate exposure with inflation protection features."
      },
      overallAnalysis: "Premium apartment REIT focused on supply-constrained coastal markets with persistent housing demand. Benefits from increasing affordability challenges that make renting necessary in high-cost metropolitan areas.",
      chartData: [205, 210, 202, 208, 215, 204, 207, 211, 219, 213, 214.36],
      industry: "Real Estate"
    },
    {
      name: "Public Storage",
      ticker: "PSA",
      price: 294.93,
      change: -0.3,
      rating: 6.9,
      description: "The world's largest owner and operator of self-storage facilities.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 3.9,
            profitMargin: 39.9,
            returnOnCapital: 10.2
          },
          explanation: "Modest but consistent revenue growth with exceptional profit margins and return on capital. Self-storage business model delivers superior profitability with minimal operational complexity."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.6,
            beta: 0.8,
            dividendConsistency: "Good"
          },
          explanation: "Slightly higher volatility but low beta indicates less correlation with market movements. Strong dividend consistency provides reliable income through various market environments."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 27.7,
            pbRatio: 9.65,
            dividendYield: "4.2%"
          },
          explanation: "Reasonable P/E ratio but very high price-to-book value indicates potential overvaluation of assets. Attractive dividend yield partially compensates for the premium valuation."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -1.7,
            relativePerformance: -9.7,
            rsi: 43.5
          },
          explanation: "Modest price weakness both on absolute basis and compared to peers. Moderately low RSI suggests some recent selling pressure but not at extreme levels."
        }
      },
      synopsis: {
        price: "Trading at 294.93 with slight recent weakness following longer downtrend.",
        company: "Dominant self-storage operator with recession-resistant business model.",
        role: "Defensive real estate holding with steady income and inflation protection."
      },
      overallAnalysis: "Exceptionally stable self-storage REIT with above-average income and minimal economic sensitivity. Low operating costs and flexible pricing power create consistent performance across market cycles.",
      chartData: [285, 290, 283, 288, 296, 287, 290, 295, 301, 296, 294.93],
      industry: "Real Estate"
    },
    {
      name: "Digital Realty Trust",
      ticker: "DLR",
      price: 155.49,
      change: 2.1,
      rating: 5.8,
      description: "A leading global provider of data center, colocation and interconnection solutions.",
      metrics: {
        performance: {
          value: "Poor",
          color: "red",
          details: {
            revenueGrowth: 1.4,
            profitMargin: 10.1,
            returnOnCapital: 1.43
          },
          explanation: "Below-average revenue growth with significantly lower profit margins and returns on capital than REIT peers. High capital intensity of data center development creates financial performance challenges."
        },
        stability: {
          value: "Poor",
          color: "red",
          details: {
            volatility: 3.1,
            beta: 0.92,
            dividendConsistency: "Good"
          },
          explanation: "Higher volatility despite moderate beta indicates price instability regardless of market direction. Strong dividend growth history is a positive counterbalance to price volatility."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 95.6,
            pbRatio: 2.54,
            dividendYield: "3.2%"
          },
          explanation: "Very high P/E ratio and moderate price-to-book suggests premium valuation with growth expectations. Below-average dividend yield for a REIT reflects the market's focus on future growth over current income."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -12.1,
            relativePerformance: -20,
            rsi: 50.1
          },
          explanation: "Significant price weakness both on absolute basis and relative to peers. Neutral RSI despite underperformance suggests selling pressure may be stabilizing."
        }
      },
      synopsis: {
        price: "Trading at 155.49 with recent strength following notable prior weakness.",
        company: "Global data center provider with both colocation and hyperscale offerings.",
        role: "Technology-oriented real estate exposure with growth and income potential."
      },
      overallAnalysis: "Technology-focused REIT providing data center exposure with better growth than traditional real estate while maintaining income characteristics. Benefits from cloud computing, AI workloads, and growing digital infrastructure demands.",
      chartData: [168, 172, 165, 160, 158, 149, 146, 151, 157, 152, 155.49],
      industry: "Real Estate"
    },
    {
      name: "American Tower Corp",
      ticker: "AMT",
      price: 212.8,
      change: 1.5,
      rating: 7.3,
      description: "The largest global owner and operator of wireless communications infrastructure.",
      metrics: {
        performance: {
          value: "Average",
          color: "yellow",
          details: {
            revenueGrowth: -3.0,
            profitMargin: 20.9,
            returnOnCapital: 5.24
          },
          explanation: "Revenue contraction is a concern, partially offset by decent profit margins and return on capital. Recent financial performance reflects temporary integration challenges with acquisitions."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.6,
            beta: 0.89,
            dividendConsistency: "Good"
          },
          explanation: "Slightly higher volatility but below-average beta indicates less correlation with broader market movements. Consistent dividend growth history demonstrates financial stability."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 44.2,
            pbRatio: 29.41,
            dividendYield: "3.2%"
          },
          explanation: "High P/E ratio and extremely high price-to-book value indicate significant premium to asset value. Below-average dividend yield for a REIT suggests investors are paying for expected future growth."
        },
        momentum: {
          value: "Good",
          color: "green",
          details: {
            threeMonthReturn: 15.1,
            relativePerformance: 7.1,
            rsi: 61.1
          },
          explanation: "Strong recent price performance both on absolute basis and compared to peers. Moderately high RSI indicates positive momentum without reaching extreme overbought levels."
        }
      },
      synopsis: {
        price: "Trading at 212.80 with solid momentum after extended period of weakness.",
        company: "Global leader in wireless tower infrastructure essential for mobile networks.",
        role: "Technology-adjacent real estate with combination of growth and income."
      },
      overallAnalysis: "Essential wireless infrastructure provider with defensive characteristics and consistent income from long-term leases. Benefits from increasing data consumption and 5G expansion for continued stable growth.",
      chartData: [185, 190, 182, 195, 200, 189, 196, 204, 208, 210, 212.8],
      industry: "Real Estate"
    },
    {
      name: "Welltower Inc",
      ticker: "WELL",
      price: 149.84,
      change: 1.8,
      rating: 6.4,
      description: "A healthcare REIT specializing in senior housing, post-acute care, and outpatient medical properties.",
      metrics: {
        performance: {
          value: "Poor",
          color: "red",
          details: {
            revenueGrowth: 20.4,
            profitMargin: 6.3,
            returnOnCapital: 1.06
          },
          explanation: "Exceptional revenue growth but significantly below-average profit margins and return on capital. Growth-focused strategy currently prioritizes scale over operational efficiency."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.2,
            beta: 0.94,
            dividendConsistency: "Poor"
          },
          explanation: "Moderate volatility and beta indicate average price stability. Historic dividend cuts during pandemic reflect vulnerability of healthcare properties to certain crisis scenarios."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 182.2,
            pbRatio: 2.98,
            dividendYield: "1.9%"
          },
          explanation: "Extremely high P/E ratio and average price-to-book value indicate significant premium valuation. Very low dividend yield for a REIT reflects both valuation and lower payout ratio focused on growth."
        },
        momentum: {
          value: "Good",
          color: "green",
          details: {
            threeMonthReturn: 19.3,
            relativePerformance: 11.3,
            rsi: 54.7
          },
          explanation: "Exceptional recent price performance both on absolute basis and relative to peers. Moderate RSI suggests strong buying interest without reaching extreme levels."
        }
      },
      synopsis: {
        price: "Trading at 149.84 with strong recent momentum reflecting sector recovery.",
        company: "Leading senior housing and healthcare property owner with demographic tailwinds.",
        role: "Growth-oriented healthcare real estate exposure with aging population thesis."
      },
      overallAnalysis: "Healthcare REIT with strong demographic tailwinds from an aging population. Combines defensive characteristics and recession resistance with above-average growth potential in senior housing and medical facilities.",
      chartData: [125, 130, 127, 132, 138, 128, 135, 140, 145, 147, 149.84],
      industry: "Real Estate"
    },
    {
      name: "Boston Properties",
      ticker: "BXP",
      price: 69.48,
      change: -1.2,
      rating: 5.5,
      description: "The largest publicly-traded developer, owner and manager of Class A office properties.",
      metrics: {
        performance: {
          value: "Poor",
          color: "red",
          details: {
            revenueGrowth: 4.1,
            profitMargin: 0.4,
            returnOnCapital: 0.06
          },
          explanation: "Modest revenue growth but extremely poor profit margins and negligible return on capital. Office property challenges have severely impacted financial performance metrics."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 3.0,
            beta: 1.08,
            dividendConsistency: "Poor"
          },
          explanation: "Higher volatility and above-average beta indicate more price instability and market correlation. Past dividend cuts reflect vulnerability to office sector challenges."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 785,
            pbRatio: 2.03,
            dividendYield: "5.7%"
          },
          explanation: "Extremely high P/E ratio due to depressed earnings, but reasonable price-to-book value suggests potential value. Very attractive dividend yield offers compelling income if sustainable."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -6.4,
            relativePerformance: -14.4,
            rsi: 52.5
          },
          explanation: "Significant price weakness both on absolute basis and compared to peers. Neutral RSI suggests balanced buying and selling despite underperformance."
        }
      },
      synopsis: {
        price: "Trading at 69.48 with recent weakness indicating ongoing sector concerns.",
        company: "Premium office property owner facing work-from-home and oversupply challenges.",
        role: "Deep value opportunity in office real estate with significant income yield."
      },
      overallAnalysis: "Premium office REIT trading at historical discount due to work-from-home trends and financing concerns. Offers exceptional value for contrarian investors willing to accept higher risk for potential recovery upside.",
      chartData: [75, 78, 72, 74, 76, 71, 73, 75, 70, 70.5, 69.48],
      industry: "Real Estate"
    },
    {
      name: "Equity Residential",
      ticker: "EQR",
      price: 71.36,
      change: 0.4,
      rating: 6.7,
      description: "A leading multifamily residential REIT focused on urban and high-density suburban communities.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 3.8,
            profitMargin: 34.9,
            returnOnCapital: 5.59
          },
          explanation: "Moderate revenue growth with strong profit margins and solid return on capital. Effective property management and operational efficiency support financial performance."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.3,
            beta: 0.88,
            dividendConsistency: "Medium"
          },
          explanation: "Moderate volatility with below-average beta indicates reasonable price stability. Mixed dividend history with some variability but general upward trend over time."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 26.8,
            pbRatio: 2.46,
            dividendYield: "3.9%"
          },
          explanation: "Trades at a reasonable P/E multiple with typical price-to-book value for apartment REITs. Slightly below-average dividend yield is balanced by superior property quality and locations."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: 1.7,
            relativePerformance: -6.3,
            rsi: 52.8
          },
          explanation: "Modest absolute price gains but underperformance compared to broader real estate sector. Neutral RSI suggests balanced market sentiment currently."
        }
      },
      synopsis: {
        price: "Trading at 71.36 with modest recent gains despite sector rotation headwinds.",
        company: "Premier apartment owner focusing on urban and transit-oriented communities.",
        role: "Quality residential real estate exposure with focus on millennial renters."
      },
      overallAnalysis: "High-quality apartment REIT with superior property locations and demographic advantages. Well-positioned for urban rental recovery as return-to-office trends increase demand for convenient housing in employment centers.",
      chartData: [69, 72, 68, 71, 73, 68, 70, 72, 74, 71, 71.36],
      industry: "Real Estate"
    }
  ]

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: ["./client/index.html", "./client/src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          "1": "hsl(var(--chart-1))",
          "2": "hsl(var(--chart-2))",
          "3": "hsl(var(--chart-3))",
          "4": "hsl(var(--chart-4))",
          "5": "hsl(var(--chart-5))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
        "shimmer": {
          "0%": {
            transform: "translateX(-100%)",
          },
          "100%": {
            transform: "translateX(100%)",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "shimmer": "shimmer 1.5s infinite",
      },
    },
  },
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
} satisfies Config;

================
File: temp.txt
================
"Real Estate": [
    {
      name: "Prologis",
      ticker: "PLD",
      price: 110.26,
      change: 0.8,
      rating: 7.2,
      description: "A leading global owner, operator and developer of logistics real estate.",
      metrics: {
        performance: {
          value: "Average",
          color: "yellow",
          details: {
            revenueGrowth: 2.2,
            profitMargin: 45.4,
            returnOnCapital: 4.3
          },
          explanation: "Mixed performance with modest revenue growth but excellent profitability. Strong operational efficiency in managing logistics properties with healthy returns on invested capital."
        },
        stability: {
          value: "Poor",
          color: "red",
          details: {
            volatility: 2.5,
            beta: 1.24,
            dividendConsistency: "Medium"
          },
          explanation: "Higher-than-industry-average volatility and beta indicate more price fluctuations than peers. Dividend growth history is acceptable but not outstanding compared to some REITs."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 28,
            pbRatio: 1.9,
            dividendYield: "3.7%"
          },
          explanation: "Trades at a fair valuation relative to earnings and book value. Dividend yield is slightly below the REIT industry average but remains attractive compared to broader market."
        },
        momentum: {
          value: "Average",
          color: "yellow",
          details: {
            threeMonthReturn: 6.1,
            relativePerformance: -2,
            rsi: 37.4
          },
          explanation: "Recent price performance is mixed with decent absolute returns but slightly underperforming the broader real estate index. RSI suggests the stock is neither overbought nor oversold."
        }
      },
      synopsis: {
        price: "Trading at 110.26, reflecting modest recent gains despite market volatility.",
        company: "Global leader in logistics real estate with significant e-commerce exposure.",
        role: "Core holding for real estate allocation with balance of growth and income."
      },
      overallAnalysis: "A high-quality logistics REIT benefiting from e-commerce growth with strong performance and stability. Offers a balanced opportunity with above-average growth, defensive characteristics, and reliable income.",
      chartData: [96, 101, 97, 104, 108, 96, 98, 103, 107, 109, 110.26],
      industry: "Real Estate"
    },
    {
      name: "Realty Income Corp",
      ticker: "O",
      price: 56.28,
      change: -0.4,
      rating: 6.8,
      description: "A monthly dividend paying REIT focused on single-tenant commercial properties.",
      metrics: {
        performance: {
          value: "Average",
          color: "yellow",
          details: {
            revenueGrowth: 29.5,
            profitMargin: 16.0,
            returnOnCapital: 1.3
          },
          explanation: "Strong revenue growth driven by acquisitions, but below-average profit margins and returns on capital compared to peers. Scale benefits are partially offset by efficiency challenges."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.0,
            beta: 0.82,
            dividendConsistency: "Good"
          },
          explanation: "Below-average volatility and beta indicate more stability than most REITs. Exceptional dividend consistency with a track record of regular monthly increases makes this a reliable income generator."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 57.6,
            pbRatio: 1.29,
            dividendYield: "5.7%"
          },
          explanation: "High P/E ratio is partially offset by reasonable price-to-book value. Above-average dividend yield makes this attractive for income-focused investors despite the premium valuation multiple."
        },
        momentum: {
          value: "Average",
          color: "yellow",
          details: {
            threeMonthReturn: 6.6,
            relativePerformance: -1.5,
            rsi: 49.3
          },
          explanation: "Solid absolute price performance with moderate underperformance versus peers. Neutral RSI suggests balanced buying and selling pressure currently."
        }
      },
      synopsis: {
        price: "Trading at 56.28 with slight recent weakness despite attractive yield.",
        company: "Premier monthly dividend REIT with diverse commercial property portfolio.",
        role: "Income cornerstone for dividend-focused investors seeking reliability."
      },
      overallAnalysis: "Monthly dividend payer offering unmatched income reliability with triple-net leases that create highly predictable cash flows. Ideal for income-focused investors prioritizing consistent payments over maximum growth.",
      chartData: [52, 54, 51, 54, 58, 56, 55, 57, 58, 56, 56.28],
      industry: "Real Estate"
    },
    {
      name: "Simon Property Group",
      ticker: "SPG",
      price: 166.12,
      change: 1.2,
      rating: 6.5,
      description: "The largest owner and operator of shopping malls and premium outlets in the US.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 5.4,
            profitMargin: 41.9,
            returnOnCapital: 9.97
          },
          explanation: "Solid revenue growth considering retail headwinds, with exceptional profit margins and capital returns. Management effectively maximizes value from premium retail properties despite e-commerce challenges."
        },
        stability: {
          value: "Poor",
          color: "red",
          details: {
            volatility: 2.6,
            beta: 1.49,
            dividendConsistency: "Poor"
          },
          explanation: "Higher volatility and beta reflect increased sensitivity to economic cycles compared to other REITs. Past dividend cuts during market stress periods indicate less reliability for income investors."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 22,
            pbRatio: 18.68,
            dividendYield: "5.1%"
          },
          explanation: "Reasonable P/E ratio combined with a high price-to-book value shows market confidence but potential overvaluation of assets. Above-average dividend yield provides compelling income."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -3.1,
            relativePerformance: -11,
            rsi: 41.9
          },
          explanation: "Recent price weakness both on absolute basis and relative to peers. Moderately low RSI suggests some selling pressure but approaching levels that might attract contrarian investors."
        }
      },
      synopsis: {
        price: "Trading at 166.12 with some recent strength despite longer-term underperformance.",
        company: "Dominant mall operator with premium locations and evolving business model.",
        role: "Value opportunity in retail real estate with above-average income potential."
      },
      overallAnalysis: "Premium mall operator offering high income yield and value despite retail headwinds. Has shown resilience by transforming properties to maintain relevance in the evolving retail landscape.",
      chartData: [158, 162, 155, 159, 163, 155, 157, 162, 167, 164, 166.12],
      industry: "Real Estate"
    },
    {
      name: "AvalonBay Communities",
      ticker: "AVB",
      price: 214.36,
      change: 0.6,
      rating: 7.0,
      description: "A leading apartment REIT focused on high-quality properties in premium coastal markets.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 4.9,
            profitMargin: 36.5,
            returnOnCapital: 5.6
          },
          explanation: "Healthy revenue growth in competitive apartment markets with strong profit margins and solid return on capital. Operational excellence in property management contributes to superior financial performance."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.0,
            beta: 0.89,
            dividendConsistency: "Good"
          },
          explanation: "Below-average volatility and beta indicate relative price stability. Consistent dividend growth history even during challenging rental markets demonstrates financial resilience."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 28.2,
            pbRatio: 2.55,
            dividendYield: "3.3%"
          },
          explanation: "Trades at a modest premium to earnings and book value compared to REIT averages. Dividend yield is slightly below sector average but compensated by growth potential in high-barrier-to-entry markets."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -2.4,
            relativePerformance: -10,
            rsi: 47.8
          },
          explanation: "Recent price weakness both on absolute basis and relative to broader real estate sector. Neutral RSI suggests balanced market sentiment despite underperformance."
        }
      },
      synopsis: {
        price: "Trading at 214.36 with modest recent gains despite quarter-to-date weakness.",
        company: "Premium apartment owner/operator in supply-constrained coastal markets.",
        role: "Quality residential real estate exposure with inflation protection features."
      },
      overallAnalysis: "Premium apartment REIT focused on supply-constrained coastal markets with persistent housing demand. Benefits from increasing affordability challenges that make renting necessary in high-cost metropolitan areas.",
      chartData: [205, 210, 202, 208, 215, 204, 207, 211, 219, 213, 214.36],
      industry: "Real Estate"
    },
    {
      name: "Public Storage",
      ticker: "PSA",
      price: 294.93,
      change: -0.3,
      rating: 6.9,
      description: "The world's largest owner and operator of self-storage facilities.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 3.9,
            profitMargin: 39.9,
            returnOnCapital: 10.2
          },
          explanation: "Modest but consistent revenue growth with exceptional profit margins and return on capital. Self-storage business model delivers superior profitability with minimal operational complexity."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.6,
            beta: 0.8,
            dividendConsistency: "Good"
          },
          explanation: "Slightly higher volatility but low beta indicates less correlation with market movements. Strong dividend consistency provides reliable income through various market environments."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 27.7,
            pbRatio: 9.65,
            dividendYield: "4.2%"
          },
          explanation: "Reasonable P/E ratio but very high price-to-book value indicates potential overvaluation of assets. Attractive dividend yield partially compensates for the premium valuation."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -1.7,
            relativePerformance: -9.7,
            rsi: 43.5
          },
          explanation: "Modest price weakness both on absolute basis and compared to peers. Moderately low RSI suggests some recent selling pressure but not at extreme levels."
        }
      },
      synopsis: {
        price: "Trading at 294.93 with slight recent weakness following longer downtrend.",
        company: "Dominant self-storage operator with recession-resistant business model.",
        role: "Defensive real estate holding with steady income and inflation protection."
      },
      overallAnalysis: "Exceptionally stable self-storage REIT with above-average income and minimal economic sensitivity. Low operating costs and flexible pricing power create consistent performance across market cycles.",
      chartData: [285, 290, 283, 288, 296, 287, 290, 295, 301, 296, 294.93],
      industry: "Real Estate"
    },
    {
      name: "Digital Realty Trust",
      ticker: "DLR",
      price: 155.49,
      change: 2.1,
      rating: 5.8,
      description: "A leading global provider of data center, colocation and interconnection solutions.",
      metrics: {
        performance: {
          value: "Poor",
          color: "red",
          details: {
            revenueGrowth: 1.4,
            profitMargin: 10.1,
            returnOnCapital: 1.43
          },
          explanation: "Below-average revenue growth with significantly lower profit margins and returns on capital than REIT peers. High capital intensity of data center development creates financial performance challenges."
        },
        stability: {
          value: "Poor",
          color: "red",
          details: {
            volatility: 3.1,
            beta: 0.92,
            dividendConsistency: "Good"
          },
          explanation: "Higher volatility despite moderate beta indicates price instability regardless of market direction. Strong dividend growth history is a positive counterbalance to price volatility."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 95.6,
            pbRatio: 2.54,
            dividendYield: "3.2%"
          },
          explanation: "Very high P/E ratio and moderate price-to-book suggests premium valuation with growth expectations. Below-average dividend yield for a REIT reflects the market's focus on future growth over current income."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -12.1,
            relativePerformance: -20,
            rsi: 50.1
          },
          explanation: "Significant price weakness both on absolute basis and relative to peers. Neutral RSI despite underperformance suggests selling pressure may be stabilizing."
        }
      },
      synopsis: {
        price: "Trading at 155.49 with recent strength following notable prior weakness.",
        company: "Global data center provider with both colocation and hyperscale offerings.",
        role: "Technology-oriented real estate exposure with growth and income potential."
      },
      overallAnalysis: "Technology-focused REIT providing data center exposure with better growth than traditional real estate while maintaining income characteristics. Benefits from cloud computing, AI workloads, and growing digital infrastructure demands.",
      chartData: [168, 172, 165, 160, 158, 149, 146, 151, 157, 152, 155.49],
      industry: "Real Estate"
    },
    {
      name: "American Tower Corp",
      ticker: "AMT",
      price: 212.8,
      change: 1.5,
      rating: 7.3,
      description: "The largest global owner and operator of wireless communications infrastructure.",
      metrics: {
        performance: {
          value: "Average",
          color: "yellow",
          details: {
            revenueGrowth: -3.0,
            profitMargin: 20.9,
            returnOnCapital: 5.24
          },
          explanation: "Revenue contraction is a concern, partially offset by decent profit margins and return on capital. Recent financial performance reflects temporary integration challenges with acquisitions."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.6,
            beta: 0.89,
            dividendConsistency: "Good"
          },
          explanation: "Slightly higher volatility but below-average beta indicates less correlation with broader market movements. Consistent dividend growth history demonstrates financial stability."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 44.2,
            pbRatio: 29.41,
            dividendYield: "3.2%"
          },
          explanation: "High P/E ratio and extremely high price-to-book value indicate significant premium to asset value. Below-average dividend yield for a REIT suggests investors are paying for expected future growth."
        },
        momentum: {
          value: "Good",
          color: "green",
          details: {
            threeMonthReturn: 15.1,
            relativePerformance: 7.1,
            rsi: 61.1
          },
          explanation: "Strong recent price performance both on absolute basis and compared to peers. Moderately high RSI indicates positive momentum without reaching extreme overbought levels."
        }
      },
      synopsis: {
        price: "Trading at 212.80 with solid momentum after extended period of weakness.",
        company: "Global leader in wireless tower infrastructure essential for mobile networks.",
        role: "Technology-adjacent real estate with combination of growth and income."
      },
      overallAnalysis: "Essential wireless infrastructure provider with defensive characteristics and consistent income from long-term leases. Benefits from increasing data consumption and 5G expansion for continued stable growth.",
      chartData: [185, 190, 182, 195, 200, 189, 196, 204, 208, 210, 212.8],
      industry: "Real Estate"
    },
    {
      name: "Welltower Inc",
      ticker: "WELL",
      price: 149.84,
      change: 1.8,
      rating: 6.4,
      description: "A healthcare REIT specializing in senior housing, post-acute care, and outpatient medical properties.",
      metrics: {
        performance: {
          value: "Poor",
          color: "red",
          details: {
            revenueGrowth: 20.4,
            profitMargin: 6.3,
            returnOnCapital: 1.06
          },
          explanation: "Exceptional revenue growth but significantly below-average profit margins and return on capital. Growth-focused strategy currently prioritizes scale over operational efficiency."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.2,
            beta: 0.94,
            dividendConsistency: "Poor"
          },
          explanation: "Moderate volatility and beta indicate average price stability. Historic dividend cuts during pandemic reflect vulnerability of healthcare properties to certain crisis scenarios."
        },
        value: {
          value: "Poor",
          color: "red",
          details: {
            peRatio: 182.2,
            pbRatio: 2.98,
            dividendYield: "1.9%"
          },
          explanation: "Extremely high P/E ratio and average price-to-book value indicate significant premium valuation. Very low dividend yield for a REIT reflects both valuation and lower payout ratio focused on growth."
        },
        momentum: {
          value: "Good",
          color: "green",
          details: {
            threeMonthReturn: 19.3,
            relativePerformance: 11.3,
            rsi: 54.7
          },
          explanation: "Exceptional recent price performance both on absolute basis and relative to peers. Moderate RSI suggests strong buying interest without reaching extreme levels."
        }
      },
      synopsis: {
        price: "Trading at 149.84 with strong recent momentum reflecting sector recovery.",
        company: "Leading senior housing and healthcare property owner with demographic tailwinds.",
        role: "Growth-oriented healthcare real estate exposure with aging population thesis."
      },
      overallAnalysis: "Healthcare REIT with strong demographic tailwinds from an aging population. Combines defensive characteristics and recession resistance with above-average growth potential in senior housing and medical facilities.",
      chartData: [125, 130, 127, 132, 138, 128, 135, 140, 145, 147, 149.84],
      industry: "Real Estate"
    },
    {
      name: "Boston Properties",
      ticker: "BXP",
      price: 69.48,
      change: -1.2,
      rating: 5.5,
      description: "The largest publicly-traded developer, owner and manager of Class A office properties.",
      metrics: {
        performance: {
          value: "Poor",
          color: "red",
          details: {
            revenueGrowth: 4.1,
            profitMargin: 0.4,
            returnOnCapital: 0.06
          },
          explanation: "Modest revenue growth but extremely poor profit margins and negligible return on capital. Office property challenges have severely impacted financial performance metrics."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 3.0,
            beta: 1.08,
            dividendConsistency: "Poor"
          },
          explanation: "Higher volatility and above-average beta indicate more price instability and market correlation. Past dividend cuts reflect vulnerability to office sector challenges."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 785,
            pbRatio: 2.03,
            dividendYield: "5.7%"
          },
          explanation: "Extremely high P/E ratio due to depressed earnings, but reasonable price-to-book value suggests potential value. Very attractive dividend yield offers compelling income if sustainable."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: -6.4,
            relativePerformance: -14.4,
            rsi: 52.5
          },
          explanation: "Significant price weakness both on absolute basis and compared to peers. Neutral RSI suggests balanced buying and selling despite underperformance."
        }
      },
      synopsis: {
        price: "Trading at 69.48 with recent weakness indicating ongoing sector concerns.",
        company: "Premium office property owner facing work-from-home and oversupply challenges.",
        role: "Deep value opportunity in office real estate with significant income yield."
      },
      overallAnalysis: "Premium office REIT trading at historical discount due to work-from-home trends and financing concerns. Offers exceptional value for contrarian investors willing to accept higher risk for potential recovery upside.",
      chartData: [75, 78, 72, 74, 76, 71, 73, 75, 70, 70.5, 69.48],
      industry: "Real Estate"
    },
    {
      name: "Equity Residential",
      ticker: "EQR",
      price: 71.36,
      change: 0.4,
      rating: 6.7,
      description: "A leading multifamily residential REIT focused on urban and high-density suburban communities.",
      metrics: {
        performance: {
          value: "Good",
          color: "green",
          details: {
            revenueGrowth: 3.8,
            profitMargin: 34.9,
            returnOnCapital: 5.59
          },
          explanation: "Moderate revenue growth with strong profit margins and solid return on capital. Effective property management and operational efficiency support financial performance."
        },
        stability: {
          value: "Average",
          color: "yellow",
          details: {
            volatility: 2.3,
            beta: 0.88,
            dividendConsistency: "Medium"
          },
          explanation: "Moderate volatility with below-average beta indicates reasonable price stability. Mixed dividend history with some variability but general upward trend over time."
        },
        value: {
          value: "Average",
          color: "yellow",
          details: {
            peRatio: 26.8,
            pbRatio: 2.46,
            dividendYield: "3.9%"
          },
          explanation: "Trades at a reasonable P/E multiple with typical price-to-book value for apartment REITs. Slightly below-average dividend yield is balanced by superior property quality and locations."
        },
        momentum: {
          value: "Poor",
          color: "red",
          details: {
            threeMonthReturn: 1.7,
            relativePerformance: -6.3,
            rsi: 52.8
          },
          explanation: "Modest absolute price gains but underperformance compared to broader real estate sector. Neutral RSI suggests balanced market sentiment currently."
        }
      },
      synopsis: {
        price: "Trading at 71.36 with modest recent gains despite sector rotation headwinds.",
        company: "Premier apartment owner focusing on urban and transit-oriented communities.",
        role: "Quality residential real estate exposure with focus on millennial renters."
      },
      overallAnalysis: "High-quality apartment REIT with superior property locations and demographic advantages. Well-positioned for urban rental recovery as return-to-office trends increase demand for convenient housing in employment centers.",
      chartData: [69, 72, 68, 71, 73, 68, 70, 72, 74, 71, 71.36],
      industry: "Real Estate"
    }
  ]

================
File: theme.json
================
{
  "variant": "professional",
  "primary": "hsl(195 100% 50%)",
  "appearance": "light",
  "radius": 0.8
}

================
File: tsconfig.json
================
{
  "include": ["client/src/**/*", "shared/**/*", "server/**/*"],
  "exclude": ["node_modules", "build", "dist", "**/*.test.ts"],
  "compilerOptions": {
    "incremental": true,
    "tsBuildInfoFile": "./node_modules/typescript/tsbuildinfo",
    "noEmit": true,
    "module": "ESNext",
    "strict": true,
    "lib": ["esnext", "dom", "dom.iterable"],
    "jsx": "preserve",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "allowImportingTsExtensions": true,
    "moduleResolution": "bundler",
    "baseUrl": ".",
    "types": ["node", "vite/client"],
    "paths": {
      "@/*": ["./client/src/*"],
      "@shared/*": ["./shared/*"]
    }
  }
}

================
File: vite.config.ts
================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import themePlugin from "@replit/vite-plugin-shadcn-theme-json";
import path, { dirname } from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

export default defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    themePlugin(),
    ...(process.env.NODE_ENV !== "production" &&
    process.env.REPL_ID !== undefined
      ? [
          await import("@replit/vite-plugin-cartographer").then((m) =>
            m.cartographer(),
          ),
        ]
      : []),
  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "client", "src"),
      "@shared": path.resolve(__dirname, "shared"),
    },
  },
  root: path.resolve(__dirname, "client"),
  build: {
    outDir: path.resolve(__dirname, "dist/public"),
    emptyOutDir: true,
  },
});



================================================================
End of Codebase
================================================================
