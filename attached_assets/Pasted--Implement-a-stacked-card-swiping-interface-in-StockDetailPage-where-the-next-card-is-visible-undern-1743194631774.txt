 Implement a stacked card swiping interface in StockDetailPage where the next card is visible underneath the current card during swipes, and the current card remains full-sized and vertically scrollable.

Files to Modify:

client/src/pages/stock-detail-page.tsx
client/src/components/ui/stock-card.tsx
Steps:

1. Modify client/src/pages/stock-detail-page.tsx:

a.  Import necessary components: Ensure motion and AnimatePresence are imported from framer-motion.
javascript import { motion, AnimatePresence } from "framer-motion";

b.  Update the Main Content Container Div:
* Locate the div that wraps the <StockCard /> component (it currently has className="flex-1 relative").
* Change its className to flex-1 relative overflow-hidden. (This ensures the container defines the boundary and hides any overflow during animations).

c.  Implement Card Stacking Logic:
* Replace the single <StockCard ... /> rendering inside the main content div with the following structure using <AnimatePresence> and two <motion.div> wrappers:

       ```tsx
       {/* Main content - Card Stacking Area */}
       <div className="flex-1 relative overflow-hidden"> {/* Ensure this class */}

         <AnimatePresence initial={false}>
           {/* Render Next Card (if exists) - Positioned behind */}
           {currentStockIndex + 1 < stocks.length && (
             <motion.div
               key={`stackcard-${currentStockIndex + 1}`} // Unique key based on index
               className="absolute inset-0 p-4" // Fills container, adds padding FOR the card
               style={{ zIndex: 1 }}
               initial={{ scale: 0.95, y: 15, opacity: 0.9 }}
               animate={{ scale: 0.95, y: 15, opacity: 0.9 }} // Stays scaled down/offset
               exit={{ scale: 0.9, y: 30, opacity: 0 }}
               transition={{ type: "spring", stiffness: 500, damping: 50 }}
             >
               {/* This inner div prevents interaction with the card behind */}
               <div style={{ pointerEvents: 'none', height: '100%', width: '100%' }}>
                 <StockCard
                   stock={stocks[currentStockIndex + 1]}
                   onNext={() => {}}
                   onPrevious={() => {}}
                   currentIndex={currentStockIndex + 1}
                   totalCount={stocks.length}
                   displayMode={useRealTimeData ? 'realtime' : 'simple'}
                   // NO nextStock prop here
                 />
               </div>
             </motion.div>
           )}

           {/* Render Current Card - Positioned on top */}
           {currentStock && (
              <motion.div
                key={`stackcard-${currentStockIndex}`} // Unique key based on index
                className="absolute inset-0 p-4" // Fills container, adds padding FOR the card
                style={{ zIndex: 2 }}
                initial={{ scale: 1, y: 0, opacity: 1 }} // Enters at full size
                animate={{ scale: 1, y: 0, opacity: 1 }} // Stays at full size
                // Dragging/Exit is handled within StockCard component itself
              >
               {/* StockCard component manages its own drag */}
               <StockCard
                 stock={currentStock}
                 onNext={handleNextStock}
                 onPrevious={handlePreviousStock}
                 currentIndex={currentStockIndex}
                 totalCount={stocks.length}
                 displayMode={useRealTimeData ? 'realtime' : 'simple'}
                  // NO nextStock prop here
               />
              </motion.div>
           )}
         </AnimatePresence>
       </div> {/* End of main content div */}
       ```
d.  Update Buy/Skip Button Logic: Ensure the onClick handler for the "Buy" button correctly targets the current card's hidden buy button using the index-based key:
javascript onClick={() => { // Trigger the hidden buy button inside the CURRENT StockCard const currentCardMotionDiv = document.querySelector<HTMLElement>(`[key='stackcard-${currentStockIndex}']`); // Use key const buyButton = currentCardMotionDiv?.querySelector<HTMLButtonElement>('[data-testid="buy-button"]'); buyButton?.click(); }}

2. Modify client/src/components/ui/stock-card.tsx:

a.  Remove Internal Preview Logic:
* Search for and delete the div block responsible for rendering the blurred background or nextStock preview. This block likely starts with <div className="absolute inset-0 overflow-hidden blur-xl..." or similar, and was present in the original code you provided.
b.  Ensure Draggable Container Styles:
* Verify the outermost motion.div (the one that has the drag="x" prop) has the following classes: h-full overflow-y-auto overflow-x-hidden pb-16 stock-card. The h-full and overflow-y-auto are critical for allowing the card to be full height within its padded wrapper and scroll internally. Make sure it also has an opaque background (like bg-white or the gradient you were using).
c.  Remove nextStock Prop: Delete the nextStock prop from the StockCardProps interface and from the component's function signature, as it's no longer used.