After reviewing your code and the screenshot, I can see the issue with your portfolio widget not updating properly. This appears to be a state management problem rather than a visual issue.
The main issue is likely in how your InvestmentPanel component is listening for portfolio updates. Looking at the code you provided:

Your InvestmentPanel component has a force update mechanism that seems to be trying to re-render when portfolio data changes:

javascriptCopyuseEffect(() => {
  if (portfolio) {
    // Force re-render when portfolio updates
    forceUpdate({});
    console.log("Portfolio updated in InvestmentPanel:", portfolio.holdings.length);
  }
}, [portfolio, portfolio?.holdings.length, portfolio?.cash, portfolio?.portfolioValue]);
However, there might be a few problems here:

Context subscription issue: The widget may not be properly subscribing to context updates from the PortfolioContext. Check if you're using the same context instance across your application.
Missing dependency: In your dependency array, you're watching portfolio.holdings.length, but it may not trigger properly because array comparison can be tricky. You might need to watch a more specific value.
State synchronization problem: The widget on your home page might be using a different state than your portfolio page.

Here's what I recommend:
javascriptCopy// Improve the useEffect in InvestmentPanel.js
useEffect(() => {
  // Add a timestamp or unique identifier to force refresh
  const timer = setTimeout(() => {
    forceUpdate({ timestamp: Date.now() });
  }, 100); // Small delay to ensure portfolio data is fully updated
  
  return () => clearTimeout(timer);
}, [
  portfolio, 
  portfolio?.holdings.length, 
  portfolio?.cash, 
  portfolio?.portfolioValue,
  portfolio?.totalValue, // Add this if not already included
]);
Additionally, make sure your PortfolioContext is correctly set up to propagate changes:
javascriptCopy// In your PortfolioContext.js
const updatePortfolio = (newData) => {
  setPortfolioState(prevState => ({
    ...prevState,
    ...newData,
    // Add a lastUpdated timestamp to force consumers to update
    lastUpdated: Date.now()
  }));
};
This would ensure that any component using the context gets notified about all updates. You'd then need to include portfolio?.lastUpdated in your dependency array for the useEffect.
The key is ensuring that whenever the portfolio changes (through your portfolio impact calculator), the context state is properly updated and all subscribing components receive the notification to re-render.