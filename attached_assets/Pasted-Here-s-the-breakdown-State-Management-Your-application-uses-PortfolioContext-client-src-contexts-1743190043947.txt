Here's the breakdown:

State Management: Your application uses PortfolioContext (client/src/contexts/portfolio-context.tsx) to manage the portfolio's state (cash, holdings, etc.). This context is correctly designed to update its state when buyStock is called from the PortfolioImpactCalculator  and includes mechanisms (version, lastUpdated) intended to help trigger UI updates.   
The Problem: The HomePage component (client/src/pages/home-page.tsx) is wrapped by its own <PortfolioProvider>. Your main application file (client/src/App.tsx) likely also wraps the entire application or router in a <PortfolioProvider>. This creates two separate instances of the portfolio state.   
Data Flow Issue:
When you make an investment via the PortfolioImpactCalculator (likely triggered from the StockDetailPage), it updates the main PortfolioContext provided in App.tsx.
However, the HomePage and the components within it (like PortfolioDashboard) are reading data from the separate, nested PortfolioContext instance created within HomePage itself. This nested context instance is never updated by the buyStock action, so the widget on the home page doesn't see the changes in cash or invested amounts.   
Why it seems to refresh: The user mentioned the page refreshes. This might be due to other state changes or routing actions, but the data the widget displays remains stale because it's connected to the wrong context instance.
How to Fix:

The solution is to ensure there's only one PortfolioProvider wrapping your application, typically at the highest level (like in App.tsx or your main router setup).

Remove the <PortfolioProvider> wrapper from the HomePage component (client/src/pages/home-page.tsx).   
By doing this, the HomePage and its child components (PortfolioDashboard, CompetitionTracker) will correctly consume the single, application-wide PortfolioContext that is being updated by the investment actions. This should resolve the issue of the widget not reflecting the latest cash and invested amounts.


Sources and related content
